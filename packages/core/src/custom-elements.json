{
  "timestamp": "2022-04-16T07:46:32",
  "compiler": {
    "name": "@stencil/core",
    "version": "2.14.2",
    "typescriptVersion": "4.5.4"
  },
  "tags": [
    {
      "filePath": "./src/addons/addon-actions/addon-actions.tsx",
      "encapsulation": "shadow",
      "tag": "stories-addon-actions",
      "name": "stories-addon-actions",
      "readme": "# stories-addon-actions\n\nThe stories-addon-actions displays a panel with data received by event handler (callback) arguments in your stories.\n\n",
      "description": "The stories-addon-actions displays a panel with data received by event handler (callback) arguments in your stories.",
      "docsTags": [],
      "usage": {},
      "properties": [],
      "attributes": [],
      "methods": [
        {
          "name": "storyContextChanged",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "storyContextChanged(story: StoryComponent, context: StoryContext) => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [],
      "cssProperties": [],
      "slots": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/addons/addon-controls/addon-controls.tsx",
      "encapsulation": "shadow",
      "tag": "stories-addon-controls",
      "name": "stories-addon-controls",
      "readme": "# stories-addon-controls\n\nThe stories-addon-controls helps you interact with components via changing arguments.\n",
      "description": "The stories-addon-controls helps you interact with components via changing arguments.",
      "docsTags": [],
      "usage": {},
      "properties": [],
      "attributes": [],
      "methods": [
        {
          "name": "storyContextChanged",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "storyContextChanged(story: StoryComponent, context: StoryContext) => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [],
      "cssProperties": [],
      "slots": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/addons/addons/addons.tsx",
      "encapsulation": "shadow",
      "tag": "stories-addons",
      "name": "stories-addons",
      "readme": "# stories-addons\n\nThe stories-addons is a wrapping component implemented for helping in addons management.\n",
      "description": "The stories-addons is a wrapping component implemented for helping in addons management.",
      "docsTags": [],
      "usage": {},
      "properties": [],
      "attributes": [],
      "methods": [
        {
          "name": "findAddon",
          "returns": {
            "type": "Promise<Addon>",
            "docs": ""
          },
          "signature": "findAddon(id: string) => Promise<Addon>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        },
        {
          "name": "registerAddon",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "registerAddon(addon: Addon) => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        },
        {
          "name": "storyContextChanged",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "storyContextChanged(story: StoryComponent, context: StoryContext) => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        },
        {
          "name": "unregisterAddon",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "unregisterAddon(addon: Addon) => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [],
      "cssProperties": [],
      "slots": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/app/app.tsx",
      "encapsulation": "shadow",
      "tag": "stories-app",
      "name": "stories-app",
      "readme": "# stories-app\n\nThe stories-app is a main Stories Framework's application.\n",
      "description": "The stories-app is a main Stories Framework's application.",
      "docsTags": [],
      "usage": {},
      "properties": [
        {
          "name": "modules",
          "type": "StoryModule[]",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Story Modules",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "StoryModule[]"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Story Modules"
        },
        {
          "name": "store",
          "type": "StoriesState & NotificationsState & LayoutState & AddonsState",
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Story Modules",
          "docsTags": [],
          "default": "state",
          "values": [
            {
              "type": "StoriesState & NotificationsState & LayoutState & AddonsState"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Story Modules"
        }
      ],
      "attributes": [
        {
          "type": "StoryModule[]",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Story Modules",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "StoryModule[]"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "[]",
          "description": "Story Modules"
        },
        {
          "type": "StoriesState & NotificationsState & LayoutState & AddonsState",
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Story Modules",
          "docsTags": [],
          "default": "state",
          "values": [
            {
              "type": "StoriesState & NotificationsState & LayoutState & AddonsState"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "state",
          "description": "Story Modules"
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "storyChange",
          "detail": "{ storyId: string; kinds: string[]; storyName: string; storyFn: StoryFn<AnyFramework, Args>; component?: any; subcomponents?: Record<string, any>; decorators?: DecoratorFunction<AnyFramework, Args>[]; args: Partial<Args>; argTypes: Partial<ArgTypes<Args>>; parameters?: Parameters; }",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": [],
          "name": "storyChange",
          "description": "",
          "type": "{ storyId: string; kinds: string[]; storyName: string; storyFn: StoryFn<AnyFramework, Args>; component?: any; subcomponents?: Record<string, any>; decorators?: DecoratorFunction<AnyFramework, Args>[]; args: Partial<Args>; argTypes: Partial<ArgTypes<Args>>; parameters?: Parameters; }"
        },
        {
          "event": "storyContextChange",
          "detail": "{ component?: any; subcomponents?: Record<string, any>; } & StoryUpdate<Args>",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": [],
          "name": "storyContextChange",
          "description": "",
          "type": "{ component?: any; subcomponents?: Record<string, any>; } & StoryUpdate<Args>"
        }
      ],
      "cssProperties": [],
      "slots": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/badge/badge.tsx",
      "encapsulation": "shadow",
      "tag": "stories-badge",
      "name": "stories-badge",
      "readme": "# stories-badge\n\nThe stories-badge is inline block element uses for notification of how many items associated with another element.\n",
      "description": "The stories-badge is inline block element uses for notification of how many items associated with another element.",
      "docsTags": [],
      "usage": {
        "angular": "```html\n<!-- Default -->\n<stories-badge>99</stories-badge>\n\n<!-- Colors -->\n<stories-badge color=\"primary\">11</stories-badge>\n<stories-badge color=\"secondary\">22</stories-badge>\n<stories-badge color=\"tertiary\">33</stories-badge>\n<stories-badge color=\"success\">44</stories-badge>\n<stories-badge color=\"warning\">55</stories-badge>\n<stories-badge color=\"danger\">66</stories-badge>\n<stories-badge color=\"light\">77</stories-badge>\n<stories-badge color=\"medium\">88</stories-badge>\n<stories-badge color=\"dark\">99</stories-badge>\n\n<!-- Button with badge on left and right -->\n<stories-button>\n  <stories-badge slot=\"start\">11</stories-badge>\n  <stories-label>My Button</stories-label>\n  <stories-badge slot=\"end\">22</stories-badge>\n</stories-item>\n```",
        "javascript": "```html\n<!-- Default -->\n<stories-badge>99</stories-badge>\n\n<!-- Colors -->\n<stories-badge color=\"primary\">11</stories-badge>\n<stories-badge color=\"secondary\">22</stories-badge>\n<stories-badge color=\"tertiary\">33</stories-badge>\n<stories-badge color=\"success\">44</stories-badge>\n<stories-badge color=\"warning\">55</stories-badge>\n<stories-badge color=\"danger\">66</stories-badge>\n<stories-badge color=\"light\">77</stories-badge>\n<stories-badge color=\"medium\">88</stories-badge>\n<stories-badge color=\"dark\">99</stories-badge>\n\n<!-- Button with badge on left and right -->\n<stories-button>\n  <stories-badge slot=\"start\">11</stories-badge>\n  <stories-label>My Button</stories-label>\n  <stories-badge slot=\"end\">22</stories-badge>\n</stories-item>\n```",
        "react": "```tsx\nimport React from 'react';\nimport { StoriesBadge, StoriesButton, StoriesLabel } from '@stories-js/react';\n\nexport const BadgeExample: React.FC = () => (\n  <div>\n    {/*-- Default --*/}\n    <StoriesBadge>99</StoriesBadge>\n\n    {/*-- Colors --*/}\n    <StoriesBadge color=\"primary\">11</StoriesBadge>\n    <StoriesBadge color=\"secondary\">22</StoriesBadge>\n    <StoriesBadge color=\"tertiary\">33</StoriesBadge>\n    <StoriesBadge color=\"success\">44</StoriesBadge>\n    <StoriesBadge color=\"warning\">55</StoriesBadge>\n    <StoriesBadge color=\"danger\">66</StoriesBadge>\n    <StoriesBadge color=\"light\">77</StoriesBadge>\n    <StoriesBadge color=\"medium\">88</StoriesBadge>\n    <StoriesBadge color=\"dark\">99</StoriesBadge>\n\n    {/*-- Button with badge on left and right --*/}\n    <StoriesButton>\n      <StoriesBadge slot=\"start\">11</StoriesBadge>\n      <StoriesLabel>My Button</StoriesLabel>\n      <StoriesBadge slot=\"end\">22</StoriesBadge>\n    </StoriesButton>\n  </fiv>\n);\n```\n",
        "stencil": "```tsx\nimport { Component, h } from '@stencil/core';\n\n@Component({\n  tag: 'badge-example',\n  styleUrl: 'badge-example.css'\n})\nexport class BadgeExample {\n  render() {\n    return [\n      // Default\n      <stories-badge>99</stories-badge>,\n\n      // Colors\n      <stories-badge color=\"primary\">11</stories-badge>,\n      <stories-badge color=\"secondary\">22</stories-badge>,\n      <stories-badge color=\"tertiary\">33</stories-badge>,\n      <stories-badge color=\"success\">44</stories-badge>,\n      <stories-badge color=\"warning\">55</stories-badge>,\n      <stories-badge color=\"danger\">66</stories-badge>,\n      <stories-badge color=\"light\">77</stories-badge>,\n      <stories-badge color=\"medium\">88</stories-badge>,\n      <stories-badge color=\"dark\">99</stories-badge>,\n\n      // Button with badge on left and right\n      <stories-button>\n        <stories-badge slot=\"start\">11</stories-badge>\n        <stories-label>My Button</stories-label>\n        <stories-badge slot=\"end\">22</stories-badge>\n      </stories-button>\n    ];\n  }\n}\n```",
        "vue": "```html\n<template>\n  <!-- Default -->\n  <stories-badge>99</stories-badge>\n\n  <!-- Colors -->\n  <stories-badge color=\"primary\">11</stories-badge>\n  <stories-badge color=\"secondary\">22</stories-badge>\n  <stories-badge color=\"tertiary\">33</stories-badge>\n  <stories-badge color=\"success\">44</stories-badge>\n  <stories-badge color=\"warning\">55</stories-badge>\n  <stories-badge color=\"danger\">66</stories-badge>\n  <stories-badge color=\"light\">77</stories-badge>\n  <stories-badge color=\"medium\">88</stories-badge>\n  <stories-badge color=\"dark\">99</stories-badge>\n\n  <!-- Button with badge on left and right -->\n  <stories-button>\n    <stories-badge slot=\"start\">11</stories-badge>\n    <stories-label>My Button</stories-label>\n    <stories-badge slot=\"end\">22</stories-badge>\n  </stories-button>\n</template>\n\n<script>\nimport { StoriesBadge, StoriesButton, StoriesLabel } from '@stories-js/vue';\nimport { defineComponent } from 'vue';\n\nexport default defineComponent({\n  components: { StoriesBadge, StoriesButton, StoriesLabel }\n});\n</script>\n```"
      },
      "properties": [
        {
          "name": "color",
          "type": "string",
          "mutable": false,
          "attr": "color",
          "reflectToAttr": true,
          "docs": "The color to use from your application's color palette.\nDefault options are: `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, and `\"dark\"`.\nFor more information on colors, see [theming](/docs/theming/basics).",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "description": "The color to use from your application's color palette.\nDefault options are: `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, and `\"dark\"`.\nFor more information on colors, see [theming](/docs/theming/basics)."
        }
      ],
      "attributes": [
        {
          "name": "color",
          "type": "string",
          "mutable": false,
          "attr": "color",
          "reflectToAttr": true,
          "docs": "The color to use from your application's color palette.\nDefault options are: `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, and `\"dark\"`.\nFor more information on colors, see [theming](/docs/theming/basics).",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "description": "The color to use from your application's color palette.\nDefault options are: `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, and `\"dark\"`.\nFor more information on colors, see [theming](/docs/theming/basics)."
        }
      ],
      "methods": [],
      "events": [],
      "cssProperties": [
        {
          "name": "--background",
          "annotation": "prop",
          "docs": "Background of the badge",
          "description": "Background of the badge"
        },
        {
          "name": "--color",
          "annotation": "prop",
          "docs": "Text color of the badge",
          "description": "Text color of the badge"
        },
        {
          "name": "--padding-bottom",
          "annotation": "prop",
          "docs": "Bottom padding of the badge",
          "description": "Bottom padding of the badge"
        },
        {
          "name": "--padding-end",
          "annotation": "prop",
          "docs": "Right padding if direction is left-to-right, and left padding if direction is right-to-left of the badge",
          "description": "Right padding if direction is left-to-right, and left padding if direction is right-to-left of the badge"
        },
        {
          "name": "--padding-start",
          "annotation": "prop",
          "docs": "Left padding if direction is left-to-right, and right padding if direction is right-to-left of the badge",
          "description": "Left padding if direction is left-to-right, and right padding if direction is right-to-left of the badge"
        },
        {
          "name": "--padding-top",
          "annotation": "prop",
          "docs": "Top padding of the badge",
          "description": "Top padding of the badge"
        }
      ],
      "slots": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/button/button.tsx",
      "encapsulation": "shadow",
      "tag": "stories-button",
      "name": "stories-button",
      "readme": "# Button\n\nThe stories-button is an styled HTML button element displays text, icons, or both.\n",
      "description": "The stories-button is an styled HTML button element displays text, icons, or both.",
      "docsTags": [],
      "usage": {},
      "properties": [
        {
          "name": "caret",
          "type": "boolean",
          "mutable": false,
          "attr": "caret",
          "reflectToAttr": false,
          "docs": "Set to true to draw the button with a caret for use with dropdowns, popovers, etc.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Set to true to draw the button with a caret for use with dropdowns, popovers, etc."
        },
        {
          "name": "circle",
          "type": "boolean",
          "mutable": false,
          "attr": "circle",
          "reflectToAttr": true,
          "docs": "Set to true to draw a circle button.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Set to true to draw a circle button."
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "If `true`, the user cannot interact with the button.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "description": "If `true`, the user cannot interact with the button."
        },
        {
          "name": "expand",
          "type": "\"block\" | \"full\"",
          "mutable": false,
          "attr": "expand",
          "reflectToAttr": true,
          "docs": "Set to `\"block\"` for a full-width button or to `\"full\"` for a full-width button\nwithout left and right borders.",
          "docsTags": [],
          "values": [
            {
              "value": "block",
              "type": "string"
            },
            {
              "value": "full",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "description": "Set to `\"block\"` for a full-width button or to `\"full\"` for a full-width button\nwithout left and right borders."
        },
        {
          "name": "href",
          "type": "string",
          "mutable": false,
          "attr": "href",
          "reflectToAttr": false,
          "docs": "Contains a URL or a URL fragment that the hyperlink points to.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Contains a URL or a URL fragment that the hyperlink points to."
        },
        {
          "name": "loading",
          "type": "boolean",
          "mutable": false,
          "attr": "loading",
          "reflectToAttr": true,
          "docs": "Set to true to draw the button in a loading state.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Set to true to draw the button in a loading state."
        },
        {
          "name": "pill",
          "type": "boolean",
          "mutable": false,
          "attr": "pill",
          "reflectToAttr": true,
          "docs": "Set to true to draw a pill-style button with rounded edges.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Set to true to draw a pill-style button with rounded edges."
        },
        {
          "name": "rel",
          "type": "string",
          "mutable": false,
          "attr": "rel",
          "reflectToAttr": false,
          "docs": "Specifies the relationship of the target object to the link object.\nThe value is a space-separated list of [link types](https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types).",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Specifies the relationship of the target object to the link object.\nThe value is a space-separated list of [link types](https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types)."
        },
        {
          "name": "size",
          "type": "\"large\" | \"medium\" | \"small\"",
          "mutable": false,
          "attr": "size",
          "reflectToAttr": true,
          "docs": "The button's size.",
          "docsTags": [],
          "default": "'medium'",
          "values": [
            {
              "value": "large",
              "type": "string"
            },
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "small",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "The button's size."
        },
        {
          "name": "target",
          "type": "string",
          "mutable": false,
          "attr": "target",
          "reflectToAttr": false,
          "docs": "Specifies where to display the linked URL.\nSpecial keywords: `\"_blank\"`, `\"_self\"`, `\"_parent\"`, `\"_top\"`.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Specifies where to display the linked URL.\nSpecial keywords: `\"_blank\"`, `\"_self\"`, `\"_parent\"`, `\"_top\"`."
        },
        {
          "name": "type",
          "type": "\"button\" | \"reset\" | \"submit\"",
          "mutable": false,
          "attr": "type",
          "reflectToAttr": false,
          "docs": "The type of the button.",
          "docsTags": [],
          "default": "'button'",
          "values": [
            {
              "value": "button",
              "type": "string"
            },
            {
              "value": "reset",
              "type": "string"
            },
            {
              "value": "submit",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "The type of the button."
        },
        {
          "name": "variant",
          "type": "\"danger\" | \"default\" | \"plain\" | \"primary\" | \"secondary\"",
          "mutable": false,
          "attr": "variant",
          "reflectToAttr": true,
          "docs": "The different variants.\nThe options are: `\"default\"`, `\"primary\"`, `\"secondary\"`, `\"danger\"`, and `\"plain\"`.",
          "docsTags": [],
          "default": "'default'",
          "values": [
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "default",
              "type": "string"
            },
            {
              "value": "plain",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "secondary",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "description": "The different variants.\nThe options are: `\"default\"`, `\"primary\"`, `\"secondary\"`, `\"danger\"`, and `\"plain\"`."
        }
      ],
      "attributes": [
        {
          "name": "caret",
          "type": "boolean",
          "mutable": false,
          "attr": "caret",
          "reflectToAttr": false,
          "docs": "Set to true to draw the button with a caret for use with dropdowns, popovers, etc.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "false",
          "description": "Set to true to draw the button with a caret for use with dropdowns, popovers, etc."
        },
        {
          "name": "circle",
          "type": "boolean",
          "mutable": false,
          "attr": "circle",
          "reflectToAttr": true,
          "docs": "Set to true to draw a circle button.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "false",
          "description": "Set to true to draw a circle button."
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "If `true`, the user cannot interact with the button.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "false",
          "description": "If `true`, the user cannot interact with the button."
        },
        {
          "name": "expand",
          "type": "\"block\" | \"full\"",
          "mutable": false,
          "attr": "expand",
          "reflectToAttr": true,
          "docs": "Set to `\"block\"` for a full-width button or to `\"full\"` for a full-width button\nwithout left and right borders.",
          "docsTags": [],
          "values": [
            {
              "value": "block",
              "type": "string"
            },
            {
              "value": "full",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "description": "Set to `\"block\"` for a full-width button or to `\"full\"` for a full-width button\nwithout left and right borders."
        },
        {
          "name": "href",
          "type": "string",
          "mutable": false,
          "attr": "href",
          "reflectToAttr": false,
          "docs": "Contains a URL or a URL fragment that the hyperlink points to.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Contains a URL or a URL fragment that the hyperlink points to."
        },
        {
          "name": "loading",
          "type": "boolean",
          "mutable": false,
          "attr": "loading",
          "reflectToAttr": true,
          "docs": "Set to true to draw the button in a loading state.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "false",
          "description": "Set to true to draw the button in a loading state."
        },
        {
          "name": "pill",
          "type": "boolean",
          "mutable": false,
          "attr": "pill",
          "reflectToAttr": true,
          "docs": "Set to true to draw a pill-style button with rounded edges.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "false",
          "description": "Set to true to draw a pill-style button with rounded edges."
        },
        {
          "name": "rel",
          "type": "string",
          "mutable": false,
          "attr": "rel",
          "reflectToAttr": false,
          "docs": "Specifies the relationship of the target object to the link object.\nThe value is a space-separated list of [link types](https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types).",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Specifies the relationship of the target object to the link object.\nThe value is a space-separated list of [link types](https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types)."
        },
        {
          "name": "size",
          "type": "\"large\" | \"medium\" | \"small\"",
          "mutable": false,
          "attr": "size",
          "reflectToAttr": true,
          "docs": "The button's size.",
          "docsTags": [],
          "default": "'medium'",
          "values": [
            {
              "value": "large",
              "type": "string"
            },
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "small",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "'medium'",
          "description": "The button's size."
        },
        {
          "name": "target",
          "type": "string",
          "mutable": false,
          "attr": "target",
          "reflectToAttr": false,
          "docs": "Specifies where to display the linked URL.\nSpecial keywords: `\"_blank\"`, `\"_self\"`, `\"_parent\"`, `\"_top\"`.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Specifies where to display the linked URL.\nSpecial keywords: `\"_blank\"`, `\"_self\"`, `\"_parent\"`, `\"_top\"`."
        },
        {
          "name": "type",
          "type": "\"button\" | \"reset\" | \"submit\"",
          "mutable": false,
          "attr": "type",
          "reflectToAttr": false,
          "docs": "The type of the button.",
          "docsTags": [],
          "default": "'button'",
          "values": [
            {
              "value": "button",
              "type": "string"
            },
            {
              "value": "reset",
              "type": "string"
            },
            {
              "value": "submit",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "'button'",
          "description": "The type of the button."
        },
        {
          "name": "variant",
          "type": "\"danger\" | \"default\" | \"plain\" | \"primary\" | \"secondary\"",
          "mutable": false,
          "attr": "variant",
          "reflectToAttr": true,
          "docs": "The different variants.\nThe options are: `\"default\"`, `\"primary\"`, `\"secondary\"`, `\"danger\"`, and `\"plain\"`.",
          "docsTags": [],
          "default": "'default'",
          "values": [
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "default",
              "type": "string"
            },
            {
              "value": "plain",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "secondary",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "defaultValue": "'default'",
          "description": "The different variants.\nThe options are: `\"default\"`, `\"primary\"`, `\"secondary\"`, `\"danger\"`, and `\"plain\"`."
        }
      ],
      "methods": [
        {
          "name": "removeFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "removeFocus() => Promise<void>",
          "parameters": [],
          "docs": "Removes focus from the button.",
          "docsTags": []
        },
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setFocus(options?: FocusOptions) => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the button.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "stories-blur",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the button loses focus.",
          "docsTags": [],
          "name": "stories-blur",
          "description": "Emitted when the button loses focus.",
          "type": "void"
        },
        {
          "event": "stories-focus",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the button has focus.",
          "docsTags": [],
          "name": "stories-focus",
          "description": "Emitted when the button has focus.",
          "type": "void"
        }
      ],
      "cssProperties": [
        {
          "name": "--background",
          "annotation": "prop",
          "docs": "Background of the button",
          "description": "Background of the button"
        },
        {
          "name": "--background-focus",
          "annotation": "prop",
          "docs": "Background of the button on focus",
          "description": "Background of the button on focus"
        },
        {
          "name": "--background-hover",
          "annotation": "prop",
          "docs": "Background of the button on hover",
          "description": "Background of the button on hover"
        },
        {
          "name": "--border-color",
          "annotation": "prop",
          "docs": "Border color of the button",
          "description": "Border color of the button"
        },
        {
          "name": "--border-color-focus",
          "annotation": "prop",
          "docs": "Border color of the button on focus",
          "description": "Border color of the button on focus"
        },
        {
          "name": "--border-color-hover",
          "annotation": "prop",
          "docs": "Border color of the button on hover",
          "description": "Border color of the button on hover"
        },
        {
          "name": "--border-radius",
          "annotation": "prop",
          "docs": "Border radius of the button",
          "description": "Border radius of the button"
        },
        {
          "name": "--border-style",
          "annotation": "prop",
          "docs": "Border style of the button",
          "description": "Border style of the button"
        },
        {
          "name": "--border-width",
          "annotation": "prop",
          "docs": "Border width of the button",
          "description": "Border width of the button"
        },
        {
          "name": "--color",
          "annotation": "prop",
          "docs": "Text color of the button",
          "description": "Text color of the button"
        },
        {
          "name": "--color-focus",
          "annotation": "prop",
          "docs": "Text color of the button on focus",
          "description": "Text color of the button on focus"
        },
        {
          "name": "--color-hover",
          "annotation": "prop",
          "docs": "Text color of the button on hover",
          "description": "Text color of the button on hover"
        },
        {
          "name": "--focus-ring",
          "annotation": "prop",
          "docs": "The focus ring style to use when the button receives focus, a `box-shadow` property.",
          "description": "The focus ring style to use when the button receives focus, a `box-shadow` property."
        },
        {
          "name": "--height",
          "annotation": "prop",
          "docs": "Height of the button",
          "description": "Height of the button"
        },
        {
          "name": "--padding-bottom",
          "annotation": "prop",
          "docs": "Bottom padding of the button",
          "description": "Bottom padding of the button"
        },
        {
          "name": "--padding-end",
          "annotation": "prop",
          "docs": "Right padding of the button (will be left padding when we support right-to-left direction)",
          "description": "Right padding of the button (will be left padding when we support right-to-left direction)"
        },
        {
          "name": "--padding-start",
          "annotation": "prop",
          "docs": "Left padding of the button (will be right padding when we support right-to-left direction)",
          "description": "Left padding of the button (will be right padding when we support right-to-left direction)"
        },
        {
          "name": "--padding-top",
          "annotation": "prop",
          "docs": "Top padding of the button",
          "description": "Top padding of the button"
        },
        {
          "name": "--shadow",
          "annotation": "prop",
          "docs": "Shadow of the button, a `box-shadow` property. Please note this will be overwritted by `--focus-ring` on focus.",
          "description": "Shadow of the button, a `box-shadow` property. Please note this will be overwritted by `--focus-ring` on focus."
        },
        {
          "name": "--transition",
          "annotation": "prop",
          "docs": "Transition of the button",
          "description": "Transition of the button"
        }
      ],
      "slots": [],
      "dependents": [
        "stories-tag"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "stories-tag": [
          "stories-button"
        ]
      }
    },
    {
      "filePath": "./src/components/checkbox/checkbox.tsx",
      "encapsulation": "shadow",
      "tag": "stories-checkbox",
      "name": "stories-checkbox",
      "readme": "# stories-checkbox\n\nThe stories-checkbox is a styled HTML checkboxed input element.\n",
      "description": "The stories-checkbox is a styled HTML checkboxed input element.",
      "docsTags": [],
      "usage": {},
      "properties": [
        {
          "name": "checked",
          "type": "boolean",
          "mutable": true,
          "attr": "checked",
          "reflectToAttr": true,
          "docs": "Set to true to draw the checkbox in a checked state.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Set to true to draw the checkbox in a checked state."
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Set to true to disable the checkbox.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Set to true to disable the checkbox."
        },
        {
          "name": "indeterminate",
          "type": "boolean",
          "mutable": true,
          "attr": "indeterminate",
          "reflectToAttr": true,
          "docs": "Set to true to draw the checkbox in an indeterminate state.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Set to true to draw the checkbox in an indeterminate state."
        },
        {
          "name": "invalid",
          "type": "boolean",
          "mutable": false,
          "attr": "invalid",
          "reflectToAttr": true,
          "docs": "Set to true to indicate this field is invalid. Will display the invalid text.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Set to true to indicate this field is invalid. Will display the invalid text."
        },
        {
          "name": "invalidText",
          "type": "string",
          "mutable": false,
          "attr": "invalid-text",
          "reflectToAttr": false,
          "docs": "The radio group's invalid text. Alternatively, you can use the invalid-text slot.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "The radio group's invalid text. Alternatively, you can use the invalid-text slot."
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "The name of the control, which is submitted with the form data.",
          "docsTags": [],
          "default": "this.inputId",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "The name of the control, which is submitted with the form data."
        },
        {
          "name": "value",
          "type": "string",
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The checkbox's value attribute.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "The checkbox's value attribute."
        }
      ],
      "attributes": [
        {
          "name": "checked",
          "type": "boolean",
          "mutable": true,
          "attr": "checked",
          "reflectToAttr": true,
          "docs": "Set to true to draw the checkbox in a checked state.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "false",
          "description": "Set to true to draw the checkbox in a checked state."
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Set to true to disable the checkbox.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "false",
          "description": "Set to true to disable the checkbox."
        },
        {
          "name": "indeterminate",
          "type": "boolean",
          "mutable": true,
          "attr": "indeterminate",
          "reflectToAttr": true,
          "docs": "Set to true to draw the checkbox in an indeterminate state.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "false",
          "description": "Set to true to draw the checkbox in an indeterminate state."
        },
        {
          "name": "invalid",
          "type": "boolean",
          "mutable": false,
          "attr": "invalid",
          "reflectToAttr": true,
          "docs": "Set to true to indicate this field is invalid. Will display the invalid text.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "false",
          "description": "Set to true to indicate this field is invalid. Will display the invalid text."
        },
        {
          "name": "invalid-text",
          "type": "string",
          "mutable": false,
          "attr": "invalid-text",
          "reflectToAttr": false,
          "docs": "The radio group's invalid text. Alternatively, you can use the invalid-text slot.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "''",
          "description": "The radio group's invalid text. Alternatively, you can use the invalid-text slot."
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "The name of the control, which is submitted with the form data.",
          "docsTags": [],
          "default": "this.inputId",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "this.inputId",
          "description": "The name of the control, which is submitted with the form data."
        },
        {
          "name": "value",
          "type": "string",
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The checkbox's value attribute.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "The checkbox's value attribute."
        }
      ],
      "methods": [
        {
          "name": "removeFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "removeFocus() => Promise<void>",
          "parameters": [],
          "docs": "Removes focus from the checkbox.",
          "docsTags": []
        },
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setFocus(options?: FocusOptions) => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the checkbox.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "stories-blur",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the control loses focus.",
          "docsTags": [],
          "name": "stories-blur",
          "description": "Emitted when the control loses focus.",
          "type": "void"
        },
        {
          "event": "stories-change",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the control's checked state changes.",
          "docsTags": [],
          "name": "stories-change",
          "description": "Emitted when the control's checked state changes.",
          "type": "void"
        },
        {
          "event": "stories-focus",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the control gains focus.",
          "docsTags": [],
          "name": "stories-focus",
          "description": "Emitted when the control gains focus.",
          "type": "void"
        }
      ],
      "cssProperties": [
        {
          "name": "--control-background-color",
          "annotation": "prop",
          "docs": "Background color of the control",
          "description": "Background color of the control"
        },
        {
          "name": "--control-background-color-checked",
          "annotation": "prop",
          "docs": "Background color of the control when checked",
          "description": "Background color of the control when checked"
        },
        {
          "name": "--control-background-color-checked-focus",
          "annotation": "prop",
          "docs": "Background color of the control when checked on focus",
          "description": "Background color of the control when checked on focus"
        },
        {
          "name": "--control-background-color-checked-hover",
          "annotation": "prop",
          "docs": "Background color of the control when checked on hover",
          "description": "Background color of the control when checked on hover"
        },
        {
          "name": "--control-background-color-hover",
          "annotation": "prop",
          "docs": "Background color of the control on hover",
          "description": "Background color of the control on hover"
        },
        {
          "name": "--control-border-color",
          "annotation": "prop",
          "docs": "Border color of the control",
          "description": "Border color of the control"
        },
        {
          "name": "--control-border-color-checked",
          "annotation": "prop",
          "docs": "Border color of the control when checked",
          "description": "Border color of the control when checked"
        },
        {
          "name": "--control-border-color-checked-focus",
          "annotation": "prop",
          "docs": "Border color of the control when checked on focus",
          "description": "Border color of the control when checked on focus"
        },
        {
          "name": "--control-border-color-checked-hover",
          "annotation": "prop",
          "docs": "Border color of the control when checked on hover",
          "description": "Border color of the control when checked on hover"
        },
        {
          "name": "--control-border-color-hover",
          "annotation": "prop",
          "docs": "Border color of the control on hover",
          "description": "Border color of the control on hover"
        },
        {
          "name": "--control-color-checked",
          "annotation": "prop",
          "docs": "Color of the control when checked (the checkmark icon)",
          "description": "Color of the control when checked (the checkmark icon)"
        },
        {
          "name": "--control-size",
          "annotation": "prop",
          "docs": "Size of the control",
          "description": "Size of the control"
        },
        {
          "name": "--focus-ring",
          "annotation": "prop",
          "docs": "The focus ring style to use when the checkbox receives focus, a `box-shadow` property.",
          "description": "The focus ring style to use when the checkbox receives focus, a `box-shadow` property."
        },
        {
          "name": "--label-color",
          "annotation": "prop",
          "docs": "Color of the label",
          "description": "Color of the label"
        }
      ],
      "slots": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/col/col.tsx",
      "encapsulation": "shadow",
      "tag": "stories-col",
      "name": "stories-col",
      "readme": "# stories-col\n\nThe stories-col is a container for content within a grid. You put it inside of a row and it always expand to fill the space of a row.\n",
      "description": "The stories-col is a container for content within a grid. You put it inside of a row and it always expand to fill the space of a row.",
      "docsTags": [],
      "usage": {},
      "properties": [
        {
          "name": "offset",
          "type": "string",
          "mutable": false,
          "attr": "offset",
          "reflectToAttr": false,
          "docs": "The amount to offset the column, in terms of how many columns it should shift to the end\nof the total available.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "description": "The amount to offset the column, in terms of how many columns it should shift to the end\nof the total available."
        },
        {
          "name": "offsetLg",
          "type": "string",
          "mutable": false,
          "attr": "offset-lg",
          "reflectToAttr": false,
          "docs": "The amount to offset the column for lg screens, in terms of how many columns it should shift\nto the end of the total available.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "description": "The amount to offset the column for lg screens, in terms of how many columns it should shift\nto the end of the total available."
        },
        {
          "name": "offsetMd",
          "type": "string",
          "mutable": false,
          "attr": "offset-md",
          "reflectToAttr": false,
          "docs": "The amount to offset the column for md screens, in terms of how many columns it should shift\nto the end of the total available.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "description": "The amount to offset the column for md screens, in terms of how many columns it should shift\nto the end of the total available."
        },
        {
          "name": "offsetSm",
          "type": "string",
          "mutable": false,
          "attr": "offset-sm",
          "reflectToAttr": false,
          "docs": "The amount to offset the column for sm screens, in terms of how many columns it should shift\nto the end of the total available.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "description": "The amount to offset the column for sm screens, in terms of how many columns it should shift\nto the end of the total available."
        },
        {
          "name": "offsetXl",
          "type": "string",
          "mutable": false,
          "attr": "offset-xl",
          "reflectToAttr": false,
          "docs": "The amount to offset the column for xl screens, in terms of how many columns it should shift\nto the end of the total available.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "description": "The amount to offset the column for xl screens, in terms of how many columns it should shift\nto the end of the total available."
        },
        {
          "name": "offsetXs",
          "type": "string",
          "mutable": false,
          "attr": "offset-xs",
          "reflectToAttr": false,
          "docs": "The amount to offset the column for xs screens, in terms of how many columns it should shift\nto the end of the total available.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "description": "The amount to offset the column for xs screens, in terms of how many columns it should shift\nto the end of the total available."
        },
        {
          "name": "pull",
          "type": "string",
          "mutable": false,
          "attr": "pull",
          "reflectToAttr": false,
          "docs": "The amount to pull the column, in terms of how many columns it should shift to the start of\nthe total available.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "description": "The amount to pull the column, in terms of how many columns it should shift to the start of\nthe total available."
        },
        {
          "name": "pullLg",
          "type": "string",
          "mutable": false,
          "attr": "pull-lg",
          "reflectToAttr": false,
          "docs": "The amount to pull the column for lg screens, in terms of how many columns it should shift\nto the start of the total available.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "description": "The amount to pull the column for lg screens, in terms of how many columns it should shift\nto the start of the total available."
        },
        {
          "name": "pullMd",
          "type": "string",
          "mutable": false,
          "attr": "pull-md",
          "reflectToAttr": false,
          "docs": "The amount to pull the column for md screens, in terms of how many columns it should shift\nto the start of the total available.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "description": "The amount to pull the column for md screens, in terms of how many columns it should shift\nto the start of the total available."
        },
        {
          "name": "pullSm",
          "type": "string",
          "mutable": false,
          "attr": "pull-sm",
          "reflectToAttr": false,
          "docs": "The amount to pull the column for sm screens, in terms of how many columns it should shift\nto the start of the total available.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "description": "The amount to pull the column for sm screens, in terms of how many columns it should shift\nto the start of the total available."
        },
        {
          "name": "pullXl",
          "type": "string",
          "mutable": false,
          "attr": "pull-xl",
          "reflectToAttr": false,
          "docs": "The amount to pull the column for xl screens, in terms of how many columns it should shift\nto the start of the total available.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "description": "The amount to pull the column for xl screens, in terms of how many columns it should shift\nto the start of the total available."
        },
        {
          "name": "pullXs",
          "type": "string",
          "mutable": false,
          "attr": "pull-xs",
          "reflectToAttr": false,
          "docs": "The amount to pull the column for xs screens, in terms of how many columns it should shift\nto the start of the total available.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "description": "The amount to pull the column for xs screens, in terms of how many columns it should shift\nto the start of the total available."
        },
        {
          "name": "push",
          "type": "string",
          "mutable": false,
          "attr": "push",
          "reflectToAttr": false,
          "docs": "The amount to push the column, in terms of how many columns it should shift to the end\nof the total available.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "description": "The amount to push the column, in terms of how many columns it should shift to the end\nof the total available."
        },
        {
          "name": "pushLg",
          "type": "string",
          "mutable": false,
          "attr": "push-lg",
          "reflectToAttr": false,
          "docs": "The amount to push the column for lg screens, in terms of how many columns it should shift\nto the end of the total available.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "description": "The amount to push the column for lg screens, in terms of how many columns it should shift\nto the end of the total available."
        },
        {
          "name": "pushMd",
          "type": "string",
          "mutable": false,
          "attr": "push-md",
          "reflectToAttr": false,
          "docs": "The amount to push the column for md screens, in terms of how many columns it should shift\nto the end of the total available.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "description": "The amount to push the column for md screens, in terms of how many columns it should shift\nto the end of the total available."
        },
        {
          "name": "pushSm",
          "type": "string",
          "mutable": false,
          "attr": "push-sm",
          "reflectToAttr": false,
          "docs": "The amount to push the column for sm screens, in terms of how many columns it should shift\nto the end of the total available.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "description": "The amount to push the column for sm screens, in terms of how many columns it should shift\nto the end of the total available."
        },
        {
          "name": "pushXl",
          "type": "string",
          "mutable": false,
          "attr": "push-xl",
          "reflectToAttr": false,
          "docs": "The amount to push the column for xl screens, in terms of how many columns it should shift\nto the end of the total available.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "description": "The amount to push the column for xl screens, in terms of how many columns it should shift\nto the end of the total available."
        },
        {
          "name": "pushXs",
          "type": "string",
          "mutable": false,
          "attr": "push-xs",
          "reflectToAttr": false,
          "docs": "The amount to push the column for xs screens, in terms of how many columns it should shift\nto the end of the total available.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "description": "The amount to push the column for xs screens, in terms of how many columns it should shift\nto the end of the total available."
        },
        {
          "name": "size",
          "type": "string",
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "The size of the column, in terms of how many columns it should take up out of the total\navailable. If `\"auto\"` is passed, the column will be the size of its content.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "description": "The size of the column, in terms of how many columns it should take up out of the total\navailable. If `\"auto\"` is passed, the column will be the size of its content."
        },
        {
          "name": "sizeLg",
          "type": "string",
          "mutable": false,
          "attr": "size-lg",
          "reflectToAttr": false,
          "docs": "The size of the column for lg screens, in terms of how many columns it should take up out\nof the total available. If `\"auto\"` is passed, the column will be the size of its content.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "description": "The size of the column for lg screens, in terms of how many columns it should take up out\nof the total available. If `\"auto\"` is passed, the column will be the size of its content."
        },
        {
          "name": "sizeMd",
          "type": "string",
          "mutable": false,
          "attr": "size-md",
          "reflectToAttr": false,
          "docs": "The size of the column for md screens, in terms of how many columns it should take up out\nof the total available. If `\"auto\"` is passed, the column will be the size of its content.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "description": "The size of the column for md screens, in terms of how many columns it should take up out\nof the total available. If `\"auto\"` is passed, the column will be the size of its content."
        },
        {
          "name": "sizeSm",
          "type": "string",
          "mutable": false,
          "attr": "size-sm",
          "reflectToAttr": false,
          "docs": "The size of the column for sm screens, in terms of how many columns it should take up out\nof the total available. If `\"auto\"` is passed, the column will be the size of its content.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "description": "The size of the column for sm screens, in terms of how many columns it should take up out\nof the total available. If `\"auto\"` is passed, the column will be the size of its content."
        },
        {
          "name": "sizeXl",
          "type": "string",
          "mutable": false,
          "attr": "size-xl",
          "reflectToAttr": false,
          "docs": "The size of the column for xl screens, in terms of how many columns it should take up out\nof the total available. If `\"auto\"` is passed, the column will be the size of its content.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "description": "The size of the column for xl screens, in terms of how many columns it should take up out\nof the total available. If `\"auto\"` is passed, the column will be the size of its content."
        },
        {
          "name": "sizeXs",
          "type": "string",
          "mutable": false,
          "attr": "size-xs",
          "reflectToAttr": false,
          "docs": "The size of the column for xs screens, in terms of how many columns it should take up out\nof the total available. If `\"auto\"` is passed, the column will be the size of its content.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "description": "The size of the column for xs screens, in terms of how many columns it should take up out\nof the total available. If `\"auto\"` is passed, the column will be the size of its content."
        }
      ],
      "attributes": [
        {
          "name": "offset",
          "type": "string",
          "mutable": false,
          "attr": "offset",
          "reflectToAttr": false,
          "docs": "The amount to offset the column, in terms of how many columns it should shift to the end\nof the total available.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "description": "The amount to offset the column, in terms of how many columns it should shift to the end\nof the total available."
        },
        {
          "name": "offset-lg",
          "type": "string",
          "mutable": false,
          "attr": "offset-lg",
          "reflectToAttr": false,
          "docs": "The amount to offset the column for lg screens, in terms of how many columns it should shift\nto the end of the total available.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "description": "The amount to offset the column for lg screens, in terms of how many columns it should shift\nto the end of the total available."
        },
        {
          "name": "offset-md",
          "type": "string",
          "mutable": false,
          "attr": "offset-md",
          "reflectToAttr": false,
          "docs": "The amount to offset the column for md screens, in terms of how many columns it should shift\nto the end of the total available.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "description": "The amount to offset the column for md screens, in terms of how many columns it should shift\nto the end of the total available."
        },
        {
          "name": "offset-sm",
          "type": "string",
          "mutable": false,
          "attr": "offset-sm",
          "reflectToAttr": false,
          "docs": "The amount to offset the column for sm screens, in terms of how many columns it should shift\nto the end of the total available.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "description": "The amount to offset the column for sm screens, in terms of how many columns it should shift\nto the end of the total available."
        },
        {
          "name": "offset-xl",
          "type": "string",
          "mutable": false,
          "attr": "offset-xl",
          "reflectToAttr": false,
          "docs": "The amount to offset the column for xl screens, in terms of how many columns it should shift\nto the end of the total available.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "description": "The amount to offset the column for xl screens, in terms of how many columns it should shift\nto the end of the total available."
        },
        {
          "name": "offset-xs",
          "type": "string",
          "mutable": false,
          "attr": "offset-xs",
          "reflectToAttr": false,
          "docs": "The amount to offset the column for xs screens, in terms of how many columns it should shift\nto the end of the total available.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "description": "The amount to offset the column for xs screens, in terms of how many columns it should shift\nto the end of the total available."
        },
        {
          "name": "pull",
          "type": "string",
          "mutable": false,
          "attr": "pull",
          "reflectToAttr": false,
          "docs": "The amount to pull the column, in terms of how many columns it should shift to the start of\nthe total available.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "description": "The amount to pull the column, in terms of how many columns it should shift to the start of\nthe total available."
        },
        {
          "name": "pull-lg",
          "type": "string",
          "mutable": false,
          "attr": "pull-lg",
          "reflectToAttr": false,
          "docs": "The amount to pull the column for lg screens, in terms of how many columns it should shift\nto the start of the total available.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "description": "The amount to pull the column for lg screens, in terms of how many columns it should shift\nto the start of the total available."
        },
        {
          "name": "pull-md",
          "type": "string",
          "mutable": false,
          "attr": "pull-md",
          "reflectToAttr": false,
          "docs": "The amount to pull the column for md screens, in terms of how many columns it should shift\nto the start of the total available.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "description": "The amount to pull the column for md screens, in terms of how many columns it should shift\nto the start of the total available."
        },
        {
          "name": "pull-sm",
          "type": "string",
          "mutable": false,
          "attr": "pull-sm",
          "reflectToAttr": false,
          "docs": "The amount to pull the column for sm screens, in terms of how many columns it should shift\nto the start of the total available.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "description": "The amount to pull the column for sm screens, in terms of how many columns it should shift\nto the start of the total available."
        },
        {
          "name": "pull-xl",
          "type": "string",
          "mutable": false,
          "attr": "pull-xl",
          "reflectToAttr": false,
          "docs": "The amount to pull the column for xl screens, in terms of how many columns it should shift\nto the start of the total available.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "description": "The amount to pull the column for xl screens, in terms of how many columns it should shift\nto the start of the total available."
        },
        {
          "name": "pull-xs",
          "type": "string",
          "mutable": false,
          "attr": "pull-xs",
          "reflectToAttr": false,
          "docs": "The amount to pull the column for xs screens, in terms of how many columns it should shift\nto the start of the total available.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "description": "The amount to pull the column for xs screens, in terms of how many columns it should shift\nto the start of the total available."
        },
        {
          "name": "push",
          "type": "string",
          "mutable": false,
          "attr": "push",
          "reflectToAttr": false,
          "docs": "The amount to push the column, in terms of how many columns it should shift to the end\nof the total available.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "description": "The amount to push the column, in terms of how many columns it should shift to the end\nof the total available."
        },
        {
          "name": "push-lg",
          "type": "string",
          "mutable": false,
          "attr": "push-lg",
          "reflectToAttr": false,
          "docs": "The amount to push the column for lg screens, in terms of how many columns it should shift\nto the end of the total available.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "description": "The amount to push the column for lg screens, in terms of how many columns it should shift\nto the end of the total available."
        },
        {
          "name": "push-md",
          "type": "string",
          "mutable": false,
          "attr": "push-md",
          "reflectToAttr": false,
          "docs": "The amount to push the column for md screens, in terms of how many columns it should shift\nto the end of the total available.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "description": "The amount to push the column for md screens, in terms of how many columns it should shift\nto the end of the total available."
        },
        {
          "name": "push-sm",
          "type": "string",
          "mutable": false,
          "attr": "push-sm",
          "reflectToAttr": false,
          "docs": "The amount to push the column for sm screens, in terms of how many columns it should shift\nto the end of the total available.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "description": "The amount to push the column for sm screens, in terms of how many columns it should shift\nto the end of the total available."
        },
        {
          "name": "push-xl",
          "type": "string",
          "mutable": false,
          "attr": "push-xl",
          "reflectToAttr": false,
          "docs": "The amount to push the column for xl screens, in terms of how many columns it should shift\nto the end of the total available.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "description": "The amount to push the column for xl screens, in terms of how many columns it should shift\nto the end of the total available."
        },
        {
          "name": "push-xs",
          "type": "string",
          "mutable": false,
          "attr": "push-xs",
          "reflectToAttr": false,
          "docs": "The amount to push the column for xs screens, in terms of how many columns it should shift\nto the end of the total available.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "description": "The amount to push the column for xs screens, in terms of how many columns it should shift\nto the end of the total available."
        },
        {
          "name": "size",
          "type": "string",
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "The size of the column, in terms of how many columns it should take up out of the total\navailable. If `\"auto\"` is passed, the column will be the size of its content.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "description": "The size of the column, in terms of how many columns it should take up out of the total\navailable. If `\"auto\"` is passed, the column will be the size of its content."
        },
        {
          "name": "size-lg",
          "type": "string",
          "mutable": false,
          "attr": "size-lg",
          "reflectToAttr": false,
          "docs": "The size of the column for lg screens, in terms of how many columns it should take up out\nof the total available. If `\"auto\"` is passed, the column will be the size of its content.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "description": "The size of the column for lg screens, in terms of how many columns it should take up out\nof the total available. If `\"auto\"` is passed, the column will be the size of its content."
        },
        {
          "name": "size-md",
          "type": "string",
          "mutable": false,
          "attr": "size-md",
          "reflectToAttr": false,
          "docs": "The size of the column for md screens, in terms of how many columns it should take up out\nof the total available. If `\"auto\"` is passed, the column will be the size of its content.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "description": "The size of the column for md screens, in terms of how many columns it should take up out\nof the total available. If `\"auto\"` is passed, the column will be the size of its content."
        },
        {
          "name": "size-sm",
          "type": "string",
          "mutable": false,
          "attr": "size-sm",
          "reflectToAttr": false,
          "docs": "The size of the column for sm screens, in terms of how many columns it should take up out\nof the total available. If `\"auto\"` is passed, the column will be the size of its content.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "description": "The size of the column for sm screens, in terms of how many columns it should take up out\nof the total available. If `\"auto\"` is passed, the column will be the size of its content."
        },
        {
          "name": "size-xl",
          "type": "string",
          "mutable": false,
          "attr": "size-xl",
          "reflectToAttr": false,
          "docs": "The size of the column for xl screens, in terms of how many columns it should take up out\nof the total available. If `\"auto\"` is passed, the column will be the size of its content.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "description": "The size of the column for xl screens, in terms of how many columns it should take up out\nof the total available. If `\"auto\"` is passed, the column will be the size of its content."
        },
        {
          "name": "size-xs",
          "type": "string",
          "mutable": false,
          "attr": "size-xs",
          "reflectToAttr": false,
          "docs": "The size of the column for xs screens, in terms of how many columns it should take up out\nof the total available. If `\"auto\"` is passed, the column will be the size of its content.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "description": "The size of the column for xs screens, in terms of how many columns it should take up out\nof the total available. If `\"auto\"` is passed, the column will be the size of its content."
        }
      ],
      "methods": [],
      "events": [],
      "cssProperties": [
        {
          "name": "--stories-grid-column-padding",
          "annotation": "prop",
          "docs": "Padding for the Column",
          "description": "Padding for the Column"
        },
        {
          "name": "--stories-grid-column-padding-lg",
          "annotation": "prop",
          "docs": "Padding for the Column on lg screens and up",
          "description": "Padding for the Column on lg screens and up"
        },
        {
          "name": "--stories-grid-column-padding-md",
          "annotation": "prop",
          "docs": "Padding for the Column on md screens and up",
          "description": "Padding for the Column on md screens and up"
        },
        {
          "name": "--stories-grid-column-padding-sm",
          "annotation": "prop",
          "docs": "Padding for the Column on sm screens and up",
          "description": "Padding for the Column on sm screens and up"
        },
        {
          "name": "--stories-grid-column-padding-xl",
          "annotation": "prop",
          "docs": "Padding for the Column on xl screens and up",
          "description": "Padding for the Column on xl screens and up"
        },
        {
          "name": "--stories-grid-column-padding-xs",
          "annotation": "prop",
          "docs": "Padding for the Column on xs screens and up",
          "description": "Padding for the Column on xs screens and up"
        },
        {
          "name": "--stories-grid-columns",
          "annotation": "prop",
          "docs": "The number of total Columns in the Grid",
          "description": "The number of total Columns in the Grid"
        }
      ],
      "slots": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/dropdown/dropdown.tsx",
      "encapsulation": "shadow",
      "tag": "stories-dropdown",
      "name": "stories-dropdown",
      "readme": "# gr-dropdown\n",
      "description": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "- The dropdown's content."
        },
        {
          "name": "slot",
          "text": "trigger - The dropdown's trigger, usually a `<stories-button>` element."
        }
      ],
      "usage": {},
      "properties": [
        {
          "name": "closeOnSelect",
          "type": "boolean",
          "mutable": false,
          "attr": "close-on-select",
          "reflectToAttr": false,
          "docs": "Determines whether the dropdown should hide when a menu item is selected.",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Determines whether the dropdown should hide when a menu item is selected."
        },
        {
          "name": "containingElement",
          "type": "HTMLElement",
          "mutable": true,
          "reflectToAttr": false,
          "docs": "The dropdown will close when the user interacts outside of this element (e.g. clicking).",
          "docsTags": [],
          "values": [
            {
              "type": "HTMLElement"
            }
          ],
          "optional": false,
          "required": false,
          "description": "The dropdown will close when the user interacts outside of this element (e.g. clicking)."
        },
        {
          "name": "distance",
          "type": "number",
          "mutable": false,
          "attr": "distance",
          "reflectToAttr": false,
          "docs": "The distance in pixels from which to offset the panel away from its trigger.",
          "docsTags": [],
          "default": "2",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false,
          "description": "The distance in pixels from which to offset the panel away from its trigger."
        },
        {
          "name": "hoist",
          "type": "boolean",
          "mutable": false,
          "attr": "hoist",
          "reflectToAttr": false,
          "docs": "Enable this option to prevent the panel from being clipped when the component is placed inside a container with\n`overflow: auto|scroll`.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Enable this option to prevent the panel from being clipped when the component is placed inside a container with\n`overflow: auto|scroll`."
        },
        {
          "name": "open",
          "type": "boolean",
          "mutable": true,
          "attr": "open",
          "reflectToAttr": true,
          "docs": "Indicates whether or not the dropdown is open. You can use this in lieu of the show/hide methods.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Indicates whether or not the dropdown is open. You can use this in lieu of the show/hide methods."
        },
        {
          "name": "placement",
          "type": "\"bottom\" | \"bottom-end\" | \"bottom-start\" | \"left\" | \"left-end\" | \"left-start\" | \"right\" | \"right-end\" | \"right-start\" | \"top\" | \"top-end\" | \"top-start\"",
          "mutable": false,
          "attr": "placement",
          "reflectToAttr": false,
          "docs": "The preferred placement of the dropdown panel. Note that the actual placement may vary as needed to keep the panel\ninside of the viewport.",
          "docsTags": [],
          "default": "'bottom-start'",
          "values": [
            {
              "value": "bottom",
              "type": "string"
            },
            {
              "value": "bottom-end",
              "type": "string"
            },
            {
              "value": "bottom-start",
              "type": "string"
            },
            {
              "value": "left",
              "type": "string"
            },
            {
              "value": "left-end",
              "type": "string"
            },
            {
              "value": "left-start",
              "type": "string"
            },
            {
              "value": "right",
              "type": "string"
            },
            {
              "value": "right-end",
              "type": "string"
            },
            {
              "value": "right-start",
              "type": "string"
            },
            {
              "value": "top",
              "type": "string"
            },
            {
              "value": "top-end",
              "type": "string"
            },
            {
              "value": "top-start",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "The preferred placement of the dropdown panel. Note that the actual placement may vary as needed to keep the panel\ninside of the viewport."
        },
        {
          "name": "skidding",
          "type": "number",
          "mutable": false,
          "attr": "skidding",
          "reflectToAttr": false,
          "docs": "The distance in pixels from which to offset the panel along its trigger.",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false,
          "description": "The distance in pixels from which to offset the panel along its trigger."
        }
      ],
      "attributes": [
        {
          "name": "close-on-select",
          "type": "boolean",
          "mutable": false,
          "attr": "close-on-select",
          "reflectToAttr": false,
          "docs": "Determines whether the dropdown should hide when a menu item is selected.",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "true",
          "description": "Determines whether the dropdown should hide when a menu item is selected."
        },
        {
          "type": "HTMLElement",
          "mutable": true,
          "reflectToAttr": false,
          "docs": "The dropdown will close when the user interacts outside of this element (e.g. clicking).",
          "docsTags": [],
          "values": [
            {
              "type": "HTMLElement"
            }
          ],
          "optional": false,
          "required": false,
          "description": "The dropdown will close when the user interacts outside of this element (e.g. clicking)."
        },
        {
          "name": "distance",
          "type": "number",
          "mutable": false,
          "attr": "distance",
          "reflectToAttr": false,
          "docs": "The distance in pixels from which to offset the panel away from its trigger.",
          "docsTags": [],
          "default": "2",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "2",
          "description": "The distance in pixels from which to offset the panel away from its trigger."
        },
        {
          "name": "hoist",
          "type": "boolean",
          "mutable": false,
          "attr": "hoist",
          "reflectToAttr": false,
          "docs": "Enable this option to prevent the panel from being clipped when the component is placed inside a container with\n`overflow: auto|scroll`.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "false",
          "description": "Enable this option to prevent the panel from being clipped when the component is placed inside a container with\n`overflow: auto|scroll`."
        },
        {
          "name": "open",
          "type": "boolean",
          "mutable": true,
          "attr": "open",
          "reflectToAttr": true,
          "docs": "Indicates whether or not the dropdown is open. You can use this in lieu of the show/hide methods.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "false",
          "description": "Indicates whether or not the dropdown is open. You can use this in lieu of the show/hide methods."
        },
        {
          "name": "placement",
          "type": "\"bottom\" | \"bottom-end\" | \"bottom-start\" | \"left\" | \"left-end\" | \"left-start\" | \"right\" | \"right-end\" | \"right-start\" | \"top\" | \"top-end\" | \"top-start\"",
          "mutable": false,
          "attr": "placement",
          "reflectToAttr": false,
          "docs": "The preferred placement of the dropdown panel. Note that the actual placement may vary as needed to keep the panel\ninside of the viewport.",
          "docsTags": [],
          "default": "'bottom-start'",
          "values": [
            {
              "value": "bottom",
              "type": "string"
            },
            {
              "value": "bottom-end",
              "type": "string"
            },
            {
              "value": "bottom-start",
              "type": "string"
            },
            {
              "value": "left",
              "type": "string"
            },
            {
              "value": "left-end",
              "type": "string"
            },
            {
              "value": "left-start",
              "type": "string"
            },
            {
              "value": "right",
              "type": "string"
            },
            {
              "value": "right-end",
              "type": "string"
            },
            {
              "value": "right-start",
              "type": "string"
            },
            {
              "value": "top",
              "type": "string"
            },
            {
              "value": "top-end",
              "type": "string"
            },
            {
              "value": "top-start",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "'bottom-start'",
          "description": "The preferred placement of the dropdown panel. Note that the actual placement may vary as needed to keep the panel\ninside of the viewport."
        },
        {
          "name": "skidding",
          "type": "number",
          "mutable": false,
          "attr": "skidding",
          "reflectToAttr": false,
          "docs": "The distance in pixels from which to offset the panel along its trigger.",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "0",
          "description": "The distance in pixels from which to offset the panel along its trigger."
        }
      ],
      "methods": [
        {
          "name": "focusOnTrigger",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "focusOnTrigger() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the trigger.",
          "docsTags": []
        },
        {
          "name": "hide",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "hide() => Promise<void>",
          "parameters": [],
          "docs": "Hides the dropdown panel",
          "docsTags": []
        },
        {
          "name": "show",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "show() => Promise<void>",
          "parameters": [],
          "docs": "Shows the dropdown panel",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "stories-after-hide",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted after the dropdown closes and all transitions are complete.",
          "docsTags": [],
          "name": "stories-after-hide",
          "description": "Emitted after the dropdown closes and all transitions are complete.",
          "type": "void"
        },
        {
          "event": "stories-after-show",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted after the dropdown opens and all transitions are complete.",
          "docsTags": [],
          "name": "stories-after-show",
          "description": "Emitted after the dropdown opens and all transitions are complete.",
          "type": "void"
        },
        {
          "event": "stories-hide",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the dropdown closes. Calling `event.preventDefault()` will prevent it from being closed.",
          "docsTags": [],
          "name": "stories-hide",
          "description": "Emitted when the dropdown closes. Calling `event.preventDefault()` will prevent it from being closed.",
          "type": "void"
        },
        {
          "event": "stories-show",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the dropdown opens. Calling `event.preventDefault()` will prevent it from being opened.",
          "docsTags": [],
          "name": "stories-show",
          "description": "Emitted when the dropdown opens. Calling `event.preventDefault()` will prevent it from being opened.",
          "type": "void"
        }
      ],
      "cssProperties": [
        {
          "name": "--panel-background-color",
          "annotation": "prop",
          "docs": "Background color of the dropdown panel",
          "description": "Background color of the dropdown panel"
        },
        {
          "name": "--panel-border-color",
          "annotation": "prop",
          "docs": "Border color of the button",
          "description": "Border color of the button"
        },
        {
          "name": "--panel-border-radius",
          "annotation": "prop",
          "docs": "Border radius of the dropdown panel",
          "description": "Border radius of the dropdown panel"
        },
        {
          "name": "--panel-box-shadow",
          "annotation": "prop",
          "docs": "Box shadow of the dropdown panel",
          "description": "Box shadow of the dropdown panel"
        },
        {
          "name": "--transition",
          "annotation": "prop",
          "docs": "Transition of the dropdown",
          "description": "Transition of the dropdown"
        }
      ],
      "slots": [
        {
          "name": "",
          "docs": "The dropdown's content."
        },
        {
          "name": "trigger",
          "docs": "The dropdown's trigger, usually a `<stories-button>` element."
        }
      ],
      "dependents": [
        "stories-select"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "stories-select": [
          "stories-dropdown"
        ]
      }
    },
    {
      "filePath": "./src/components/footer/footer.tsx",
      "encapsulation": "shadow",
      "tag": "stories-footer",
      "name": "stories-footer",
      "readme": "# stories-footer\n\nThe stories-footer is a root component, always appears at the bottom of the page.\n",
      "description": "The stories-footer is a root component, always appears at the bottom of the page.",
      "docsTags": [],
      "usage": {},
      "properties": [],
      "attributes": [],
      "methods": [],
      "events": [],
      "cssProperties": [],
      "slots": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/grid/grid.tsx",
      "encapsulation": "shadow",
      "tag": "stories-grid",
      "name": "stories-grid",
      "readme": "# stories-grid\n\nThe stories-grid is a container designed on mobile-first flexbox system for building custom layouts. A layout based on a 12 columns by default, but could be easily customized to any number via CSS customization. Columns will expand to fill the row, and will resize to fit additional columns.\n",
      "description": "The stories-grid is a container designed on mobile-first flexbox system for building custom layouts. A layout based on a 12 columns by default, but could be easily customized to any number via CSS customization. Columns will expand to fill the row, and will resize to fit additional columns.",
      "docsTags": [],
      "usage": {},
      "properties": [
        {
          "name": "fixed",
          "type": "boolean",
          "mutable": false,
          "attr": "fixed",
          "reflectToAttr": false,
          "docs": "If `true`, the grid will have a fixed width based on the screen size.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "description": "If `true`, the grid will have a fixed width based on the screen size."
        }
      ],
      "attributes": [
        {
          "name": "fixed",
          "type": "boolean",
          "mutable": false,
          "attr": "fixed",
          "reflectToAttr": false,
          "docs": "If `true`, the grid will have a fixed width based on the screen size.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "false",
          "description": "If `true`, the grid will have a fixed width based on the screen size."
        }
      ],
      "methods": [],
      "events": [],
      "cssProperties": [
        {
          "name": "--stories-grid-padding",
          "annotation": "prop",
          "docs": "Padding for the Grid",
          "description": "Padding for the Grid"
        },
        {
          "name": "--stories-grid-padding-lg",
          "annotation": "prop",
          "docs": "Padding for the Grid on lg screens",
          "description": "Padding for the Grid on lg screens"
        },
        {
          "name": "--stories-grid-padding-md",
          "annotation": "prop",
          "docs": "Padding for the Grid on md screens",
          "description": "Padding for the Grid on md screens"
        },
        {
          "name": "--stories-grid-padding-sm",
          "annotation": "prop",
          "docs": "Padding for the Grid on sm screens",
          "description": "Padding for the Grid on sm screens"
        },
        {
          "name": "--stories-grid-padding-xl",
          "annotation": "prop",
          "docs": "Padding for the Grid on xl screens",
          "description": "Padding for the Grid on xl screens"
        },
        {
          "name": "--stories-grid-padding-xs",
          "annotation": "prop",
          "docs": "Padding for the Grid on xs screens",
          "description": "Padding for the Grid on xs screens"
        },
        {
          "name": "--stories-grid-width",
          "annotation": "prop",
          "docs": "Width of the fixed Grid",
          "description": "Width of the fixed Grid"
        },
        {
          "name": "--stories-grid-width-lg",
          "annotation": "prop",
          "docs": "Width of the fixed Grid on lg screens",
          "description": "Width of the fixed Grid on lg screens"
        },
        {
          "name": "--stories-grid-width-md",
          "annotation": "prop",
          "docs": "Width of the fixed Grid on md screens",
          "description": "Width of the fixed Grid on md screens"
        },
        {
          "name": "--stories-grid-width-sm",
          "annotation": "prop",
          "docs": "Width of the fixed Grid on sm screens",
          "description": "Width of the fixed Grid on sm screens"
        },
        {
          "name": "--stories-grid-width-xl",
          "annotation": "prop",
          "docs": "Width of the fixed Grid on xl screens",
          "description": "Width of the fixed Grid on xl screens"
        },
        {
          "name": "--stories-grid-width-xs",
          "annotation": "prop",
          "docs": "Width of the fixed Grid on xs screens",
          "description": "Width of the fixed Grid on xs screens"
        }
      ],
      "slots": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/group/group.tsx",
      "encapsulation": "shadow",
      "tag": "stories-group",
      "name": "stories-group",
      "readme": "# gr-field-group\n\n\n",
      "description": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "- The default slot where fields are placed."
        },
        {
          "name": "slot",
          "text": "label - The field group label. Recommended for proper accessibility. Alternatively, you can use the label prop."
        }
      ],
      "usage": {},
      "properties": [
        {
          "name": "horizontal",
          "type": "boolean",
          "mutable": false,
          "attr": "horizontal",
          "reflectToAttr": true,
          "docs": "Render the fields horizontal instead of vertical",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Render the fields horizontal instead of vertical"
        },
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "The field group label. Recommended for proper accessibility. Alternatively, you can use the label slot.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "The field group label. Recommended for proper accessibility. Alternatively, you can use the label slot."
        }
      ],
      "attributes": [
        {
          "name": "horizontal",
          "type": "boolean",
          "mutable": false,
          "attr": "horizontal",
          "reflectToAttr": true,
          "docs": "Render the fields horizontal instead of vertical",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "false",
          "description": "Render the fields horizontal instead of vertical"
        },
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "The field group label. Recommended for proper accessibility. Alternatively, you can use the label slot.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "''",
          "description": "The field group label. Recommended for proper accessibility. Alternatively, you can use the label slot."
        }
      ],
      "methods": [],
      "events": [],
      "cssProperties": [
        {
          "name": "--align-fields",
          "annotation": "prop",
          "docs": "Alignment of fields on cross-axis, an `align-items` Flexbox property",
          "description": "Alignment of fields on cross-axis, an `align-items` Flexbox property"
        },
        {
          "name": "--margin-between-fields",
          "annotation": "prop",
          "docs": "Margin between the children",
          "description": "Margin between the children"
        },
        {
          "name": "--margin-between-fields-horizontal",
          "annotation": "prop",
          "docs": "Margin between the children when layout is horizontal",
          "description": "Margin between the children when layout is horizontal"
        }
      ],
      "slots": [
        {
          "name": "",
          "docs": "The default slot where fields are placed."
        },
        {
          "name": "label",
          "docs": "The field group label. Recommended for proper accessibility. Alternatively, you can use the label prop."
        }
      ],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/icon/icon.tsx",
      "encapsulation": "shadow",
      "tag": "stories-icon",
      "name": "stories-icon",
      "readme": "# stories-icon\n\nThe stories-icon is an easy and performant way to use icons in your Stories application. It dynamically loads only visible SVG icons on demand.\n",
      "description": "The stories-icon is an easy and performant way to use icons in your Stories application. It dynamically loads only visible SVG icons on demand.",
      "docsTags": [],
      "usage": {},
      "properties": [
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Icon name",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Icon name"
        }
      ],
      "attributes": [
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Icon name",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Icon name"
        }
      ],
      "methods": [],
      "events": [],
      "cssProperties": [],
      "slots": [],
      "dependents": [
        "stories-searchbar",
        "stories-tool-button"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "stories-searchbar": [
          "stories-icon"
        ],
        "stories-tool-button": [
          "stories-icon"
        ]
      }
    },
    {
      "filePath": "./src/components/input/input.tsx",
      "encapsulation": "shadow",
      "tag": "stories-input",
      "name": "stories-input",
      "readme": "# stories-input\n\nThe stories-input component is a styled and enchanced HTML input element. It supports only standard text input events and types such as \"text\", \"password\", \"email\", \"number\", \"search\", \"tel\", and \"url\".\n",
      "description": "The stories-input component is a styled and enchanced HTML input element. It supports only standard text input events and types such as \"text\", \"password\", \"email\", \"number\", \"search\", \"tel\", and \"url\".",
      "docsTags": [
        {
          "name": "slot",
          "text": "label - The input's label. Alternatively, you can use the label prop."
        },
        {
          "name": "slot",
          "text": "help-text - Help text that describes how to use the input."
        },
        {
          "name": "slot",
          "text": "invalid-text - Invalid text tells a user how to fix the error. Alternatively, you can use the invalid-text prop."
        },
        {
          "name": "slot",
          "text": "start - Used to prepend an icon or similar element to the input."
        },
        {
          "name": "slot",
          "text": "end - Used to append an icon or similar element to the input."
        }
      ],
      "usage": {},
      "properties": [
        {
          "name": "autocapitalize",
          "type": "string",
          "mutable": false,
          "attr": "autocapitalize",
          "reflectToAttr": false,
          "docs": "Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user.\nAvailable options: `\"off\"`, `\"none\"`, `\"on\"`, `\"sentences\"`, `\"words\"`, `\"characters\"`.",
          "docsTags": [],
          "default": "'off'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user.\nAvailable options: `\"off\"`, `\"none\"`, `\"on\"`, `\"sentences\"`, `\"words\"`, `\"characters\"`."
        },
        {
          "name": "autocomplete",
          "type": "\"email\" | \"tel\" | \"url\" | \"off\" | \"on\" | \"name\" | \"honorific-prefix\" | \"given-name\" | \"additional-name\" | \"family-name\" | \"honorific-suffix\" | \"nickname\" | \"username\" | \"new-password\" | \"current-password\" | \"one-time-code\" | \"organization-title\" | \"organization\" | \"street-address\" | \"address-line1\" | \"address-line2\" | \"address-line3\" | \"address-level4\" | \"address-level3\" | \"address-level2\" | \"address-level1\" | \"country\" | \"country-name\" | \"postal-code\" | \"cc-name\" | \"cc-given-name\" | \"cc-additional-name\" | \"cc-family-name\" | \"cc-number\" | \"cc-exp\" | \"cc-exp-month\" | \"cc-exp-year\" | \"cc-csc\" | \"cc-type\" | \"transaction-currency\" | \"transaction-amount\" | \"language\" | \"bday\" | \"bday-day\" | \"bday-month\" | \"bday-year\" | \"sex\" | \"tel-country-code\" | \"tel-national\" | \"tel-area-code\" | \"tel-local\" | \"tel-extension\" | \"impp\" | \"photo\"",
          "mutable": false,
          "attr": "autocomplete",
          "reflectToAttr": false,
          "docs": "Indicates whether the value of the control can be automatically completed by the browser.",
          "docsTags": [],
          "default": "'off'",
          "values": [
            {
              "value": "email",
              "type": "string"
            },
            {
              "value": "tel",
              "type": "string"
            },
            {
              "value": "url",
              "type": "string"
            },
            {
              "value": "off",
              "type": "string"
            },
            {
              "value": "on",
              "type": "string"
            },
            {
              "value": "name",
              "type": "string"
            },
            {
              "value": "honorific-prefix",
              "type": "string"
            },
            {
              "value": "given-name",
              "type": "string"
            },
            {
              "value": "additional-name",
              "type": "string"
            },
            {
              "value": "family-name",
              "type": "string"
            },
            {
              "value": "honorific-suffix",
              "type": "string"
            },
            {
              "value": "nickname",
              "type": "string"
            },
            {
              "value": "username",
              "type": "string"
            },
            {
              "value": "new-password",
              "type": "string"
            },
            {
              "value": "current-password",
              "type": "string"
            },
            {
              "value": "one-time-code",
              "type": "string"
            },
            {
              "value": "organization-title",
              "type": "string"
            },
            {
              "value": "organization",
              "type": "string"
            },
            {
              "value": "street-address",
              "type": "string"
            },
            {
              "value": "address-line1",
              "type": "string"
            },
            {
              "value": "address-line2",
              "type": "string"
            },
            {
              "value": "address-line3",
              "type": "string"
            },
            {
              "value": "address-level4",
              "type": "string"
            },
            {
              "value": "address-level3",
              "type": "string"
            },
            {
              "value": "address-level2",
              "type": "string"
            },
            {
              "value": "address-level1",
              "type": "string"
            },
            {
              "value": "country",
              "type": "string"
            },
            {
              "value": "country-name",
              "type": "string"
            },
            {
              "value": "postal-code",
              "type": "string"
            },
            {
              "value": "cc-name",
              "type": "string"
            },
            {
              "value": "cc-given-name",
              "type": "string"
            },
            {
              "value": "cc-additional-name",
              "type": "string"
            },
            {
              "value": "cc-family-name",
              "type": "string"
            },
            {
              "value": "cc-number",
              "type": "string"
            },
            {
              "value": "cc-exp",
              "type": "string"
            },
            {
              "value": "cc-exp-month",
              "type": "string"
            },
            {
              "value": "cc-exp-year",
              "type": "string"
            },
            {
              "value": "cc-csc",
              "type": "string"
            },
            {
              "value": "cc-type",
              "type": "string"
            },
            {
              "value": "transaction-currency",
              "type": "string"
            },
            {
              "value": "transaction-amount",
              "type": "string"
            },
            {
              "value": "language",
              "type": "string"
            },
            {
              "value": "bday",
              "type": "string"
            },
            {
              "value": "bday-day",
              "type": "string"
            },
            {
              "value": "bday-month",
              "type": "string"
            },
            {
              "value": "bday-year",
              "type": "string"
            },
            {
              "value": "sex",
              "type": "string"
            },
            {
              "value": "tel-country-code",
              "type": "string"
            },
            {
              "value": "tel-national",
              "type": "string"
            },
            {
              "value": "tel-area-code",
              "type": "string"
            },
            {
              "value": "tel-local",
              "type": "string"
            },
            {
              "value": "tel-extension",
              "type": "string"
            },
            {
              "value": "impp",
              "type": "string"
            },
            {
              "value": "photo",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Indicates whether the value of the control can be automatically completed by the browser."
        },
        {
          "name": "autocorrect",
          "type": "\"off\" | \"on\"",
          "mutable": false,
          "attr": "autocorrect",
          "reflectToAttr": false,
          "docs": "Whether auto correction should be enabled when the user is entering/editing the text value.",
          "docsTags": [],
          "default": "'off'",
          "values": [
            {
              "value": "off",
              "type": "string"
            },
            {
              "value": "on",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Whether auto correction should be enabled when the user is entering/editing the text value."
        },
        {
          "name": "autofocus",
          "type": "boolean",
          "mutable": false,
          "attr": "autofocus",
          "reflectToAttr": false,
          "docs": "This Boolean attribute lets you specify that a form control should have input focus when the page loads.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "description": "This Boolean attribute lets you specify that a form control should have input focus when the page loads."
        },
        {
          "name": "clearable",
          "type": "boolean",
          "mutable": false,
          "attr": "clearable",
          "reflectToAttr": false,
          "docs": "Set to true to add a clear button when the input is populated.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Set to true to add a clear button when the input is populated."
        },
        {
          "name": "debounce",
          "type": "number",
          "mutable": false,
          "attr": "debounce",
          "reflectToAttr": false,
          "docs": "Set the amount of time, in milliseconds, to wait to trigger the `gr-change` event after each keystroke. This also impacts form bindings such as `ngModel` or `v-model`.",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Set the amount of time, in milliseconds, to wait to trigger the `gr-change` event after each keystroke. This also impacts form bindings such as `ngModel` or `v-model`."
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Set to true to disable the input control.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Set to true to disable the input control."
        },
        {
          "name": "enterkeyhint",
          "type": "\"done\" | \"enter\" | \"go\" | \"next\" | \"previous\" | \"search\" | \"send\"",
          "mutable": false,
          "attr": "enterkeyhint",
          "reflectToAttr": false,
          "docs": "A hint to the browser for which enter key to display.\nPossible values: `\"enter\"`, `\"done\"`, `\"go\"`, `\"next\"`,\n`\"previous\"`, `\"search\"`, and `\"send\"`.",
          "docsTags": [],
          "values": [
            {
              "value": "done",
              "type": "string"
            },
            {
              "value": "enter",
              "type": "string"
            },
            {
              "value": "go",
              "type": "string"
            },
            {
              "value": "next",
              "type": "string"
            },
            {
              "value": "previous",
              "type": "string"
            },
            {
              "value": "search",
              "type": "string"
            },
            {
              "value": "send",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "description": "A hint to the browser for which enter key to display.\nPossible values: `\"enter\"`, `\"done\"`, `\"go\"`, `\"next\"`,\n`\"previous\"`, `\"search\"`, and `\"send\"`."
        },
        {
          "name": "helpText",
          "type": "string",
          "mutable": false,
          "attr": "help-text",
          "reflectToAttr": false,
          "docs": "The input's help text. Alternatively, you can use the help-text slot.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "The input's help text. Alternatively, you can use the help-text slot."
        },
        {
          "name": "inputmode",
          "type": "\"decimal\" | \"email\" | \"none\" | \"numeric\" | \"search\" | \"tel\" | \"text\" | \"url\"",
          "mutable": false,
          "attr": "inputmode",
          "reflectToAttr": false,
          "docs": "The input's inputmode attribute.",
          "docsTags": [],
          "values": [
            {
              "value": "decimal",
              "type": "string"
            },
            {
              "value": "email",
              "type": "string"
            },
            {
              "value": "none",
              "type": "string"
            },
            {
              "value": "numeric",
              "type": "string"
            },
            {
              "value": "search",
              "type": "string"
            },
            {
              "value": "tel",
              "type": "string"
            },
            {
              "value": "text",
              "type": "string"
            },
            {
              "value": "url",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "The input's inputmode attribute."
        },
        {
          "name": "invalid",
          "type": "boolean",
          "mutable": false,
          "attr": "invalid",
          "reflectToAttr": true,
          "docs": "Set to true to indicate this field is invalid. Will display the invalid text instead of the help text",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Set to true to indicate this field is invalid. Will display the invalid text instead of the help text"
        },
        {
          "name": "invalidText",
          "type": "string",
          "mutable": false,
          "attr": "invalid-text",
          "reflectToAttr": false,
          "docs": "The input's invalid text. Alternatively, you can use the invalid-text slot.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "The input's invalid text. Alternatively, you can use the invalid-text slot."
        },
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "The inputs's label. Alternatively, you can use the label slot.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "The inputs's label. Alternatively, you can use the label slot."
        },
        {
          "name": "max",
          "type": "string",
          "mutable": false,
          "attr": "max",
          "reflectToAttr": false,
          "docs": "The maximum value, which must not be less than its minimum (min attribute) value.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "description": "The maximum value, which must not be less than its minimum (min attribute) value."
        },
        {
          "name": "maxlength",
          "type": "number",
          "mutable": false,
          "attr": "maxlength",
          "reflectToAttr": false,
          "docs": "Specifies how many characters are allowed.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Specifies how many characters are allowed."
        },
        {
          "name": "min",
          "type": "string",
          "mutable": false,
          "attr": "min",
          "reflectToAttr": false,
          "docs": "The minimum value, which must not be greater than its maximum (max attribute) value.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "description": "The minimum value, which must not be greater than its maximum (max attribute) value."
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": true,
          "docs": "The input's name.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "The input's name."
        },
        {
          "name": "pill",
          "type": "boolean",
          "mutable": false,
          "attr": "pill",
          "reflectToAttr": false,
          "docs": "Set to true to draw a pill-style input with rounded edges.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Set to true to draw a pill-style input with rounded edges."
        },
        {
          "name": "placeholder",
          "type": "string",
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "The input's placeholder text.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "The input's placeholder text."
        },
        {
          "name": "readonly",
          "type": "boolean",
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": true,
          "docs": "If `true`, the user cannot modify the value.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "description": "If `true`, the user cannot modify the value."
        },
        {
          "name": "requiredIndicator",
          "type": "boolean",
          "mutable": false,
          "attr": "required-indicator",
          "reflectToAttr": false,
          "docs": "Set to true to display a required indicator, adds an asterisk to label",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Set to true to display a required indicator, adds an asterisk to label"
        },
        {
          "name": "size",
          "type": "\"large\" | \"medium\" | \"small\"",
          "mutable": false,
          "attr": "size",
          "reflectToAttr": true,
          "docs": "The input's size.",
          "docsTags": [],
          "default": "'medium'",
          "values": [
            {
              "value": "large",
              "type": "string"
            },
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "small",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "The input's size."
        },
        {
          "name": "spellcheck",
          "type": "boolean",
          "mutable": false,
          "attr": "spellcheck",
          "reflectToAttr": false,
          "docs": "If `true`, the element will have its spelling and grammar checked.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "description": "If `true`, the element will have its spelling and grammar checked."
        },
        {
          "name": "step",
          "type": "string",
          "mutable": false,
          "attr": "step",
          "reflectToAttr": false,
          "docs": "Works with the min and max attributes to limit the increments at which a value can be set.\nPossible values are: `\"any\"` or a positive floating point number.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "description": "Works with the min and max attributes to limit the increments at which a value can be set.\nPossible values are: `\"any\"` or a positive floating point number."
        },
        {
          "name": "togglePassword",
          "type": "boolean",
          "mutable": false,
          "attr": "toggle-password",
          "reflectToAttr": false,
          "docs": "Set to true to add a password toggle button for password inputs.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Set to true to add a password toggle button for password inputs."
        },
        {
          "name": "type",
          "type": "\"date\" | \"datetime-local\" | \"email\" | \"month\" | \"number\" | \"password\" | \"search\" | \"tel\" | \"text\" | \"time\" | \"url\" | \"week\"",
          "mutable": false,
          "attr": "type",
          "reflectToAttr": true,
          "docs": "The type of control to display. The default type is text.",
          "docsTags": [],
          "default": "'text'",
          "values": [
            {
              "value": "date",
              "type": "string"
            },
            {
              "value": "datetime-local",
              "type": "string"
            },
            {
              "value": "email",
              "type": "string"
            },
            {
              "value": "month",
              "type": "string"
            },
            {
              "value": "number",
              "type": "string"
            },
            {
              "value": "password",
              "type": "string"
            },
            {
              "value": "search",
              "type": "string"
            },
            {
              "value": "tel",
              "type": "string"
            },
            {
              "value": "text",
              "type": "string"
            },
            {
              "value": "time",
              "type": "string"
            },
            {
              "value": "url",
              "type": "string"
            },
            {
              "value": "week",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "The type of control to display. The default type is text."
        },
        {
          "name": "value",
          "type": "string",
          "mutable": true,
          "attr": "value",
          "reflectToAttr": true,
          "docs": "The input's value attribute.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "The input's value attribute."
        }
      ],
      "attributes": [
        {
          "name": "autocapitalize",
          "type": "string",
          "mutable": false,
          "attr": "autocapitalize",
          "reflectToAttr": false,
          "docs": "Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user.\nAvailable options: `\"off\"`, `\"none\"`, `\"on\"`, `\"sentences\"`, `\"words\"`, `\"characters\"`.",
          "docsTags": [],
          "default": "'off'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "'off'",
          "description": "Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user.\nAvailable options: `\"off\"`, `\"none\"`, `\"on\"`, `\"sentences\"`, `\"words\"`, `\"characters\"`."
        },
        {
          "name": "autocomplete",
          "type": "\"email\" | \"tel\" | \"url\" | \"off\" | \"on\" | \"name\" | \"honorific-prefix\" | \"given-name\" | \"additional-name\" | \"family-name\" | \"honorific-suffix\" | \"nickname\" | \"username\" | \"new-password\" | \"current-password\" | \"one-time-code\" | \"organization-title\" | \"organization\" | \"street-address\" | \"address-line1\" | \"address-line2\" | \"address-line3\" | \"address-level4\" | \"address-level3\" | \"address-level2\" | \"address-level1\" | \"country\" | \"country-name\" | \"postal-code\" | \"cc-name\" | \"cc-given-name\" | \"cc-additional-name\" | \"cc-family-name\" | \"cc-number\" | \"cc-exp\" | \"cc-exp-month\" | \"cc-exp-year\" | \"cc-csc\" | \"cc-type\" | \"transaction-currency\" | \"transaction-amount\" | \"language\" | \"bday\" | \"bday-day\" | \"bday-month\" | \"bday-year\" | \"sex\" | \"tel-country-code\" | \"tel-national\" | \"tel-area-code\" | \"tel-local\" | \"tel-extension\" | \"impp\" | \"photo\"",
          "mutable": false,
          "attr": "autocomplete",
          "reflectToAttr": false,
          "docs": "Indicates whether the value of the control can be automatically completed by the browser.",
          "docsTags": [],
          "default": "'off'",
          "values": [
            {
              "value": "email",
              "type": "string"
            },
            {
              "value": "tel",
              "type": "string"
            },
            {
              "value": "url",
              "type": "string"
            },
            {
              "value": "off",
              "type": "string"
            },
            {
              "value": "on",
              "type": "string"
            },
            {
              "value": "name",
              "type": "string"
            },
            {
              "value": "honorific-prefix",
              "type": "string"
            },
            {
              "value": "given-name",
              "type": "string"
            },
            {
              "value": "additional-name",
              "type": "string"
            },
            {
              "value": "family-name",
              "type": "string"
            },
            {
              "value": "honorific-suffix",
              "type": "string"
            },
            {
              "value": "nickname",
              "type": "string"
            },
            {
              "value": "username",
              "type": "string"
            },
            {
              "value": "new-password",
              "type": "string"
            },
            {
              "value": "current-password",
              "type": "string"
            },
            {
              "value": "one-time-code",
              "type": "string"
            },
            {
              "value": "organization-title",
              "type": "string"
            },
            {
              "value": "organization",
              "type": "string"
            },
            {
              "value": "street-address",
              "type": "string"
            },
            {
              "value": "address-line1",
              "type": "string"
            },
            {
              "value": "address-line2",
              "type": "string"
            },
            {
              "value": "address-line3",
              "type": "string"
            },
            {
              "value": "address-level4",
              "type": "string"
            },
            {
              "value": "address-level3",
              "type": "string"
            },
            {
              "value": "address-level2",
              "type": "string"
            },
            {
              "value": "address-level1",
              "type": "string"
            },
            {
              "value": "country",
              "type": "string"
            },
            {
              "value": "country-name",
              "type": "string"
            },
            {
              "value": "postal-code",
              "type": "string"
            },
            {
              "value": "cc-name",
              "type": "string"
            },
            {
              "value": "cc-given-name",
              "type": "string"
            },
            {
              "value": "cc-additional-name",
              "type": "string"
            },
            {
              "value": "cc-family-name",
              "type": "string"
            },
            {
              "value": "cc-number",
              "type": "string"
            },
            {
              "value": "cc-exp",
              "type": "string"
            },
            {
              "value": "cc-exp-month",
              "type": "string"
            },
            {
              "value": "cc-exp-year",
              "type": "string"
            },
            {
              "value": "cc-csc",
              "type": "string"
            },
            {
              "value": "cc-type",
              "type": "string"
            },
            {
              "value": "transaction-currency",
              "type": "string"
            },
            {
              "value": "transaction-amount",
              "type": "string"
            },
            {
              "value": "language",
              "type": "string"
            },
            {
              "value": "bday",
              "type": "string"
            },
            {
              "value": "bday-day",
              "type": "string"
            },
            {
              "value": "bday-month",
              "type": "string"
            },
            {
              "value": "bday-year",
              "type": "string"
            },
            {
              "value": "sex",
              "type": "string"
            },
            {
              "value": "tel-country-code",
              "type": "string"
            },
            {
              "value": "tel-national",
              "type": "string"
            },
            {
              "value": "tel-area-code",
              "type": "string"
            },
            {
              "value": "tel-local",
              "type": "string"
            },
            {
              "value": "tel-extension",
              "type": "string"
            },
            {
              "value": "impp",
              "type": "string"
            },
            {
              "value": "photo",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "'off'",
          "description": "Indicates whether the value of the control can be automatically completed by the browser."
        },
        {
          "name": "autocorrect",
          "type": "\"off\" | \"on\"",
          "mutable": false,
          "attr": "autocorrect",
          "reflectToAttr": false,
          "docs": "Whether auto correction should be enabled when the user is entering/editing the text value.",
          "docsTags": [],
          "default": "'off'",
          "values": [
            {
              "value": "off",
              "type": "string"
            },
            {
              "value": "on",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "'off'",
          "description": "Whether auto correction should be enabled when the user is entering/editing the text value."
        },
        {
          "name": "autofocus",
          "type": "boolean",
          "mutable": false,
          "attr": "autofocus",
          "reflectToAttr": false,
          "docs": "This Boolean attribute lets you specify that a form control should have input focus when the page loads.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "false",
          "description": "This Boolean attribute lets you specify that a form control should have input focus when the page loads."
        },
        {
          "name": "clearable",
          "type": "boolean",
          "mutable": false,
          "attr": "clearable",
          "reflectToAttr": false,
          "docs": "Set to true to add a clear button when the input is populated.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "false",
          "description": "Set to true to add a clear button when the input is populated."
        },
        {
          "name": "debounce",
          "type": "number",
          "mutable": false,
          "attr": "debounce",
          "reflectToAttr": false,
          "docs": "Set the amount of time, in milliseconds, to wait to trigger the `gr-change` event after each keystroke. This also impacts form bindings such as `ngModel` or `v-model`.",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "0",
          "description": "Set the amount of time, in milliseconds, to wait to trigger the `gr-change` event after each keystroke. This also impacts form bindings such as `ngModel` or `v-model`."
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Set to true to disable the input control.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "false",
          "description": "Set to true to disable the input control."
        },
        {
          "name": "enterkeyhint",
          "type": "\"done\" | \"enter\" | \"go\" | \"next\" | \"previous\" | \"search\" | \"send\"",
          "mutable": false,
          "attr": "enterkeyhint",
          "reflectToAttr": false,
          "docs": "A hint to the browser for which enter key to display.\nPossible values: `\"enter\"`, `\"done\"`, `\"go\"`, `\"next\"`,\n`\"previous\"`, `\"search\"`, and `\"send\"`.",
          "docsTags": [],
          "values": [
            {
              "value": "done",
              "type": "string"
            },
            {
              "value": "enter",
              "type": "string"
            },
            {
              "value": "go",
              "type": "string"
            },
            {
              "value": "next",
              "type": "string"
            },
            {
              "value": "previous",
              "type": "string"
            },
            {
              "value": "search",
              "type": "string"
            },
            {
              "value": "send",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "description": "A hint to the browser for which enter key to display.\nPossible values: `\"enter\"`, `\"done\"`, `\"go\"`, `\"next\"`,\n`\"previous\"`, `\"search\"`, and `\"send\"`."
        },
        {
          "name": "help-text",
          "type": "string",
          "mutable": false,
          "attr": "help-text",
          "reflectToAttr": false,
          "docs": "The input's help text. Alternatively, you can use the help-text slot.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "''",
          "description": "The input's help text. Alternatively, you can use the help-text slot."
        },
        {
          "name": "inputmode",
          "type": "\"decimal\" | \"email\" | \"none\" | \"numeric\" | \"search\" | \"tel\" | \"text\" | \"url\"",
          "mutable": false,
          "attr": "inputmode",
          "reflectToAttr": false,
          "docs": "The input's inputmode attribute.",
          "docsTags": [],
          "values": [
            {
              "value": "decimal",
              "type": "string"
            },
            {
              "value": "email",
              "type": "string"
            },
            {
              "value": "none",
              "type": "string"
            },
            {
              "value": "numeric",
              "type": "string"
            },
            {
              "value": "search",
              "type": "string"
            },
            {
              "value": "tel",
              "type": "string"
            },
            {
              "value": "text",
              "type": "string"
            },
            {
              "value": "url",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "The input's inputmode attribute."
        },
        {
          "name": "invalid",
          "type": "boolean",
          "mutable": false,
          "attr": "invalid",
          "reflectToAttr": true,
          "docs": "Set to true to indicate this field is invalid. Will display the invalid text instead of the help text",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "false",
          "description": "Set to true to indicate this field is invalid. Will display the invalid text instead of the help text"
        },
        {
          "name": "invalid-text",
          "type": "string",
          "mutable": false,
          "attr": "invalid-text",
          "reflectToAttr": false,
          "docs": "The input's invalid text. Alternatively, you can use the invalid-text slot.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "''",
          "description": "The input's invalid text. Alternatively, you can use the invalid-text slot."
        },
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "The inputs's label. Alternatively, you can use the label slot.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "''",
          "description": "The inputs's label. Alternatively, you can use the label slot."
        },
        {
          "name": "max",
          "type": "string",
          "mutable": false,
          "attr": "max",
          "reflectToAttr": false,
          "docs": "The maximum value, which must not be less than its minimum (min attribute) value.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "description": "The maximum value, which must not be less than its minimum (min attribute) value."
        },
        {
          "name": "maxlength",
          "type": "number",
          "mutable": false,
          "attr": "maxlength",
          "reflectToAttr": false,
          "docs": "Specifies how many characters are allowed.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Specifies how many characters are allowed."
        },
        {
          "name": "min",
          "type": "string",
          "mutable": false,
          "attr": "min",
          "reflectToAttr": false,
          "docs": "The minimum value, which must not be greater than its maximum (max attribute) value.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "description": "The minimum value, which must not be greater than its maximum (max attribute) value."
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": true,
          "docs": "The input's name.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "''",
          "description": "The input's name."
        },
        {
          "name": "pill",
          "type": "boolean",
          "mutable": false,
          "attr": "pill",
          "reflectToAttr": false,
          "docs": "Set to true to draw a pill-style input with rounded edges.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "false",
          "description": "Set to true to draw a pill-style input with rounded edges."
        },
        {
          "name": "placeholder",
          "type": "string",
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "The input's placeholder text.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "''",
          "description": "The input's placeholder text."
        },
        {
          "name": "readonly",
          "type": "boolean",
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": true,
          "docs": "If `true`, the user cannot modify the value.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "false",
          "description": "If `true`, the user cannot modify the value."
        },
        {
          "name": "required-indicator",
          "type": "boolean",
          "mutable": false,
          "attr": "required-indicator",
          "reflectToAttr": false,
          "docs": "Set to true to display a required indicator, adds an asterisk to label",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "false",
          "description": "Set to true to display a required indicator, adds an asterisk to label"
        },
        {
          "name": "size",
          "type": "\"large\" | \"medium\" | \"small\"",
          "mutable": false,
          "attr": "size",
          "reflectToAttr": true,
          "docs": "The input's size.",
          "docsTags": [],
          "default": "'medium'",
          "values": [
            {
              "value": "large",
              "type": "string"
            },
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "small",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "'medium'",
          "description": "The input's size."
        },
        {
          "name": "spellcheck",
          "type": "boolean",
          "mutable": false,
          "attr": "spellcheck",
          "reflectToAttr": false,
          "docs": "If `true`, the element will have its spelling and grammar checked.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "false",
          "description": "If `true`, the element will have its spelling and grammar checked."
        },
        {
          "name": "step",
          "type": "string",
          "mutable": false,
          "attr": "step",
          "reflectToAttr": false,
          "docs": "Works with the min and max attributes to limit the increments at which a value can be set.\nPossible values are: `\"any\"` or a positive floating point number.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "description": "Works with the min and max attributes to limit the increments at which a value can be set.\nPossible values are: `\"any\"` or a positive floating point number."
        },
        {
          "name": "toggle-password",
          "type": "boolean",
          "mutable": false,
          "attr": "toggle-password",
          "reflectToAttr": false,
          "docs": "Set to true to add a password toggle button for password inputs.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "false",
          "description": "Set to true to add a password toggle button for password inputs."
        },
        {
          "name": "type",
          "type": "\"date\" | \"datetime-local\" | \"email\" | \"month\" | \"number\" | \"password\" | \"search\" | \"tel\" | \"text\" | \"time\" | \"url\" | \"week\"",
          "mutable": false,
          "attr": "type",
          "reflectToAttr": true,
          "docs": "The type of control to display. The default type is text.",
          "docsTags": [],
          "default": "'text'",
          "values": [
            {
              "value": "date",
              "type": "string"
            },
            {
              "value": "datetime-local",
              "type": "string"
            },
            {
              "value": "email",
              "type": "string"
            },
            {
              "value": "month",
              "type": "string"
            },
            {
              "value": "number",
              "type": "string"
            },
            {
              "value": "password",
              "type": "string"
            },
            {
              "value": "search",
              "type": "string"
            },
            {
              "value": "tel",
              "type": "string"
            },
            {
              "value": "text",
              "type": "string"
            },
            {
              "value": "time",
              "type": "string"
            },
            {
              "value": "url",
              "type": "string"
            },
            {
              "value": "week",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "'text'",
          "description": "The type of control to display. The default type is text."
        },
        {
          "name": "value",
          "type": "string",
          "mutable": true,
          "attr": "value",
          "reflectToAttr": true,
          "docs": "The input's value attribute.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "''",
          "description": "The input's value attribute."
        }
      ],
      "methods": [
        {
          "name": "removeFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "removeFocus() => Promise<void>",
          "parameters": [],
          "docs": "Removes focus from the input.",
          "docsTags": []
        },
        {
          "name": "select",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "select() => Promise<void>",
          "parameters": [],
          "docs": "Selects all the text in the input.",
          "docsTags": []
        },
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setFocus(options?: FocusOptions) => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the input.",
          "docsTags": []
        },
        {
          "name": "setRangeText",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setRangeText(replacement: string, start: number, end: number, selectMode?: 'select' | 'start' | 'end' | 'preserve') => Promise<void>",
          "parameters": [],
          "docs": "Replaces a range of text with a new string.",
          "docsTags": []
        },
        {
          "name": "setSelectionRange",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setSelectionRange(selectionStart: number, selectionEnd: number, selectionDirection?: 'forward' | 'backward' | 'none') => Promise<void>",
          "parameters": [],
          "docs": "Sets the start and end positions of the text selection (0-based).",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "gr-blur",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the control loses focus.",
          "docsTags": [],
          "name": "gr-blur",
          "description": "Emitted when the control loses focus.",
          "type": "void"
        },
        {
          "event": "gr-change",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the control's value changes.",
          "docsTags": [],
          "name": "gr-change",
          "description": "Emitted when the control's value changes.",
          "type": "void"
        },
        {
          "event": "gr-clear",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the clear button is activated.",
          "docsTags": [],
          "name": "gr-clear",
          "description": "Emitted when the clear button is activated.",
          "type": "void"
        },
        {
          "event": "gr-focus",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the control gains focus.",
          "docsTags": [],
          "name": "gr-focus",
          "description": "Emitted when the control gains focus.",
          "type": "void"
        },
        {
          "event": "gr-input",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the control receives input.",
          "docsTags": [],
          "name": "gr-input",
          "description": "Emitted when the control receives input.",
          "type": "void"
        }
      ],
      "cssProperties": [
        {
          "name": "--background-color",
          "annotation": "prop",
          "docs": "Background color of the input",
          "description": "Background color of the input"
        },
        {
          "name": "--background-color-focus",
          "annotation": "prop",
          "docs": "Background color of the input on focus",
          "description": "Background color of the input on focus"
        },
        {
          "name": "--background-color-hover",
          "annotation": "prop",
          "docs": "Background color of the input on hover",
          "description": "Background color of the input on hover"
        },
        {
          "name": "--background-color-invalid",
          "annotation": "prop",
          "docs": "Background color of the input when invalid",
          "description": "Background color of the input when invalid"
        },
        {
          "name": "--background-color-invalid-hover",
          "annotation": "prop",
          "docs": "Background color of the input when invalid on focus",
          "description": "Background color of the input when invalid on focus"
        },
        {
          "name": "--border-color",
          "annotation": "prop",
          "docs": "Border color of the input",
          "description": "Border color of the input"
        },
        {
          "name": "--border-color-focus",
          "annotation": "prop",
          "docs": "Border color of the input on focus",
          "description": "Border color of the input on focus"
        },
        {
          "name": "--border-color-hover",
          "annotation": "prop",
          "docs": "Border color of the input on hover",
          "description": "Border color of the input on hover"
        },
        {
          "name": "--border-color-invalid",
          "annotation": "prop",
          "docs": "Border color of the input when invalid",
          "description": "Border color of the input when invalid"
        },
        {
          "name": "--border-color-invalid-hover",
          "annotation": "prop",
          "docs": "Border color of the input when invalid on focus",
          "description": "Border color of the input when invalid on focus"
        },
        {
          "name": "--border-radius",
          "annotation": "prop",
          "docs": "Border radius of the input",
          "description": "Border radius of the input"
        },
        {
          "name": "--color",
          "annotation": "prop",
          "docs": "Text color of the input",
          "description": "Text color of the input"
        },
        {
          "name": "--focus-ring",
          "annotation": "prop",
          "docs": "The focus ring style to use when the input receives focus, a `box-shadow` property.",
          "description": "The focus ring style to use when the input receives focus, a `box-shadow` property."
        },
        {
          "name": "--font-size",
          "annotation": "prop",
          "docs": "Font size of the input",
          "description": "Font size of the input"
        },
        {
          "name": "--font-weight",
          "annotation": "prop",
          "docs": "Font weight of the input",
          "description": "Font weight of the input"
        },
        {
          "name": "--icon-color",
          "annotation": "prop",
          "docs": "Color of the icons (start & end slots, clearable & password toggle)",
          "description": "Color of the icons (start & end slots, clearable & password toggle)"
        },
        {
          "name": "--icon-color-hover",
          "annotation": "prop",
          "docs": "Color of the icons (clearable & password toggle) on hover",
          "description": "Color of the icons (clearable & password toggle) on hover"
        },
        {
          "name": "--min-height",
          "annotation": "prop",
          "docs": "Minimum height of the input",
          "description": "Minimum height of the input"
        },
        {
          "name": "--padding-end",
          "annotation": "prop",
          "docs": "Right padding of the input (will be left padding when we support right-to-left direction)",
          "description": "Right padding of the input (will be left padding when we support right-to-left direction)"
        },
        {
          "name": "--padding-start",
          "annotation": "prop",
          "docs": "Left padding of the input (will be right padding when we support right-to-left direction)",
          "description": "Left padding of the input (will be right padding when we support right-to-left direction)"
        },
        {
          "name": "--placeholder-color",
          "annotation": "prop",
          "docs": "Text color of the placeholder",
          "description": "Text color of the placeholder"
        },
        {
          "name": "--text-transform",
          "annotation": "prop",
          "docs": "Text transform of the input",
          "description": "Text transform of the input"
        }
      ],
      "slots": [
        {
          "name": "end",
          "docs": "Used to append an icon or similar element to the input."
        },
        {
          "name": "help-text",
          "docs": "Help text that describes how to use the input."
        },
        {
          "name": "invalid-text",
          "docs": "Invalid text tells a user how to fix the error. Alternatively, you can use the invalid-text prop."
        },
        {
          "name": "label",
          "docs": "The input's label. Alternatively, you can use the label prop."
        },
        {
          "name": "start",
          "docs": "Used to prepend an icon or similar element to the input."
        }
      ],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/label/label.tsx",
      "encapsulation": "shadow",
      "tag": "stories-label",
      "name": "stories-label",
      "readme": "# stories-label\n\nThe stories-label is a wrapper element displays text, icons, or both. You can position it as inline, fixed, stacked, or floating element and will usually use it with another components such stories-item, stories-input, stories-toggle, etc.\n",
      "description": "The stories-label is a wrapper element displays text, icons, or both. You can position it as inline, fixed, stacked, or floating element and will usually use it with another components such stories-item, stories-input, stories-toggle, etc.",
      "docsTags": [],
      "usage": {},
      "properties": [
        {
          "name": "color",
          "type": "string",
          "mutable": false,
          "attr": "color",
          "reflectToAttr": true,
          "docs": "The color to use from your application's color palette.\nDefault options are: `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, and `\"dark\"`.\nFor more information on colors, see [theming](/docs/theming/basics).",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "description": "The color to use from your application's color palette.\nDefault options are: `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, and `\"dark\"`.\nFor more information on colors, see [theming](/docs/theming/basics)."
        },
        {
          "name": "position",
          "type": "\"fixed\" | \"floating\" | \"stacked\"",
          "mutable": false,
          "attr": "position",
          "reflectToAttr": false,
          "docs": "The position determines where and how the label behaves inside an item.",
          "docsTags": [],
          "default": "'fixed'",
          "values": [
            {
              "value": "fixed",
              "type": "string"
            },
            {
              "value": "floating",
              "type": "string"
            },
            {
              "value": "stacked",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "description": "The position determines where and how the label behaves inside an item."
        }
      ],
      "attributes": [
        {
          "name": "color",
          "type": "string",
          "mutable": false,
          "attr": "color",
          "reflectToAttr": true,
          "docs": "The color to use from your application's color palette.\nDefault options are: `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, and `\"dark\"`.\nFor more information on colors, see [theming](/docs/theming/basics).",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "description": "The color to use from your application's color palette.\nDefault options are: `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, and `\"dark\"`.\nFor more information on colors, see [theming](/docs/theming/basics)."
        },
        {
          "name": "position",
          "type": "\"fixed\" | \"floating\" | \"stacked\"",
          "mutable": false,
          "attr": "position",
          "reflectToAttr": false,
          "docs": "The position determines where and how the label behaves inside an item.",
          "docsTags": [],
          "default": "'fixed'",
          "values": [
            {
              "value": "fixed",
              "type": "string"
            },
            {
              "value": "floating",
              "type": "string"
            },
            {
              "value": "stacked",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "defaultValue": "'fixed'",
          "description": "The position determines where and how the label behaves inside an item."
        }
      ],
      "methods": [],
      "events": [],
      "cssProperties": [
        {
          "name": "--color",
          "annotation": "prop",
          "docs": "Color of the label",
          "description": "Color of the label"
        }
      ],
      "slots": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/menu/menu.tsx",
      "encapsulation": "shadow",
      "tag": "stories-menu",
      "name": "stories-menu",
      "readme": "# gr-menu\n",
      "description": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "- The menu's content, including menu items, menu dividers, and menu labels."
        }
      ],
      "usage": {},
      "properties": [],
      "attributes": [],
      "methods": [
        {
          "name": "typeToSelect",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "typeToSelect(key: string) => Promise<void>",
          "parameters": [],
          "docs": "Initiates type-to-select logic, which automatically selects an option based on what the user is currently typing.\nThe key passed will be appended to the internal query and the selection will be updated. After a brief period, the\ninternal query is cleared automatically. This method is intended to be used with the keydown event. Useful for\nenabling type-to-select when the menu doesn't have focus.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "stories-select",
          "detail": "{ item: HTMLStoriesMenuItemElement; }",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when a menu item is selected.",
          "docsTags": [],
          "name": "stories-select",
          "description": "Emitted when a menu item is selected.",
          "type": "{ item: HTMLStoriesMenuItemElement; }"
        }
      ],
      "cssProperties": [
        {
          "name": "--padding-bottom",
          "annotation": "prop",
          "docs": "Bottom padding of the menu",
          "description": "Bottom padding of the menu"
        },
        {
          "name": "--padding-top",
          "annotation": "prop",
          "docs": "Top padding of the menu",
          "description": "Top padding of the menu"
        }
      ],
      "slots": [
        {
          "name": "",
          "docs": "The menu's content, including menu items, menu dividers, and menu labels."
        }
      ],
      "dependents": [
        "stories-select"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "stories-select": [
          "stories-menu"
        ]
      }
    },
    {
      "filePath": "./src/components/menu-divider/menu-divider.tsx",
      "encapsulation": "shadow",
      "tag": "stories-menu-divider",
      "name": "stories-menu-divider",
      "readme": "# gr-menu-divider\n",
      "description": "",
      "docsTags": [],
      "usage": {},
      "properties": [],
      "attributes": [],
      "methods": [],
      "events": [],
      "cssProperties": [
        {
          "name": "--border-color",
          "annotation": "prop",
          "docs": "Border color of the menu item divider",
          "description": "Border color of the menu item divider"
        },
        {
          "name": "--margin-bottom",
          "annotation": "prop",
          "docs": "Bottom margin of the menu item divider",
          "description": "Bottom margin of the menu item divider"
        },
        {
          "name": "--margin-top",
          "annotation": "prop",
          "docs": "Top margin of the menu item divider",
          "description": "Top margin of the menu item divider"
        }
      ],
      "slots": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/menu-item/menu-item.tsx",
      "encapsulation": "shadow",
      "tag": "stories-menu-item",
      "name": "stories-menu-item",
      "readme": "# gr-menu-item\n",
      "description": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "- The menu item's label."
        },
        {
          "name": "slot",
          "text": "start - Content is placed to the left of the menu item's label (will be to the right when we support right-to-left direction)"
        },
        {
          "name": "slot",
          "text": "end - Content is placed to the right of the menu item's label (will be to the left when we support right-to-left direction)"
        }
      ],
      "usage": {},
      "properties": [
        {
          "name": "checked",
          "type": "boolean",
          "mutable": false,
          "attr": "checked",
          "reflectToAttr": true,
          "docs": "Set to true to draw the item in a checked state.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Set to true to draw the item in a checked state."
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "Set to true to draw the menu item in a disabled state.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Set to true to draw the menu item in a disabled state."
        },
        {
          "name": "value",
          "type": "string",
          "mutable": false,
          "attr": "value",
          "reflectToAttr": true,
          "docs": "A unique value to store in the menu item. This can be used as a way to identify menu items when selected.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "A unique value to store in the menu item. This can be used as a way to identify menu items when selected."
        }
      ],
      "attributes": [
        {
          "name": "checked",
          "type": "boolean",
          "mutable": false,
          "attr": "checked",
          "reflectToAttr": true,
          "docs": "Set to true to draw the item in a checked state.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "false",
          "description": "Set to true to draw the item in a checked state."
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "Set to true to draw the menu item in a disabled state.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "false",
          "description": "Set to true to draw the menu item in a disabled state."
        },
        {
          "name": "value",
          "type": "string",
          "mutable": false,
          "attr": "value",
          "reflectToAttr": true,
          "docs": "A unique value to store in the menu item. This can be used as a way to identify menu items when selected.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "''",
          "description": "A unique value to store in the menu item. This can be used as a way to identify menu items when selected."
        }
      ],
      "methods": [
        {
          "name": "removeFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "removeFocus() => Promise<void>",
          "parameters": [],
          "docs": "Removes focus from the menu item.",
          "docsTags": []
        },
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setFocus(options?: FocusOptions) => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the menu item.",
          "docsTags": []
        }
      ],
      "events": [],
      "cssProperties": [
        {
          "name": "--background-color",
          "annotation": "prop",
          "docs": "Background color of the menu item",
          "description": "Background color of the menu item"
        },
        {
          "name": "--background-color-focused",
          "annotation": "prop",
          "docs": "Background color of the menu item when focused",
          "description": "Background color of the menu item when focused"
        },
        {
          "name": "--color",
          "annotation": "prop",
          "docs": "Text color of the menu item",
          "description": "Text color of the menu item"
        },
        {
          "name": "--color-disabled",
          "annotation": "prop",
          "docs": "Text color of the menu item when disabled",
          "description": "Text color of the menu item when disabled"
        },
        {
          "name": "--color-focused",
          "annotation": "prop",
          "docs": "Text color of the menu item when focused",
          "description": "Text color of the menu item when focused"
        },
        {
          "name": "--line-height",
          "annotation": "prop",
          "docs": "Line height of the menu item",
          "description": "Line height of the menu item"
        },
        {
          "name": "--padding-bottom",
          "annotation": "prop",
          "docs": "Bottom padding of the menu item",
          "description": "Bottom padding of the menu item"
        },
        {
          "name": "--padding-end",
          "annotation": "prop",
          "docs": "Right padding of the menu item (will be left padding when we support right-to-left direction)",
          "description": "Right padding of the menu item (will be left padding when we support right-to-left direction)"
        },
        {
          "name": "--padding-start",
          "annotation": "prop",
          "docs": "Left padding of the menu item (will be right padding when we support right-to-left direction)",
          "description": "Left padding of the menu item (will be right padding when we support right-to-left direction)"
        },
        {
          "name": "--padding-top",
          "annotation": "prop",
          "docs": "Top padding of the menu item",
          "description": "Top padding of the menu item"
        },
        {
          "name": "--transition",
          "annotation": "prop",
          "docs": "Transition of the menu item",
          "description": "Transition of the menu item"
        }
      ],
      "slots": [
        {
          "name": "",
          "docs": "The menu item's label."
        },
        {
          "name": "end",
          "docs": "Content is placed to the right of the menu item's label (will be to the left when we support right-to-left direction)"
        },
        {
          "name": "start",
          "docs": "Content is placed to the left of the menu item's label (will be to the right when we support right-to-left direction)"
        }
      ],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/menu-label/menu-label.tsx",
      "encapsulation": "shadow",
      "tag": "stories-menu-label",
      "name": "stories-menu-label",
      "readme": "# gr-menu-label\n",
      "description": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "- The menu label's content."
        }
      ],
      "usage": {},
      "properties": [],
      "attributes": [],
      "methods": [],
      "events": [],
      "cssProperties": [
        {
          "name": "--background-color",
          "annotation": "prop",
          "docs": "Background color of the menu item label",
          "description": "Background color of the menu item label"
        },
        {
          "name": "--color",
          "annotation": "prop",
          "docs": "Text color of the menu item label",
          "description": "Text color of the menu item label"
        },
        {
          "name": "--font-style",
          "annotation": "prop",
          "docs": "Font style of the menu item label",
          "description": "Font style of the menu item label"
        },
        {
          "name": "--font-weight",
          "annotation": "prop",
          "docs": "Font weight of the menu item label",
          "description": "Font weight of the menu item label"
        },
        {
          "name": "--line-height",
          "annotation": "prop",
          "docs": "Line height of the menu item label",
          "description": "Line height of the menu item label"
        },
        {
          "name": "--padding-bottom",
          "annotation": "prop",
          "docs": "Bottom padding of the menu item label",
          "description": "Bottom padding of the menu item label"
        },
        {
          "name": "--padding-end",
          "annotation": "prop",
          "docs": "Right padding of the menu item label (will be left padding when we support right-to-left direction)",
          "description": "Right padding of the menu item label (will be left padding when we support right-to-left direction)"
        },
        {
          "name": "--padding-start",
          "annotation": "prop",
          "docs": "Left padding of the menu item label (will be right padding when we support right-to-left direction)",
          "description": "Left padding of the menu item label (will be right padding when we support right-to-left direction)"
        },
        {
          "name": "--padding-top",
          "annotation": "prop",
          "docs": "Top padding of the menu item label",
          "description": "Top padding of the menu item label"
        }
      ],
      "slots": [
        {
          "name": "",
          "docs": "The menu label's content."
        }
      ],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/preview/preview.tsx",
      "encapsulation": "shadow",
      "tag": "stories-preview",
      "name": "stories-preview",
      "readme": "# stories-preview\n\nThe stories-preview is a wrapper container for stories-renderer component. It utilises stories-zoom component to manage visual size of the rendering content. \n",
      "description": "The stories-preview is a wrapper container for stories-renderer component. It utilises stories-zoom component to manage visual size of the rendering content.",
      "docsTags": [],
      "usage": {},
      "properties": [],
      "attributes": [],
      "methods": [],
      "events": [],
      "cssProperties": [],
      "slots": [],
      "dependents": [],
      "dependencies": [
        "stories-zoom"
      ],
      "dependencyGraph": {
        "stories-preview": [
          "stories-zoom"
        ]
      }
    },
    {
      "filePath": "./src/components/radio/radio.tsx",
      "encapsulation": "shadow",
      "tag": "stories-radio",
      "name": "stories-radio",
      "readme": "# gr-radio\n",
      "description": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "- The radio's label."
        }
      ],
      "usage": {},
      "properties": [
        {
          "name": "checked",
          "type": "boolean",
          "mutable": true,
          "attr": "checked",
          "reflectToAttr": true,
          "docs": "Set to true to draw the radio in a checked state.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Set to true to draw the radio in a checked state."
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Set to true to disable the radio.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Set to true to disable the radio."
        },
        {
          "name": "value",
          "type": "string",
          "mutable": true,
          "attr": "value",
          "reflectToAttr": true,
          "docs": "The radio's value attribute.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "The radio's value attribute."
        }
      ],
      "attributes": [
        {
          "name": "checked",
          "type": "boolean",
          "mutable": true,
          "attr": "checked",
          "reflectToAttr": true,
          "docs": "Set to true to draw the radio in a checked state.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "false",
          "description": "Set to true to draw the radio in a checked state."
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Set to true to disable the radio.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "false",
          "description": "Set to true to disable the radio."
        },
        {
          "name": "value",
          "type": "string",
          "mutable": true,
          "attr": "value",
          "reflectToAttr": true,
          "docs": "The radio's value attribute.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "The radio's value attribute."
        }
      ],
      "methods": [
        {
          "name": "removeFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "removeFocus() => Promise<void>",
          "parameters": [],
          "docs": "Removes focus from the radio.",
          "docsTags": []
        },
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setFocus(options?: FocusOptions) => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the radio.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "stories-blur",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the control loses focus.",
          "docsTags": [],
          "name": "stories-blur",
          "description": "Emitted when the control loses focus.",
          "type": "any"
        },
        {
          "event": "stories-focus",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the control gains focus.",
          "docsTags": [],
          "name": "stories-focus",
          "description": "Emitted when the control gains focus.",
          "type": "any"
        }
      ],
      "cssProperties": [
        {
          "name": "--control-background-color",
          "annotation": "prop",
          "docs": "Background color of the control",
          "description": "Background color of the control"
        },
        {
          "name": "--control-background-color-checked",
          "annotation": "prop",
          "docs": "Background color of the control when checked",
          "description": "Background color of the control when checked"
        },
        {
          "name": "--control-background-color-checked-focus",
          "annotation": "prop",
          "docs": "Background color of the control when checked on focus",
          "description": "Background color of the control when checked on focus"
        },
        {
          "name": "--control-background-color-checked-hover",
          "annotation": "prop",
          "docs": "Background color of the control when checked on hover",
          "description": "Background color of the control when checked on hover"
        },
        {
          "name": "--control-background-color-focus",
          "annotation": "prop",
          "docs": "Background color of the control on focus",
          "description": "Background color of the control on focus"
        },
        {
          "name": "--control-background-color-hover",
          "annotation": "prop",
          "docs": "Background color of the control on hover",
          "description": "Background color of the control on hover"
        },
        {
          "name": "--control-border-color",
          "annotation": "prop",
          "docs": "Border color of the control",
          "description": "Border color of the control"
        },
        {
          "name": "--control-border-color-checked",
          "annotation": "prop",
          "docs": "Border color of the control when checked",
          "description": "Border color of the control when checked"
        },
        {
          "name": "--control-border-color-checked-focus",
          "annotation": "prop",
          "docs": "Border color of the control when checked on focus",
          "description": "Border color of the control when checked on focus"
        },
        {
          "name": "--control-border-color-checked-hover",
          "annotation": "prop",
          "docs": "Border color of the control when checked on hover",
          "description": "Border color of the control when checked on hover"
        },
        {
          "name": "--control-border-color-focus",
          "annotation": "prop",
          "docs": "Border color of the control on focus",
          "description": "Border color of the control on focus"
        },
        {
          "name": "--control-border-color-hover",
          "annotation": "prop",
          "docs": "Border color of the control on hover",
          "description": "Border color of the control on hover"
        },
        {
          "name": "--control-color-checked",
          "annotation": "prop",
          "docs": "Color of the control when checked (the small circle)",
          "description": "Color of the control when checked (the small circle)"
        },
        {
          "name": "--control-size",
          "annotation": "prop",
          "docs": "Size of the control",
          "description": "Size of the control"
        },
        {
          "name": "--label-color",
          "annotation": "prop",
          "docs": "Color of the label",
          "description": "Color of the label"
        }
      ],
      "slots": [
        {
          "name": "",
          "docs": "The radio's label."
        }
      ],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/radio-group/radio-group.tsx",
      "encapsulation": "shadow",
      "tag": "stories-radio-group",
      "name": "stories-radio-group",
      "readme": "# gr-radio-group\n",
      "description": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "- The default slot where radio controls are placed."
        },
        {
          "name": "slot",
          "text": "label - The radio group label. Required for proper accessibility. Alternatively, you can use the label prop."
        },
        {
          "name": "slot",
          "text": "invalid-text - Invalid text tells a user how to fix the error. Alternatively, you can use the invalid-text prop."
        }
      ],
      "usage": {},
      "properties": [
        {
          "name": "allowEmptySelection",
          "type": "boolean",
          "mutable": false,
          "attr": "allow-empty-selection",
          "reflectToAttr": false,
          "docs": "If `true`, the radios can be deselected.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "description": "If `true`, the radios can be deselected."
        },
        {
          "name": "horizontal",
          "type": "boolean",
          "mutable": false,
          "attr": "horizontal",
          "reflectToAttr": true,
          "docs": "Render the radios horizontal instead of vertical",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Render the radios horizontal instead of vertical"
        },
        {
          "name": "invalid",
          "type": "boolean",
          "mutable": false,
          "attr": "invalid",
          "reflectToAttr": true,
          "docs": "Set to true to indicate this field is invalid. Will display the invalid text.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Set to true to indicate this field is invalid. Will display the invalid text."
        },
        {
          "name": "invalidText",
          "type": "string",
          "mutable": false,
          "attr": "invalid-text",
          "reflectToAttr": false,
          "docs": "The radio group's invalid text. Alternatively, you can use the invalid-text slot.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "The radio group's invalid text. Alternatively, you can use the invalid-text slot."
        },
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "The radio group label. Required for proper accessibility. Alternatively, you can use the label slot.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "The radio group label. Required for proper accessibility. Alternatively, you can use the label slot."
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "The name of the control, which is submitted with the form data.",
          "docsTags": [],
          "default": "this.inputId",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "The name of the control, which is submitted with the form data."
        },
        {
          "name": "requiredIndicator",
          "type": "boolean",
          "mutable": false,
          "attr": "required-indicator",
          "reflectToAttr": false,
          "docs": "Set to true to display a required indicator, adds an asterisk to label",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Set to true to display a required indicator, adds an asterisk to label"
        },
        {
          "name": "value",
          "type": "any",
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "the value of the radio group.",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": true,
          "required": false,
          "description": "the value of the radio group."
        }
      ],
      "attributes": [
        {
          "name": "allow-empty-selection",
          "type": "boolean",
          "mutable": false,
          "attr": "allow-empty-selection",
          "reflectToAttr": false,
          "docs": "If `true`, the radios can be deselected.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "false",
          "description": "If `true`, the radios can be deselected."
        },
        {
          "name": "horizontal",
          "type": "boolean",
          "mutable": false,
          "attr": "horizontal",
          "reflectToAttr": true,
          "docs": "Render the radios horizontal instead of vertical",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "false",
          "description": "Render the radios horizontal instead of vertical"
        },
        {
          "name": "invalid",
          "type": "boolean",
          "mutable": false,
          "attr": "invalid",
          "reflectToAttr": true,
          "docs": "Set to true to indicate this field is invalid. Will display the invalid text.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "false",
          "description": "Set to true to indicate this field is invalid. Will display the invalid text."
        },
        {
          "name": "invalid-text",
          "type": "string",
          "mutable": false,
          "attr": "invalid-text",
          "reflectToAttr": false,
          "docs": "The radio group's invalid text. Alternatively, you can use the invalid-text slot.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "''",
          "description": "The radio group's invalid text. Alternatively, you can use the invalid-text slot."
        },
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "The radio group label. Required for proper accessibility. Alternatively, you can use the label slot.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "''",
          "description": "The radio group label. Required for proper accessibility. Alternatively, you can use the label slot."
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "The name of the control, which is submitted with the form data.",
          "docsTags": [],
          "default": "this.inputId",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "this.inputId",
          "description": "The name of the control, which is submitted with the form data."
        },
        {
          "name": "required-indicator",
          "type": "boolean",
          "mutable": false,
          "attr": "required-indicator",
          "reflectToAttr": false,
          "docs": "Set to true to display a required indicator, adds an asterisk to label",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "false",
          "description": "Set to true to display a required indicator, adds an asterisk to label"
        },
        {
          "name": "value",
          "type": "any",
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "the value of the radio group.",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": true,
          "required": false,
          "description": "the value of the radio group."
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "stories-change",
          "detail": "RadioGroupChangeEventDetail",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the value has changed.",
          "docsTags": [],
          "name": "stories-change",
          "description": "Emitted when the value has changed.",
          "type": "RadioGroupChangeEventDetail"
        }
      ],
      "cssProperties": [
        {
          "name": "--align-radios",
          "annotation": "prop",
          "docs": "Alignment of radio's on cross-axis, an `align-items` Flexbox property",
          "description": "Alignment of radio's on cross-axis, an `align-items` Flexbox property"
        },
        {
          "name": "--margin-between-radios",
          "annotation": "prop",
          "docs": "Margin between the gr-radio children",
          "description": "Margin between the gr-radio children"
        },
        {
          "name": "--margin-between-radios-horizontal",
          "annotation": "prop",
          "docs": "Margin between the gr-radio children when layout is horizontal",
          "description": "Margin between the gr-radio children when layout is horizontal"
        }
      ],
      "slots": [
        {
          "name": "",
          "docs": "The default slot where radio controls are placed."
        },
        {
          "name": "invalid-text",
          "docs": "Invalid text tells a user how to fix the error. Alternatively, you can use the invalid-text prop."
        },
        {
          "name": "label",
          "docs": "The radio group label. Required for proper accessibility. Alternatively, you can use the label prop."
        }
      ],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/router/router.tsx",
      "encapsulation": "shadow",
      "tag": "stories-router",
      "name": "stories-router",
      "readme": "# stories-router\n\nThe stories-router is a component managing showing content in another components based on the browser's URL. It doent change DOM and only coordinates content in navigation outlets such as stories-nav, stories-tabs, and stories-router-outlet.\n",
      "description": "The stories-router is a component managing showing content in another components based on the browser's URL. It doent change DOM and only coordinates content in navigation outlets such as stories-nav, stories-tabs, and stories-router-outlet.",
      "docsTags": [],
      "usage": {},
      "properties": [],
      "attributes": [],
      "methods": [],
      "events": [],
      "cssProperties": [],
      "slots": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/row/row.tsx",
      "encapsulation": "shadow",
      "tag": "stories-row",
      "name": "stories-row",
      "readme": "# stories-row\n\nThe stories-row is a horizontal component of the grid system look after the columns are positioned properly.\n",
      "description": "The stories-row is a horizontal component of the grid system look after the columns are positioned properly.",
      "docsTags": [],
      "usage": {},
      "properties": [],
      "attributes": [],
      "methods": [],
      "events": [],
      "cssProperties": [],
      "slots": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/searchbar/searchbar.tsx",
      "encapsulation": "shadow",
      "tag": "stories-searchbar",
      "name": "stories-searchbar",
      "readme": "# stories-searchbar\n\nThe stories-searchbar is a text field with an icon that can be used to search through stories.\n",
      "description": "The stories-searchbar is a text field with an icon that can be used to search through stories.",
      "docsTags": [],
      "usage": {},
      "properties": [
        {
          "name": "cancelButtonIcon",
          "type": "string",
          "mutable": false,
          "attr": "cancel-button-icon",
          "reflectToAttr": false,
          "docs": "Set the cancel button icon. Only applies to `md` mode.\nDefaults to `\"arrow-back-sharp\"`.",
          "docsTags": [],
          "default": "'arrow-back-sharp'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Set the cancel button icon. Only applies to `md` mode.\nDefaults to `\"arrow-back-sharp\"`."
        },
        {
          "name": "clearIcon",
          "type": "string",
          "mutable": false,
          "attr": "clear-icon",
          "reflectToAttr": false,
          "docs": "Set the clear icon. Defaults to `\"close-circle\"` for `ios` and `\"close-sharp\"` for `md`.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "description": "Set the clear icon. Defaults to `\"close-circle\"` for `ios` and `\"close-sharp\"` for `md`."
        },
        {
          "name": "color",
          "type": "string",
          "mutable": false,
          "attr": "color",
          "reflectToAttr": true,
          "docs": "The color to use from your application's color palette.\nDefault options are: `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, and `\"dark\"`.\nFor more information on colors, see [theming](/docs/theming/basics).",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "description": "The color to use from your application's color palette.\nDefault options are: `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, and `\"dark\"`.\nFor more information on colors, see [theming](/docs/theming/basics)."
        },
        {
          "name": "debounce",
          "type": "number",
          "mutable": false,
          "attr": "debounce",
          "reflectToAttr": false,
          "docs": "Set the amount of time, in milliseconds, to wait to trigger the `ionChange` event after each keystroke. This also impacts form bindings such as `ngModel` or `v-model`.",
          "docsTags": [],
          "default": "250",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Set the amount of time, in milliseconds, to wait to trigger the `ionChange` event after each keystroke. This also impacts form bindings such as `ngModel` or `v-model`."
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "If `true`, the user cannot interact with the input.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "description": "If `true`, the user cannot interact with the input."
        },
        {
          "name": "inputmode",
          "type": "\"decimal\" | \"email\" | \"none\" | \"numeric\" | \"search\" | \"tel\" | \"text\" | \"url\"",
          "mutable": false,
          "attr": "inputmode",
          "reflectToAttr": false,
          "docs": "A hint to the browser for which keyboard to display.\nPossible values: `\"none\"`, `\"text\"`, `\"tel\"`, `\"url\"`,\n`\"email\"`, `\"numeric\"`, `\"decimal\"`, and `\"search\"`.",
          "docsTags": [],
          "values": [
            {
              "value": "decimal",
              "type": "string"
            },
            {
              "value": "email",
              "type": "string"
            },
            {
              "value": "none",
              "type": "string"
            },
            {
              "value": "numeric",
              "type": "string"
            },
            {
              "value": "search",
              "type": "string"
            },
            {
              "value": "tel",
              "type": "string"
            },
            {
              "value": "text",
              "type": "string"
            },
            {
              "value": "url",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "description": "A hint to the browser for which keyboard to display.\nPossible values: `\"none\"`, `\"text\"`, `\"tel\"`, `\"url\"`,\n`\"email\"`, `\"numeric\"`, `\"decimal\"`, and `\"search\"`."
        },
        {
          "name": "placeholder",
          "type": "string",
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "Set the input's placeholder.\n`placeholder` can accept either plaintext or HTML as a string.\nTo display characters normally reserved for HTML, they\nmust be escaped. For example `<Stories>` would become\n`&lt;Stories&gt;`",
          "docsTags": [],
          "default": "'Search'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Set the input's placeholder.\n`placeholder` can accept either plaintext or HTML as a string.\nTo display characters normally reserved for HTML, they\nmust be escaped. For example `<Stories>` would become\n`&lt;Stories&gt;`"
        },
        {
          "name": "searchIcon",
          "type": "string",
          "mutable": false,
          "attr": "search-icon",
          "reflectToAttr": false,
          "docs": "The icon to use as the search icon. Defaults to `\"search-outline\"` in\n`ios` mode and `\"search-sharp\"` in `md` mode.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "description": "The icon to use as the search icon. Defaults to `\"search-outline\"` in\n`ios` mode and `\"search-sharp\"` in `md` mode."
        },
        {
          "name": "showCancelButton",
          "type": "\"always\" | \"focus\" | \"never\"",
          "mutable": false,
          "attr": "show-cancel-button",
          "reflectToAttr": false,
          "docs": "Sets the behavior for the cancel button. Defaults to `\"never\"`.\nSetting to `\"focus\"` shows the cancel button on focus.\nSetting to `\"never\"` hides the cancel button.\nSetting to `\"always\"` shows the cancel button regardless\nof focus state.",
          "docsTags": [],
          "default": "'never'",
          "values": [
            {
              "value": "always",
              "type": "string"
            },
            {
              "value": "focus",
              "type": "string"
            },
            {
              "value": "never",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Sets the behavior for the cancel button. Defaults to `\"never\"`.\nSetting to `\"focus\"` shows the cancel button on focus.\nSetting to `\"never\"` hides the cancel button.\nSetting to `\"always\"` shows the cancel button regardless\nof focus state."
        },
        {
          "name": "showClearButton",
          "type": "\"always\" | \"focus\" | \"never\"",
          "mutable": false,
          "attr": "show-clear-button",
          "reflectToAttr": false,
          "docs": "Sets the behavior for the clear button. Defaults to `\"focus\"`.\nSetting to `\"focus\"` shows the clear button on focus if the\ninput is not empty.\nSetting to `\"never\"` hides the clear button.\nSetting to `\"always\"` shows the clear button regardless\nof focus state, but only if the input is not empty.",
          "docsTags": [],
          "default": "'always'",
          "values": [
            {
              "value": "always",
              "type": "string"
            },
            {
              "value": "focus",
              "type": "string"
            },
            {
              "value": "never",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Sets the behavior for the clear button. Defaults to `\"focus\"`.\nSetting to `\"focus\"` shows the clear button on focus if the\ninput is not empty.\nSetting to `\"never\"` hides the clear button.\nSetting to `\"always\"` shows the clear button regardless\nof focus state, but only if the input is not empty."
        },
        {
          "name": "type",
          "type": "\"email\" | \"number\" | \"password\" | \"search\" | \"tel\" | \"text\" | \"url\"",
          "mutable": false,
          "attr": "type",
          "reflectToAttr": false,
          "docs": "Set the type of the input.",
          "docsTags": [],
          "default": "'search'",
          "values": [
            {
              "value": "email",
              "type": "string"
            },
            {
              "value": "number",
              "type": "string"
            },
            {
              "value": "password",
              "type": "string"
            },
            {
              "value": "search",
              "type": "string"
            },
            {
              "value": "tel",
              "type": "string"
            },
            {
              "value": "text",
              "type": "string"
            },
            {
              "value": "url",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Set the type of the input."
        },
        {
          "name": "value",
          "type": "string",
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "the value of the searchbar.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "description": "the value of the searchbar."
        }
      ],
      "attributes": [
        {
          "name": "cancel-button-icon",
          "type": "string",
          "mutable": false,
          "attr": "cancel-button-icon",
          "reflectToAttr": false,
          "docs": "Set the cancel button icon. Only applies to `md` mode.\nDefaults to `\"arrow-back-sharp\"`.",
          "docsTags": [],
          "default": "'arrow-back-sharp'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "'arrow-back-sharp'",
          "description": "Set the cancel button icon. Only applies to `md` mode.\nDefaults to `\"arrow-back-sharp\"`."
        },
        {
          "name": "clear-icon",
          "type": "string",
          "mutable": false,
          "attr": "clear-icon",
          "reflectToAttr": false,
          "docs": "Set the clear icon. Defaults to `\"close-circle\"` for `ios` and `\"close-sharp\"` for `md`.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "description": "Set the clear icon. Defaults to `\"close-circle\"` for `ios` and `\"close-sharp\"` for `md`."
        },
        {
          "name": "color",
          "type": "string",
          "mutable": false,
          "attr": "color",
          "reflectToAttr": true,
          "docs": "The color to use from your application's color palette.\nDefault options are: `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, and `\"dark\"`.\nFor more information on colors, see [theming](/docs/theming/basics).",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "description": "The color to use from your application's color palette.\nDefault options are: `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, and `\"dark\"`.\nFor more information on colors, see [theming](/docs/theming/basics)."
        },
        {
          "name": "debounce",
          "type": "number",
          "mutable": false,
          "attr": "debounce",
          "reflectToAttr": false,
          "docs": "Set the amount of time, in milliseconds, to wait to trigger the `ionChange` event after each keystroke. This also impacts form bindings such as `ngModel` or `v-model`.",
          "docsTags": [],
          "default": "250",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "250",
          "description": "Set the amount of time, in milliseconds, to wait to trigger the `ionChange` event after each keystroke. This also impacts form bindings such as `ngModel` or `v-model`."
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "If `true`, the user cannot interact with the input.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "false",
          "description": "If `true`, the user cannot interact with the input."
        },
        {
          "name": "inputmode",
          "type": "\"decimal\" | \"email\" | \"none\" | \"numeric\" | \"search\" | \"tel\" | \"text\" | \"url\"",
          "mutable": false,
          "attr": "inputmode",
          "reflectToAttr": false,
          "docs": "A hint to the browser for which keyboard to display.\nPossible values: `\"none\"`, `\"text\"`, `\"tel\"`, `\"url\"`,\n`\"email\"`, `\"numeric\"`, `\"decimal\"`, and `\"search\"`.",
          "docsTags": [],
          "values": [
            {
              "value": "decimal",
              "type": "string"
            },
            {
              "value": "email",
              "type": "string"
            },
            {
              "value": "none",
              "type": "string"
            },
            {
              "value": "numeric",
              "type": "string"
            },
            {
              "value": "search",
              "type": "string"
            },
            {
              "value": "tel",
              "type": "string"
            },
            {
              "value": "text",
              "type": "string"
            },
            {
              "value": "url",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "description": "A hint to the browser for which keyboard to display.\nPossible values: `\"none\"`, `\"text\"`, `\"tel\"`, `\"url\"`,\n`\"email\"`, `\"numeric\"`, `\"decimal\"`, and `\"search\"`."
        },
        {
          "name": "placeholder",
          "type": "string",
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "Set the input's placeholder.\n`placeholder` can accept either plaintext or HTML as a string.\nTo display characters normally reserved for HTML, they\nmust be escaped. For example `<Stories>` would become\n`&lt;Stories&gt;`",
          "docsTags": [],
          "default": "'Search'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "'Search'",
          "description": "Set the input's placeholder.\n`placeholder` can accept either plaintext or HTML as a string.\nTo display characters normally reserved for HTML, they\nmust be escaped. For example `<Stories>` would become\n`&lt;Stories&gt;`"
        },
        {
          "name": "search-icon",
          "type": "string",
          "mutable": false,
          "attr": "search-icon",
          "reflectToAttr": false,
          "docs": "The icon to use as the search icon. Defaults to `\"search-outline\"` in\n`ios` mode and `\"search-sharp\"` in `md` mode.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "description": "The icon to use as the search icon. Defaults to `\"search-outline\"` in\n`ios` mode and `\"search-sharp\"` in `md` mode."
        },
        {
          "name": "show-cancel-button",
          "type": "\"always\" | \"focus\" | \"never\"",
          "mutable": false,
          "attr": "show-cancel-button",
          "reflectToAttr": false,
          "docs": "Sets the behavior for the cancel button. Defaults to `\"never\"`.\nSetting to `\"focus\"` shows the cancel button on focus.\nSetting to `\"never\"` hides the cancel button.\nSetting to `\"always\"` shows the cancel button regardless\nof focus state.",
          "docsTags": [],
          "default": "'never'",
          "values": [
            {
              "value": "always",
              "type": "string"
            },
            {
              "value": "focus",
              "type": "string"
            },
            {
              "value": "never",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "'never'",
          "description": "Sets the behavior for the cancel button. Defaults to `\"never\"`.\nSetting to `\"focus\"` shows the cancel button on focus.\nSetting to `\"never\"` hides the cancel button.\nSetting to `\"always\"` shows the cancel button regardless\nof focus state."
        },
        {
          "name": "show-clear-button",
          "type": "\"always\" | \"focus\" | \"never\"",
          "mutable": false,
          "attr": "show-clear-button",
          "reflectToAttr": false,
          "docs": "Sets the behavior for the clear button. Defaults to `\"focus\"`.\nSetting to `\"focus\"` shows the clear button on focus if the\ninput is not empty.\nSetting to `\"never\"` hides the clear button.\nSetting to `\"always\"` shows the clear button regardless\nof focus state, but only if the input is not empty.",
          "docsTags": [],
          "default": "'always'",
          "values": [
            {
              "value": "always",
              "type": "string"
            },
            {
              "value": "focus",
              "type": "string"
            },
            {
              "value": "never",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "'always'",
          "description": "Sets the behavior for the clear button. Defaults to `\"focus\"`.\nSetting to `\"focus\"` shows the clear button on focus if the\ninput is not empty.\nSetting to `\"never\"` hides the clear button.\nSetting to `\"always\"` shows the clear button regardless\nof focus state, but only if the input is not empty."
        },
        {
          "name": "type",
          "type": "\"email\" | \"number\" | \"password\" | \"search\" | \"tel\" | \"text\" | \"url\"",
          "mutable": false,
          "attr": "type",
          "reflectToAttr": false,
          "docs": "Set the type of the input.",
          "docsTags": [],
          "default": "'search'",
          "values": [
            {
              "value": "email",
              "type": "string"
            },
            {
              "value": "number",
              "type": "string"
            },
            {
              "value": "password",
              "type": "string"
            },
            {
              "value": "search",
              "type": "string"
            },
            {
              "value": "tel",
              "type": "string"
            },
            {
              "value": "text",
              "type": "string"
            },
            {
              "value": "url",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "'search'",
          "description": "Set the type of the input."
        },
        {
          "name": "value",
          "type": "string",
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "the value of the searchbar.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "defaultValue": "''",
          "description": "the value of the searchbar."
        }
      ],
      "methods": [
        {
          "name": "getInputElement",
          "returns": {
            "type": "Promise<HTMLInputElement>",
            "docs": ""
          },
          "signature": "getInputElement() => Promise<HTMLInputElement>",
          "parameters": [],
          "docs": "Returns the native `<input>` element used under the hood.",
          "docsTags": []
        },
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the specified `stories-searchbar`. Use this method instead of the global\n`input.focus()`.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "storiesBlur",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the input loses focus.",
          "docsTags": [],
          "name": "storiesBlur",
          "description": "Emitted when the input loses focus.",
          "type": "void"
        },
        {
          "event": "storiesCancel",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the cancel button is clicked.",
          "docsTags": [],
          "name": "storiesCancel",
          "description": "Emitted when the cancel button is clicked.",
          "type": "void"
        },
        {
          "event": "storiesChange",
          "detail": "SearchbarChangeEventDetail",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the value has changed.",
          "docsTags": [],
          "name": "storiesChange",
          "description": "Emitted when the value has changed.",
          "type": "SearchbarChangeEventDetail"
        },
        {
          "event": "storiesClear",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the clear input button is clicked.",
          "docsTags": [],
          "name": "storiesClear",
          "description": "Emitted when the clear input button is clicked.",
          "type": "void"
        },
        {
          "event": "storiesFocus",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the input has focus.",
          "docsTags": [],
          "name": "storiesFocus",
          "description": "Emitted when the input has focus.",
          "type": "void"
        },
        {
          "event": "storiesInput",
          "detail": "KeyboardEvent",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when a keyboard input occurred.",
          "docsTags": [],
          "name": "storiesInput",
          "description": "Emitted when a keyboard input occurred.",
          "type": "KeyboardEvent"
        }
      ],
      "cssProperties": [
        {
          "name": "--background",
          "annotation": "prop",
          "docs": "Background of the searchbar input",
          "description": "Background of the searchbar input"
        },
        {
          "name": "--border-radius",
          "annotation": "prop",
          "docs": "Border radius of the searchbar input",
          "description": "Border radius of the searchbar input"
        },
        {
          "name": "--box-shadow",
          "annotation": "prop",
          "docs": "Box shadow of the searchbar input",
          "description": "Box shadow of the searchbar input"
        },
        {
          "name": "--cancel-button-color",
          "annotation": "prop",
          "docs": "Color of the searchbar cancel button",
          "description": "Color of the searchbar cancel button"
        },
        {
          "name": "--clear-button-color",
          "annotation": "prop",
          "docs": "Color of the searchbar clear button",
          "description": "Color of the searchbar clear button"
        },
        {
          "name": "--color",
          "annotation": "prop",
          "docs": "Color of the searchbar text",
          "description": "Color of the searchbar text"
        },
        {
          "name": "--icon-color",
          "annotation": "prop",
          "docs": "Color of the searchbar icon",
          "description": "Color of the searchbar icon"
        },
        {
          "name": "--placeholder-color",
          "annotation": "prop",
          "docs": "Color of the searchbar placeholder",
          "description": "Color of the searchbar placeholder"
        },
        {
          "name": "--placeholder-font-style",
          "annotation": "prop",
          "docs": "Font style of the searchbar placeholder",
          "description": "Font style of the searchbar placeholder"
        },
        {
          "name": "--placeholder-font-weight",
          "annotation": "prop",
          "docs": "Font weight of the searchbar placeholder",
          "description": "Font weight of the searchbar placeholder"
        },
        {
          "name": "--placeholder-opacity",
          "annotation": "prop",
          "docs": "Opacity of the searchbar placeholder",
          "description": "Opacity of the searchbar placeholder"
        }
      ],
      "slots": [],
      "dependents": [],
      "dependencies": [
        "stories-icon"
      ],
      "dependencyGraph": {
        "stories-searchbar": [
          "stories-icon"
        ]
      }
    },
    {
      "filePath": "./src/components/select/select.tsx",
      "encapsulation": "shadow",
      "tag": "stories-select",
      "name": "stories-select",
      "readme": "# gr-select\n",
      "description": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "- The select's options in the form of menu items."
        },
        {
          "name": "slot",
          "text": "label - The select's label. Alternatively, you can use the label prop."
        },
        {
          "name": "slot",
          "text": "help-text - Help text that describes how to use the select. Alternatively, you can use the help-text prop."
        },
        {
          "name": "slot",
          "text": "invalid-text - Invalid text tells a user how to fix the error. Alternatively, you can use the invalid-text prop."
        }
      ],
      "usage": {},
      "properties": [
        {
          "name": "clearable",
          "type": "boolean",
          "mutable": false,
          "attr": "clearable",
          "reflectToAttr": false,
          "docs": "Set to true to add a clear button when the select is populated.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Set to true to add a clear button when the select is populated."
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Set to true to disable the select control.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Set to true to disable the select control."
        },
        {
          "name": "helpText",
          "type": "string",
          "mutable": false,
          "attr": "help-text",
          "reflectToAttr": false,
          "docs": "The select's help text. Alternatively, you can use the help-text slot.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "The select's help text. Alternatively, you can use the help-text slot."
        },
        {
          "name": "hoist",
          "type": "boolean",
          "mutable": false,
          "attr": "hoist",
          "reflectToAttr": false,
          "docs": "Enable this option to prevent the panel from being clipped when the component is placed inside a container with\n`overflow: auto|scroll`.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Enable this option to prevent the panel from being clipped when the component is placed inside a container with\n`overflow: auto|scroll`."
        },
        {
          "name": "invalid",
          "type": "boolean",
          "mutable": false,
          "attr": "invalid",
          "reflectToAttr": true,
          "docs": "Set to true to indicate this field is invalid. Will display the invalid text instead of the help text",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Set to true to indicate this field is invalid. Will display the invalid text instead of the help text"
        },
        {
          "name": "invalidText",
          "type": "string",
          "mutable": false,
          "attr": "invalid-text",
          "reflectToAttr": false,
          "docs": "The select's invalid text. Alternatively, you can use the invalid-text slot.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "The select's invalid text. Alternatively, you can use the invalid-text slot."
        },
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "The select's label. Alternatively, you can use the label slot.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "The select's label. Alternatively, you can use the label slot."
        },
        {
          "name": "maxTagsVisible",
          "type": "number",
          "mutable": false,
          "attr": "max-tags-visible",
          "reflectToAttr": false,
          "docs": "The maximum number of tags to show when `multiple` is true. After the maximum, \"+n\" will be shown to indicate the\nnumber of additional items that are selected. Set to -1 to remove the limit.",
          "docsTags": [],
          "default": "3",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false,
          "description": "The maximum number of tags to show when `multiple` is true. After the maximum, \"+n\" will be shown to indicate the\nnumber of additional items that are selected. Set to -1 to remove the limit."
        },
        {
          "name": "multiple",
          "type": "boolean",
          "mutable": false,
          "attr": "multiple",
          "reflectToAttr": false,
          "docs": "Set to true to enable multiselect.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Set to true to enable multiselect."
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "The select's name.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "The select's name."
        },
        {
          "name": "pill",
          "type": "boolean",
          "mutable": false,
          "attr": "pill",
          "reflectToAttr": false,
          "docs": "Set to true to draw a pill-style select with rounded edges.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Set to true to draw a pill-style select with rounded edges."
        },
        {
          "name": "placeholder",
          "type": "string",
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "The select's placeholder text.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "The select's placeholder text."
        },
        {
          "name": "requiredIndicator",
          "type": "boolean",
          "mutable": false,
          "attr": "required-indicator",
          "reflectToAttr": false,
          "docs": "Set to true to display a required indicator, adds an asterisk to label",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Set to true to display a required indicator, adds an asterisk to label"
        },
        {
          "name": "size",
          "type": "\"large\" | \"medium\" | \"small\"",
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "The select's size.",
          "docsTags": [],
          "default": "'medium'",
          "values": [
            {
              "value": "large",
              "type": "string"
            },
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "small",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "The select's size."
        },
        {
          "name": "value",
          "type": "string | string[]",
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The value of the control. This will be a string or an array depending on `multiple`.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            },
            {
              "type": "string[]"
            }
          ],
          "optional": false,
          "required": false,
          "description": "The value of the control. This will be a string or an array depending on `multiple`."
        }
      ],
      "attributes": [
        {
          "name": "clearable",
          "type": "boolean",
          "mutable": false,
          "attr": "clearable",
          "reflectToAttr": false,
          "docs": "Set to true to add a clear button when the select is populated.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "false",
          "description": "Set to true to add a clear button when the select is populated."
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Set to true to disable the select control.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "false",
          "description": "Set to true to disable the select control."
        },
        {
          "name": "help-text",
          "type": "string",
          "mutable": false,
          "attr": "help-text",
          "reflectToAttr": false,
          "docs": "The select's help text. Alternatively, you can use the help-text slot.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "''",
          "description": "The select's help text. Alternatively, you can use the help-text slot."
        },
        {
          "name": "hoist",
          "type": "boolean",
          "mutable": false,
          "attr": "hoist",
          "reflectToAttr": false,
          "docs": "Enable this option to prevent the panel from being clipped when the component is placed inside a container with\n`overflow: auto|scroll`.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "false",
          "description": "Enable this option to prevent the panel from being clipped when the component is placed inside a container with\n`overflow: auto|scroll`."
        },
        {
          "name": "invalid",
          "type": "boolean",
          "mutable": false,
          "attr": "invalid",
          "reflectToAttr": true,
          "docs": "Set to true to indicate this field is invalid. Will display the invalid text instead of the help text",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "false",
          "description": "Set to true to indicate this field is invalid. Will display the invalid text instead of the help text"
        },
        {
          "name": "invalid-text",
          "type": "string",
          "mutable": false,
          "attr": "invalid-text",
          "reflectToAttr": false,
          "docs": "The select's invalid text. Alternatively, you can use the invalid-text slot.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "''",
          "description": "The select's invalid text. Alternatively, you can use the invalid-text slot."
        },
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "The select's label. Alternatively, you can use the label slot.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "''",
          "description": "The select's label. Alternatively, you can use the label slot."
        },
        {
          "name": "max-tags-visible",
          "type": "number",
          "mutable": false,
          "attr": "max-tags-visible",
          "reflectToAttr": false,
          "docs": "The maximum number of tags to show when `multiple` is true. After the maximum, \"+n\" will be shown to indicate the\nnumber of additional items that are selected. Set to -1 to remove the limit.",
          "docsTags": [],
          "default": "3",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "3",
          "description": "The maximum number of tags to show when `multiple` is true. After the maximum, \"+n\" will be shown to indicate the\nnumber of additional items that are selected. Set to -1 to remove the limit."
        },
        {
          "name": "multiple",
          "type": "boolean",
          "mutable": false,
          "attr": "multiple",
          "reflectToAttr": false,
          "docs": "Set to true to enable multiselect.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "false",
          "description": "Set to true to enable multiselect."
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "The select's name.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "''",
          "description": "The select's name."
        },
        {
          "name": "pill",
          "type": "boolean",
          "mutable": false,
          "attr": "pill",
          "reflectToAttr": false,
          "docs": "Set to true to draw a pill-style select with rounded edges.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "false",
          "description": "Set to true to draw a pill-style select with rounded edges."
        },
        {
          "name": "placeholder",
          "type": "string",
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "The select's placeholder text.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "''",
          "description": "The select's placeholder text."
        },
        {
          "name": "required-indicator",
          "type": "boolean",
          "mutable": false,
          "attr": "required-indicator",
          "reflectToAttr": false,
          "docs": "Set to true to display a required indicator, adds an asterisk to label",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "false",
          "description": "Set to true to display a required indicator, adds an asterisk to label"
        },
        {
          "name": "size",
          "type": "\"large\" | \"medium\" | \"small\"",
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "The select's size.",
          "docsTags": [],
          "default": "'medium'",
          "values": [
            {
              "value": "large",
              "type": "string"
            },
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "small",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "'medium'",
          "description": "The select's size."
        },
        {
          "name": "value",
          "type": "string | string[]",
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The value of the control. This will be a string or an array depending on `multiple`.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            },
            {
              "type": "string[]"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "''",
          "description": "The value of the control. This will be a string or an array depending on `multiple`."
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the select.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "stories-blur",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the control loses focus.",
          "docsTags": [],
          "name": "stories-blur",
          "description": "Emitted when the control loses focus.",
          "type": "void"
        },
        {
          "event": "stories-change",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the control's value changes.",
          "docsTags": [],
          "name": "stories-change",
          "description": "Emitted when the control's value changes.",
          "type": "void"
        },
        {
          "event": "stories-focus",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the control gains focus.",
          "docsTags": [],
          "name": "stories-focus",
          "description": "Emitted when the control gains focus.",
          "type": "void"
        }
      ],
      "cssProperties": [
        {
          "name": "--background-color",
          "annotation": "prop",
          "docs": "Background color of the select",
          "description": "Background color of the select"
        },
        {
          "name": "--background-color-focus",
          "annotation": "prop",
          "docs": "Background color of the select on focus",
          "description": "Background color of the select on focus"
        },
        {
          "name": "--background-color-hover",
          "annotation": "prop",
          "docs": "Background color of the select on hover",
          "description": "Background color of the select on hover"
        },
        {
          "name": "--background-color-invalid",
          "annotation": "prop",
          "docs": "Background color of the select when invalid",
          "description": "Background color of the select when invalid"
        },
        {
          "name": "--background-color-invalid-hover",
          "annotation": "prop",
          "docs": "Background color of the select when invalid on hover",
          "description": "Background color of the select when invalid on hover"
        },
        {
          "name": "--border-color",
          "annotation": "prop",
          "docs": "Border color of the select",
          "description": "Border color of the select"
        },
        {
          "name": "--border-color-focus",
          "annotation": "prop",
          "docs": "Border color of the select on focus",
          "description": "Border color of the select on focus"
        },
        {
          "name": "--border-color-hover",
          "annotation": "prop",
          "docs": "Border color of the select on hover",
          "description": "Border color of the select on hover"
        },
        {
          "name": "--border-color-invalid",
          "annotation": "prop",
          "docs": "Border color of the select when invalid",
          "description": "Border color of the select when invalid"
        },
        {
          "name": "--border-color-invalid-hover",
          "annotation": "prop",
          "docs": "Border color of the select when invalid on hover",
          "description": "Border color of the select when invalid on hover"
        },
        {
          "name": "--border-radius",
          "annotation": "prop",
          "docs": "Border radius of the select",
          "description": "Border radius of the select"
        },
        {
          "name": "--caret-margin-end",
          "annotation": "prop",
          "docs": "Right margin of the caret (will be left margin when we support right-to-left direction)",
          "description": "Right margin of the caret (will be left margin when we support right-to-left direction)"
        },
        {
          "name": "--clear-icon-margin-end",
          "annotation": "prop",
          "docs": "Right margin of the clear icon (will be left margin when we support right-to-left direction)",
          "description": "Right margin of the clear icon (will be left margin when we support right-to-left direction)"
        },
        {
          "name": "--color",
          "annotation": "prop",
          "docs": "Text color of the select",
          "description": "Text color of the select"
        },
        {
          "name": "--focus-ring",
          "annotation": "prop",
          "docs": "The focus ring style to use when the control receives focus, a `box-shadow` property.",
          "description": "The focus ring style to use when the control receives focus, a `box-shadow` property."
        },
        {
          "name": "--font-size",
          "annotation": "prop",
          "docs": "Font size of the select",
          "description": "Font size of the select"
        },
        {
          "name": "--font-weight",
          "annotation": "prop",
          "docs": "Font weight of the select",
          "description": "Font weight of the select"
        },
        {
          "name": "--label-margin-end",
          "annotation": "prop",
          "docs": "Right margin of the label (will be left margin when we support right-to-left direction)",
          "description": "Right margin of the label (will be left margin when we support right-to-left direction)"
        },
        {
          "name": "--label-margin-start",
          "annotation": "prop",
          "docs": "Left margin of the label (will be right margin when we support right-to-left direction)",
          "description": "Left margin of the label (will be right margin when we support right-to-left direction)"
        },
        {
          "name": "--min-height",
          "annotation": "prop",
          "docs": "Minimum height of the select",
          "description": "Minimum height of the select"
        },
        {
          "name": "--placeholder-color",
          "annotation": "prop",
          "docs": "Text color of the placeholder",
          "description": "Text color of the placeholder"
        },
        {
          "name": "--tags-margin-end",
          "annotation": "prop",
          "docs": "Right margin of the tags (will be left margin when we support right-to-left direction)",
          "description": "Right margin of the tags (will be left margin when we support right-to-left direction)"
        },
        {
          "name": "--tags-padding-bottom",
          "annotation": "prop",
          "docs": "Bottom padding of the tags",
          "description": "Bottom padding of the tags"
        },
        {
          "name": "--tags-padding-top",
          "annotation": "prop",
          "docs": "Top padding of the tags",
          "description": "Top padding of the tags"
        }
      ],
      "slots": [
        {
          "name": "",
          "docs": "The select's options in the form of menu items."
        },
        {
          "name": "help-text",
          "docs": "Help text that describes how to use the select. Alternatively, you can use the help-text prop."
        },
        {
          "name": "invalid-text",
          "docs": "Invalid text tells a user how to fix the error. Alternatively, you can use the invalid-text prop."
        },
        {
          "name": "label",
          "docs": "The select's label. Alternatively, you can use the label prop."
        }
      ],
      "dependents": [],
      "dependencies": [
        "stories-tag",
        "stories-dropdown",
        "stories-menu"
      ],
      "dependencyGraph": {
        "stories-select": [
          "stories-tag",
          "stories-dropdown",
          "stories-menu"
        ],
        "stories-tag": [
          "stories-button"
        ]
      }
    },
    {
      "filePath": "./src/components/sidebar/sidebar.tsx",
      "encapsulation": "shadow",
      "tag": "stories-sidebar",
      "name": "stories-sidebar",
      "readme": "# stories-sidebar\n\nThe stories-sidebar displays collection of names of stories. Every story's name is the link your can click to navigate to story.\n",
      "description": "The stories-sidebar displays collection of names of stories. Every story's name is the link your can click to navigate to story.",
      "docsTags": [],
      "usage": {},
      "properties": [],
      "attributes": [],
      "methods": [],
      "events": [],
      "cssProperties": [],
      "slots": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/split-pane/split-pane.tsx",
      "encapsulation": "shadow",
      "tag": "stories-split-pane",
      "name": "stories-split-pane",
      "readme": "# stories-split-panel\n\nThe stories-split-panel is a component to split content vertically or horizontally.\n",
      "description": "The stories-split-panel is a component to split content vertically or horizontally.",
      "docsTags": [],
      "usage": {},
      "properties": [
        {
          "name": "defaultSize",
          "type": "number",
          "mutable": false,
          "attr": "default-size",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false,
          "description": ""
        },
        {
          "name": "isResizing",
          "type": "boolean",
          "mutable": true,
          "attr": "resizing",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "description": ""
        },
        {
          "name": "minSize",
          "type": "number",
          "mutable": false,
          "attr": "min-size",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false,
          "description": ""
        },
        {
          "name": "split",
          "type": "\"horizontal\" | \"vertical\"",
          "mutable": false,
          "attr": "split",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "value": "horizontal",
              "type": "string"
            },
            {
              "value": "vertical",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": ""
        }
      ],
      "attributes": [
        {
          "name": "default-size",
          "type": "number",
          "mutable": false,
          "attr": "default-size",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "0",
          "description": ""
        },
        {
          "name": "resizing",
          "type": "boolean",
          "mutable": true,
          "attr": "resizing",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "description": ""
        },
        {
          "name": "min-size",
          "type": "number",
          "mutable": false,
          "attr": "min-size",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "0",
          "description": ""
        },
        {
          "name": "split",
          "type": "\"horizontal\" | \"vertical\"",
          "mutable": false,
          "attr": "split",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "value": "horizontal",
              "type": "string"
            },
            {
              "value": "vertical",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": ""
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "storiesSizeChange",
          "detail": "number",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": [],
          "name": "storiesSizeChange",
          "description": "",
          "type": "number"
        }
      ],
      "cssProperties": [],
      "slots": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/tab/tab.tsx",
      "encapsulation": "shadow",
      "tag": "stories-tab",
      "name": "stories-tab",
      "readme": "# stories-tab\n\nThe stories-tab is a child component of a stories-tab. \n\n> Note: This component should only be used with vanilla or Stencil JavaScript projects. For Angular, React, and Vue apps you do not need to use `stories-tab` to declare your tab components.\n\nSee the [stories-tabs](../tabs) for configuration details.\n",
      "description": "The stories-tab is a child component of a stories-tab. \n\n> Note: This component should only be used with vanilla or Stencil JavaScript projects. For Angular, React, and Vue apps you do not need to use `stories-tab` to declare your tab components.\n\nSee the [stories-tabs](../tabs) for configuration details.",
      "docsTags": [],
      "usage": {},
      "properties": [
        {
          "name": "tab",
          "type": "string",
          "mutable": false,
          "attr": "tab",
          "reflectToAttr": false,
          "docs": "A tab id must be provided for each `stories-tab`. It's used internally to reference\nthe selected tab or by the router to switch between them.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true,
          "description": "A tab id must be provided for each `stories-tab`. It's used internally to reference\nthe selected tab or by the router to switch between them."
        }
      ],
      "attributes": [
        {
          "name": "tab",
          "type": "string",
          "mutable": false,
          "attr": "tab",
          "reflectToAttr": false,
          "docs": "A tab id must be provided for each `stories-tab`. It's used internally to reference\nthe selected tab or by the router to switch between them.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true,
          "description": "A tab id must be provided for each `stories-tab`. It's used internally to reference\nthe selected tab or by the router to switch between them."
        }
      ],
      "methods": [],
      "events": [],
      "cssProperties": [],
      "slots": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/tab-bar/tab-bar.tsx",
      "encapsulation": "shadow",
      "tag": "stories-tab-bar",
      "name": "stories-tab-bar",
      "readme": "# stories-tab-bar\n\nThe stories-tab-bar is a component that contains a set of [stories-tab-button's](../tab-button). Put the stories-tab-bar in the [stories-tabs](../tabs) to organize communication with every [stories-tab](../tab).\n",
      "description": "The stories-tab-bar is a component that contains a set of [stories-tab-button's](../tab-button). Put the stories-tab-bar in the [stories-tabs](../tabs) to organize communication with every [stories-tab](../tab).",
      "docsTags": [],
      "usage": {},
      "properties": [
        {
          "name": "color",
          "type": "string",
          "mutable": false,
          "attr": "color",
          "reflectToAttr": true,
          "docs": "The color to use from your application's color palette.\nDefault options are: `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, and `\"dark\"`.\nFor more information on colors, see [theming](/docs/theming/basics).",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "description": "The color to use from your application's color palette.\nDefault options are: `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, and `\"dark\"`.\nFor more information on colors, see [theming](/docs/theming/basics)."
        },
        {
          "name": "selectedTab",
          "type": "string",
          "mutable": false,
          "attr": "selected-tab",
          "reflectToAttr": false,
          "docs": "The selected tab component",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "description": "The selected tab component"
        }
      ],
      "attributes": [
        {
          "name": "color",
          "type": "string",
          "mutable": false,
          "attr": "color",
          "reflectToAttr": true,
          "docs": "The color to use from your application's color palette.\nDefault options are: `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, and `\"dark\"`.\nFor more information on colors, see [theming](/docs/theming/basics).",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "description": "The color to use from your application's color palette.\nDefault options are: `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, and `\"dark\"`.\nFor more information on colors, see [theming](/docs/theming/basics)."
        },
        {
          "name": "selected-tab",
          "type": "string",
          "mutable": false,
          "attr": "selected-tab",
          "reflectToAttr": false,
          "docs": "The selected tab component",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "description": "The selected tab component"
        }
      ],
      "methods": [],
      "events": [],
      "cssProperties": [
        {
          "name": "--background",
          "annotation": "prop",
          "docs": "Background of the tab bar",
          "description": "Background of the tab bar"
        },
        {
          "name": "--border",
          "annotation": "prop",
          "docs": "Border of the tab bar",
          "description": "Border of the tab bar"
        },
        {
          "name": "--color",
          "annotation": "prop",
          "docs": "Color of the tab bar",
          "description": "Color of the tab bar"
        }
      ],
      "slots": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/tab-button/tab-button.tsx",
      "encapsulation": "shadow",
      "tag": "stories-tab-button",
      "name": "stories-tab-button",
      "readme": "# stories-tab-button\n\nThe stories-tab-button is a component that is placed inside of a [stories-tab-bar](../tab-bar). You can change the layout of the text and icon in the tab bar.\n\nSee the [stories-tabs](../tabs) documentation for details on configuring tabs.\n",
      "description": "The stories-tab-button is a component that is placed inside of a [stories-tab-bar](../tab-bar). You can change the layout of the text and icon in the tab bar.\n\nSee the [stories-tabs](../tabs) documentation for details on configuring tabs.",
      "docsTags": [],
      "usage": {},
      "properties": [
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "If `true`, the user cannot interact with the tab button.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "description": "If `true`, the user cannot interact with the tab button."
        },
        {
          "name": "layout",
          "type": "\"icon-bottom\" | \"icon-end\" | \"icon-hide\" | \"icon-start\" | \"icon-top\" | \"label-hide\"",
          "mutable": true,
          "attr": "layout",
          "reflectToAttr": false,
          "docs": "Set the layout of the text and icon in the tab bar.\nIt defaults to `'icon-start'`.",
          "docsTags": [],
          "default": "'icon-start'",
          "values": [
            {
              "value": "icon-bottom",
              "type": "string"
            },
            {
              "value": "icon-end",
              "type": "string"
            },
            {
              "value": "icon-hide",
              "type": "string"
            },
            {
              "value": "icon-start",
              "type": "string"
            },
            {
              "value": "icon-top",
              "type": "string"
            },
            {
              "value": "label-hide",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "description": "Set the layout of the text and icon in the tab bar.\nIt defaults to `'icon-start'`."
        },
        {
          "name": "selected",
          "type": "boolean",
          "mutable": true,
          "attr": "selected",
          "reflectToAttr": false,
          "docs": "The selected tab component",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "description": "The selected tab component"
        },
        {
          "name": "tab",
          "type": "string",
          "mutable": false,
          "attr": "tab",
          "reflectToAttr": false,
          "docs": "A tab id must be provided for each `stories-tab`. It's used internally to reference\nthe selected tab or by the router to switch between them.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "description": "A tab id must be provided for each `stories-tab`. It's used internally to reference\nthe selected tab or by the router to switch between them."
        }
      ],
      "attributes": [
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "If `true`, the user cannot interact with the tab button.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "false",
          "description": "If `true`, the user cannot interact with the tab button."
        },
        {
          "name": "layout",
          "type": "\"icon-bottom\" | \"icon-end\" | \"icon-hide\" | \"icon-start\" | \"icon-top\" | \"label-hide\"",
          "mutable": true,
          "attr": "layout",
          "reflectToAttr": false,
          "docs": "Set the layout of the text and icon in the tab bar.\nIt defaults to `'icon-start'`.",
          "docsTags": [],
          "default": "'icon-start'",
          "values": [
            {
              "value": "icon-bottom",
              "type": "string"
            },
            {
              "value": "icon-end",
              "type": "string"
            },
            {
              "value": "icon-hide",
              "type": "string"
            },
            {
              "value": "icon-start",
              "type": "string"
            },
            {
              "value": "icon-top",
              "type": "string"
            },
            {
              "value": "label-hide",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "defaultValue": "'icon-start'",
          "description": "Set the layout of the text and icon in the tab bar.\nIt defaults to `'icon-start'`."
        },
        {
          "name": "selected",
          "type": "boolean",
          "mutable": true,
          "attr": "selected",
          "reflectToAttr": false,
          "docs": "The selected tab component",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "false",
          "description": "The selected tab component"
        },
        {
          "name": "tab",
          "type": "string",
          "mutable": false,
          "attr": "tab",
          "reflectToAttr": false,
          "docs": "A tab id must be provided for each `stories-tab`. It's used internally to reference\nthe selected tab or by the router to switch between them.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "description": "A tab id must be provided for each `stories-tab`. It's used internally to reference\nthe selected tab or by the router to switch between them."
        }
      ],
      "methods": [],
      "events": [],
      "cssProperties": [
        {
          "name": "--background",
          "annotation": "prop",
          "docs": "Background of the tab button",
          "description": "Background of the tab button"
        },
        {
          "name": "--background-focused",
          "annotation": "prop",
          "docs": "Background of the tab button when focused with the tab key",
          "description": "Background of the tab button when focused with the tab key"
        },
        {
          "name": "--background-focused-opacity",
          "annotation": "prop",
          "docs": "Opacity of the tab button background when focused with the tab key",
          "description": "Opacity of the tab button background when focused with the tab key"
        },
        {
          "name": "--color",
          "annotation": "prop",
          "docs": "Color of the tab button",
          "description": "Color of the tab button"
        },
        {
          "name": "--color-focused",
          "annotation": "prop",
          "docs": "Color of the tab button when focused with the tab key",
          "description": "Color of the tab button when focused with the tab key"
        },
        {
          "name": "--color-selected",
          "annotation": "prop",
          "docs": "Color of the selected tab button",
          "description": "Color of the selected tab button"
        },
        {
          "name": "--padding-bottom",
          "annotation": "prop",
          "docs": "Bottom padding of the tab button",
          "description": "Bottom padding of the tab button"
        },
        {
          "name": "--padding-end",
          "annotation": "prop",
          "docs": "Right padding if direction is left-to-right, and left padding if direction is right-to-left of the tab button",
          "description": "Right padding if direction is left-to-right, and left padding if direction is right-to-left of the tab button"
        },
        {
          "name": "--padding-start",
          "annotation": "prop",
          "docs": "Left padding if direction is left-to-right, and right padding if direction is right-to-left of the tab button",
          "description": "Left padding if direction is left-to-right, and right padding if direction is right-to-left of the tab button"
        },
        {
          "name": "--padding-top",
          "annotation": "prop",
          "docs": "Top padding of the tab button",
          "description": "Top padding of the tab button"
        }
      ],
      "slots": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/tabs/tabs.tsx",
      "encapsulation": "shadow",
      "tag": "stories-tabs",
      "name": "stories-tabs",
      "readme": "# stories-tabs\n\nThe stories-tabs is a container works as a router outlet in order to handle navigation. It does not provide any UI feedback or mechanism to switch between tabs. In order to do so, an [stories-tab-bar](../tab-bar) should be provided as a direct child of `stories-tabs`.\n",
      "description": "The stories-tabs is a container works as a router outlet in order to handle navigation. It does not provide any UI feedback or mechanism to switch between tabs. In order to do so, an [stories-tab-bar](../tab-bar) should be provided as a direct child of `stories-tabs`.",
      "docsTags": [],
      "usage": {},
      "properties": [],
      "attributes": [],
      "methods": [
        {
          "name": "getSelected",
          "returns": {
            "type": "Promise<string>",
            "docs": ""
          },
          "signature": "getSelected() => Promise<string | undefined>",
          "parameters": [],
          "docs": "Get the currently selected tab.",
          "docsTags": []
        },
        {
          "name": "getTab",
          "returns": {
            "type": "Promise<HTMLStoriesTabElement>",
            "docs": ""
          },
          "signature": "getTab(tab: string | HTMLStoriesTabElement) => Promise<HTMLStoriesTabElement | undefined>",
          "parameters": [],
          "docs": "Get a specific tab by the value of its `tab` property or an element reference.",
          "docsTags": [
            {
              "name": "param",
              "text": "tab The tab instance to select. If passed a string, it should be the value of the tab's `tab` property."
            }
          ]
        },
        {
          "name": "select",
          "returns": {
            "type": "Promise<boolean>",
            "docs": ""
          },
          "signature": "select(tab: string | HTMLStoriesTabElement) => Promise<boolean>",
          "parameters": [],
          "docs": "Select a tab by the value of its `tab` property or an element reference.",
          "docsTags": [
            {
              "name": "param",
              "text": "tab The tab instance to select. If passed a string, it should be the value of the tab's `tab` property."
            }
          ]
        }
      ],
      "events": [],
      "cssProperties": [],
      "slots": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/tag/tag.tsx",
      "encapsulation": "shadow",
      "tag": "stories-tag",
      "name": "stories-tag",
      "readme": "# gr-tag\n",
      "description": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "- The tag's content."
        }
      ],
      "usage": {},
      "properties": [
        {
          "name": "clearable",
          "type": "boolean",
          "mutable": false,
          "attr": "clearable",
          "reflectToAttr": true,
          "docs": "Set to true to make the tag clearable.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Set to true to make the tag clearable."
        },
        {
          "name": "pill",
          "type": "boolean",
          "mutable": false,
          "attr": "pill",
          "reflectToAttr": true,
          "docs": "Set to true to draw a pill-style tag with rounded edges.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Set to true to draw a pill-style tag with rounded edges."
        },
        {
          "name": "size",
          "type": "\"large\" | \"medium\" | \"small\"",
          "mutable": false,
          "attr": "size",
          "reflectToAttr": true,
          "docs": "The tag's size.",
          "docsTags": [],
          "default": "'medium'",
          "values": [
            {
              "value": "large",
              "type": "string"
            },
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "small",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "The tag's size."
        },
        {
          "name": "type",
          "type": "\"danger\" | \"info\" | \"primary\" | \"success\" | \"warning\"",
          "mutable": false,
          "attr": "type",
          "reflectToAttr": true,
          "docs": "The tag's type.",
          "docsTags": [],
          "default": "'primary'",
          "values": [
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "info",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "The tag's type."
        }
      ],
      "attributes": [
        {
          "name": "clearable",
          "type": "boolean",
          "mutable": false,
          "attr": "clearable",
          "reflectToAttr": true,
          "docs": "Set to true to make the tag clearable.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "false",
          "description": "Set to true to make the tag clearable."
        },
        {
          "name": "pill",
          "type": "boolean",
          "mutable": false,
          "attr": "pill",
          "reflectToAttr": true,
          "docs": "Set to true to draw a pill-style tag with rounded edges.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "false",
          "description": "Set to true to draw a pill-style tag with rounded edges."
        },
        {
          "name": "size",
          "type": "\"large\" | \"medium\" | \"small\"",
          "mutable": false,
          "attr": "size",
          "reflectToAttr": true,
          "docs": "The tag's size.",
          "docsTags": [],
          "default": "'medium'",
          "values": [
            {
              "value": "large",
              "type": "string"
            },
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "small",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "'medium'",
          "description": "The tag's size."
        },
        {
          "name": "type",
          "type": "\"danger\" | \"info\" | \"primary\" | \"success\" | \"warning\"",
          "mutable": false,
          "attr": "type",
          "reflectToAttr": true,
          "docs": "The tag's type.",
          "docsTags": [],
          "default": "'primary'",
          "values": [
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "info",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "'primary'",
          "description": "The tag's type."
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "stories-clear",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the clear button is activated.",
          "docsTags": [],
          "name": "stories-clear",
          "description": "Emitted when the clear button is activated.",
          "type": "void"
        }
      ],
      "cssProperties": [
        {
          "name": "--background-color",
          "annotation": "prop",
          "docs": "Background color of the tag",
          "description": "Background color of the tag"
        },
        {
          "name": "--border-color",
          "annotation": "prop",
          "docs": "Border color of the tag",
          "description": "Border color of the tag"
        },
        {
          "name": "--border-radius",
          "annotation": "prop",
          "docs": "Border radius of the tag",
          "description": "Border radius of the tag"
        },
        {
          "name": "--border-style",
          "annotation": "prop",
          "docs": "Border style of the tag",
          "description": "Border style of the tag"
        },
        {
          "name": "--border-width",
          "annotation": "prop",
          "docs": "Border width of the tag",
          "description": "Border width of the tag"
        },
        {
          "name": "--clear-color",
          "annotation": "prop",
          "docs": "Color of the clear icon",
          "description": "Color of the clear icon"
        },
        {
          "name": "--clear-color-hover",
          "annotation": "prop",
          "docs": "Color of the clear icon on hover",
          "description": "Color of the clear icon on hover"
        },
        {
          "name": "--clear-margin-left",
          "annotation": "prop",
          "docs": "Margin left of the clear icon",
          "description": "Margin left of the clear icon"
        },
        {
          "name": "--clear-margin-right",
          "annotation": "prop",
          "docs": "Margin right of the clear icon",
          "description": "Margin right of the clear icon"
        },
        {
          "name": "--color",
          "annotation": "prop",
          "docs": "Text color of the tag",
          "description": "Text color of the tag"
        },
        {
          "name": "--font-size",
          "annotation": "prop",
          "docs": "Font size of the tag",
          "description": "Font size of the tag"
        },
        {
          "name": "--height",
          "annotation": "prop",
          "docs": "Height of the tag",
          "description": "Height of the tag"
        },
        {
          "name": "--line-height",
          "annotation": "prop",
          "docs": "Line height of the tag",
          "description": "Line height of the tag"
        },
        {
          "name": "--padding-bottom",
          "annotation": "prop",
          "docs": "Bottom padding of the tag",
          "description": "Bottom padding of the tag"
        },
        {
          "name": "--padding-end",
          "annotation": "prop",
          "docs": "Right padding of the tag (will be left padding when we support right-to-left direction)",
          "description": "Right padding of the tag (will be left padding when we support right-to-left direction)"
        },
        {
          "name": "--padding-start",
          "annotation": "prop",
          "docs": "Left padding of the tag (will be right padding when we support right-to-left direction)",
          "description": "Left padding of the tag (will be right padding when we support right-to-left direction)"
        },
        {
          "name": "--padding-top",
          "annotation": "prop",
          "docs": "Top padding of the tag",
          "description": "Top padding of the tag"
        }
      ],
      "slots": [
        {
          "name": "",
          "docs": "The tag's content."
        }
      ],
      "dependents": [
        "stories-select"
      ],
      "dependencies": [
        "stories-button"
      ],
      "dependencyGraph": {
        "stories-tag": [
          "stories-button"
        ],
        "stories-select": [
          "stories-tag"
        ]
      }
    },
    {
      "filePath": "./src/components/textarea/textarea.tsx",
      "encapsulation": "shadow",
      "tag": "stories-textarea",
      "name": "stories-textarea",
      "readme": "# gr-textarea\n",
      "description": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "label - The textarea's label. Alternatively, you can use the label prop."
        },
        {
          "name": "slot",
          "text": "help-text - Help text that describes how to use the textarea."
        },
        {
          "name": "slot",
          "text": "invalid-text - Invalid text tells a user how to fix the error. Alternatively, you can use the invalid-text prop."
        }
      ],
      "usage": {},
      "properties": [
        {
          "name": "autocapitalize",
          "type": "string",
          "mutable": false,
          "attr": "autocapitalize",
          "reflectToAttr": false,
          "docs": "Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user.\nAvailable options: `\"off\"`, `\"none\"`, `\"on\"`, `\"sentences\"`, `\"words\"`, `\"characters\"`.",
          "docsTags": [],
          "default": "'off'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user.\nAvailable options: `\"off\"`, `\"none\"`, `\"on\"`, `\"sentences\"`, `\"words\"`, `\"characters\"`."
        },
        {
          "name": "autocorrect",
          "type": "\"off\" | \"on\"",
          "mutable": false,
          "attr": "autocorrect",
          "reflectToAttr": false,
          "docs": "Whether auto correction should be enabled when the user is entering/editing the text value.",
          "docsTags": [],
          "default": "'off'",
          "values": [
            {
              "value": "off",
              "type": "string"
            },
            {
              "value": "on",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Whether auto correction should be enabled when the user is entering/editing the text value."
        },
        {
          "name": "autofocus",
          "type": "boolean",
          "mutable": false,
          "attr": "autofocus",
          "reflectToAttr": false,
          "docs": "This Boolean attribute lets you specify that a form control should have input focus when the page loads.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "description": "This Boolean attribute lets you specify that a form control should have input focus when the page loads."
        },
        {
          "name": "debounce",
          "type": "number",
          "mutable": false,
          "attr": "debounce",
          "reflectToAttr": false,
          "docs": "Set the amount of time, in milliseconds, to wait to trigger the `stories-change` event after each keystroke. This also impacts form bindings such as `ngModel` or `v-model`.",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Set the amount of time, in milliseconds, to wait to trigger the `stories-change` event after each keystroke. This also impacts form bindings such as `ngModel` or `v-model`."
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "Set to true to disable the textarea.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Set to true to disable the textarea."
        },
        {
          "name": "enterkeyhint",
          "type": "\"done\" | \"enter\" | \"go\" | \"next\" | \"previous\" | \"search\" | \"send\"",
          "mutable": false,
          "attr": "enterkeyhint",
          "reflectToAttr": false,
          "docs": "A hint to the browser for which enter key to display.\nPossible values: `\"enter\"`, `\"done\"`, `\"go\"`, `\"next\"`,\n`\"previous\"`, `\"search\"`, and `\"send\"`.",
          "docsTags": [],
          "values": [
            {
              "value": "done",
              "type": "string"
            },
            {
              "value": "enter",
              "type": "string"
            },
            {
              "value": "go",
              "type": "string"
            },
            {
              "value": "next",
              "type": "string"
            },
            {
              "value": "previous",
              "type": "string"
            },
            {
              "value": "search",
              "type": "string"
            },
            {
              "value": "send",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "description": "A hint to the browser for which enter key to display.\nPossible values: `\"enter\"`, `\"done\"`, `\"go\"`, `\"next\"`,\n`\"previous\"`, `\"search\"`, and `\"send\"`."
        },
        {
          "name": "helpText",
          "type": "string",
          "mutable": false,
          "attr": "help-text",
          "reflectToAttr": false,
          "docs": "The textarea's help text. Alternatively, you can use the help-text slot.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "The textarea's help text. Alternatively, you can use the help-text slot."
        },
        {
          "name": "inputmode",
          "type": "\"decimal\" | \"email\" | \"none\" | \"numeric\" | \"search\" | \"tel\" | \"text\" | \"url\"",
          "mutable": false,
          "attr": "inputmode",
          "reflectToAttr": false,
          "docs": "The textarea's inputmode attribute.",
          "docsTags": [],
          "values": [
            {
              "value": "decimal",
              "type": "string"
            },
            {
              "value": "email",
              "type": "string"
            },
            {
              "value": "none",
              "type": "string"
            },
            {
              "value": "numeric",
              "type": "string"
            },
            {
              "value": "search",
              "type": "string"
            },
            {
              "value": "tel",
              "type": "string"
            },
            {
              "value": "text",
              "type": "string"
            },
            {
              "value": "url",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "The textarea's inputmode attribute."
        },
        {
          "name": "invalid",
          "type": "boolean",
          "mutable": false,
          "attr": "invalid",
          "reflectToAttr": true,
          "docs": "Set to true to indicate this field is invalid. Will display the invalid text instead of the help text",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Set to true to indicate this field is invalid. Will display the invalid text instead of the help text"
        },
        {
          "name": "invalidText",
          "type": "string",
          "mutable": false,
          "attr": "invalid-text",
          "reflectToAttr": false,
          "docs": "The input's invalid text. Alternatively, you can use the invalid-text slot.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "The input's invalid text. Alternatively, you can use the invalid-text slot."
        },
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "The textarea's label. Alternatively, you can use the label slot.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "The textarea's label. Alternatively, you can use the label slot."
        },
        {
          "name": "maxlength",
          "type": "number",
          "mutable": false,
          "attr": "maxlength",
          "reflectToAttr": false,
          "docs": "Specifies how many characters are allowed.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Specifies how many characters are allowed."
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": true,
          "docs": "The textarea's name attribute.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "The textarea's name attribute."
        },
        {
          "name": "placeholder",
          "type": "string",
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "The textarea's placeholder text.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "The textarea's placeholder text."
        },
        {
          "name": "readonly",
          "type": "boolean",
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": true,
          "docs": "If `true`, the user cannot modify the value.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "description": "If `true`, the user cannot modify the value."
        },
        {
          "name": "requiredIndicator",
          "type": "boolean",
          "mutable": false,
          "attr": "required-indicator",
          "reflectToAttr": false,
          "docs": "Set to true to display a required indicator, adds an asterisk to label",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Set to true to display a required indicator, adds an asterisk to label"
        },
        {
          "name": "resize",
          "type": "\"auto\" | \"none\" | \"vertical\"",
          "mutable": false,
          "attr": "resize",
          "reflectToAttr": false,
          "docs": "Controls how the textarea can be resized.",
          "docsTags": [],
          "default": "'vertical'",
          "values": [
            {
              "value": "auto",
              "type": "string"
            },
            {
              "value": "none",
              "type": "string"
            },
            {
              "value": "vertical",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Controls how the textarea can be resized."
        },
        {
          "name": "rows",
          "type": "number",
          "mutable": false,
          "attr": "rows",
          "reflectToAttr": false,
          "docs": "The number of rows to display by default.",
          "docsTags": [],
          "default": "4",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false,
          "description": "The number of rows to display by default."
        },
        {
          "name": "size",
          "type": "\"large\" | \"medium\" | \"small\"",
          "mutable": false,
          "attr": "size",
          "reflectToAttr": true,
          "docs": "The textarea's size.",
          "docsTags": [],
          "default": "'medium'",
          "values": [
            {
              "value": "large",
              "type": "string"
            },
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "small",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "The textarea's size."
        },
        {
          "name": "spellcheck",
          "type": "boolean",
          "mutable": false,
          "attr": "spellcheck",
          "reflectToAttr": false,
          "docs": "If `true`, the element will have its spelling and grammar checked.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "description": "If `true`, the element will have its spelling and grammar checked."
        },
        {
          "name": "value",
          "type": "string",
          "mutable": true,
          "attr": "value",
          "reflectToAttr": true,
          "docs": "The textarea's value attribute.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "The textarea's value attribute."
        }
      ],
      "attributes": [
        {
          "name": "autocapitalize",
          "type": "string",
          "mutable": false,
          "attr": "autocapitalize",
          "reflectToAttr": false,
          "docs": "Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user.\nAvailable options: `\"off\"`, `\"none\"`, `\"on\"`, `\"sentences\"`, `\"words\"`, `\"characters\"`.",
          "docsTags": [],
          "default": "'off'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "'off'",
          "description": "Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user.\nAvailable options: `\"off\"`, `\"none\"`, `\"on\"`, `\"sentences\"`, `\"words\"`, `\"characters\"`."
        },
        {
          "name": "autocorrect",
          "type": "\"off\" | \"on\"",
          "mutable": false,
          "attr": "autocorrect",
          "reflectToAttr": false,
          "docs": "Whether auto correction should be enabled when the user is entering/editing the text value.",
          "docsTags": [],
          "default": "'off'",
          "values": [
            {
              "value": "off",
              "type": "string"
            },
            {
              "value": "on",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "'off'",
          "description": "Whether auto correction should be enabled when the user is entering/editing the text value."
        },
        {
          "name": "autofocus",
          "type": "boolean",
          "mutable": false,
          "attr": "autofocus",
          "reflectToAttr": false,
          "docs": "This Boolean attribute lets you specify that a form control should have input focus when the page loads.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "false",
          "description": "This Boolean attribute lets you specify that a form control should have input focus when the page loads."
        },
        {
          "name": "debounce",
          "type": "number",
          "mutable": false,
          "attr": "debounce",
          "reflectToAttr": false,
          "docs": "Set the amount of time, in milliseconds, to wait to trigger the `stories-change` event after each keystroke. This also impacts form bindings such as `ngModel` or `v-model`.",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "0",
          "description": "Set the amount of time, in milliseconds, to wait to trigger the `stories-change` event after each keystroke. This also impacts form bindings such as `ngModel` or `v-model`."
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "Set to true to disable the textarea.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "false",
          "description": "Set to true to disable the textarea."
        },
        {
          "name": "enterkeyhint",
          "type": "\"done\" | \"enter\" | \"go\" | \"next\" | \"previous\" | \"search\" | \"send\"",
          "mutable": false,
          "attr": "enterkeyhint",
          "reflectToAttr": false,
          "docs": "A hint to the browser for which enter key to display.\nPossible values: `\"enter\"`, `\"done\"`, `\"go\"`, `\"next\"`,\n`\"previous\"`, `\"search\"`, and `\"send\"`.",
          "docsTags": [],
          "values": [
            {
              "value": "done",
              "type": "string"
            },
            {
              "value": "enter",
              "type": "string"
            },
            {
              "value": "go",
              "type": "string"
            },
            {
              "value": "next",
              "type": "string"
            },
            {
              "value": "previous",
              "type": "string"
            },
            {
              "value": "search",
              "type": "string"
            },
            {
              "value": "send",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "description": "A hint to the browser for which enter key to display.\nPossible values: `\"enter\"`, `\"done\"`, `\"go\"`, `\"next\"`,\n`\"previous\"`, `\"search\"`, and `\"send\"`."
        },
        {
          "name": "help-text",
          "type": "string",
          "mutable": false,
          "attr": "help-text",
          "reflectToAttr": false,
          "docs": "The textarea's help text. Alternatively, you can use the help-text slot.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "''",
          "description": "The textarea's help text. Alternatively, you can use the help-text slot."
        },
        {
          "name": "inputmode",
          "type": "\"decimal\" | \"email\" | \"none\" | \"numeric\" | \"search\" | \"tel\" | \"text\" | \"url\"",
          "mutable": false,
          "attr": "inputmode",
          "reflectToAttr": false,
          "docs": "The textarea's inputmode attribute.",
          "docsTags": [],
          "values": [
            {
              "value": "decimal",
              "type": "string"
            },
            {
              "value": "email",
              "type": "string"
            },
            {
              "value": "none",
              "type": "string"
            },
            {
              "value": "numeric",
              "type": "string"
            },
            {
              "value": "search",
              "type": "string"
            },
            {
              "value": "tel",
              "type": "string"
            },
            {
              "value": "text",
              "type": "string"
            },
            {
              "value": "url",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "The textarea's inputmode attribute."
        },
        {
          "name": "invalid",
          "type": "boolean",
          "mutable": false,
          "attr": "invalid",
          "reflectToAttr": true,
          "docs": "Set to true to indicate this field is invalid. Will display the invalid text instead of the help text",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "false",
          "description": "Set to true to indicate this field is invalid. Will display the invalid text instead of the help text"
        },
        {
          "name": "invalid-text",
          "type": "string",
          "mutable": false,
          "attr": "invalid-text",
          "reflectToAttr": false,
          "docs": "The input's invalid text. Alternatively, you can use the invalid-text slot.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "''",
          "description": "The input's invalid text. Alternatively, you can use the invalid-text slot."
        },
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "The textarea's label. Alternatively, you can use the label slot.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "The textarea's label. Alternatively, you can use the label slot."
        },
        {
          "name": "maxlength",
          "type": "number",
          "mutable": false,
          "attr": "maxlength",
          "reflectToAttr": false,
          "docs": "Specifies how many characters are allowed.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Specifies how many characters are allowed."
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": true,
          "docs": "The textarea's name attribute.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "''",
          "description": "The textarea's name attribute."
        },
        {
          "name": "placeholder",
          "type": "string",
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "The textarea's placeholder text.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "The textarea's placeholder text."
        },
        {
          "name": "readonly",
          "type": "boolean",
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": true,
          "docs": "If `true`, the user cannot modify the value.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "false",
          "description": "If `true`, the user cannot modify the value."
        },
        {
          "name": "required-indicator",
          "type": "boolean",
          "mutable": false,
          "attr": "required-indicator",
          "reflectToAttr": false,
          "docs": "Set to true to display a required indicator, adds an asterisk to label",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "false",
          "description": "Set to true to display a required indicator, adds an asterisk to label"
        },
        {
          "name": "resize",
          "type": "\"auto\" | \"none\" | \"vertical\"",
          "mutable": false,
          "attr": "resize",
          "reflectToAttr": false,
          "docs": "Controls how the textarea can be resized.",
          "docsTags": [],
          "default": "'vertical'",
          "values": [
            {
              "value": "auto",
              "type": "string"
            },
            {
              "value": "none",
              "type": "string"
            },
            {
              "value": "vertical",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "'vertical'",
          "description": "Controls how the textarea can be resized."
        },
        {
          "name": "rows",
          "type": "number",
          "mutable": false,
          "attr": "rows",
          "reflectToAttr": false,
          "docs": "The number of rows to display by default.",
          "docsTags": [],
          "default": "4",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "4",
          "description": "The number of rows to display by default."
        },
        {
          "name": "size",
          "type": "\"large\" | \"medium\" | \"small\"",
          "mutable": false,
          "attr": "size",
          "reflectToAttr": true,
          "docs": "The textarea's size.",
          "docsTags": [],
          "default": "'medium'",
          "values": [
            {
              "value": "large",
              "type": "string"
            },
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "small",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "'medium'",
          "description": "The textarea's size."
        },
        {
          "name": "spellcheck",
          "type": "boolean",
          "mutable": false,
          "attr": "spellcheck",
          "reflectToAttr": false,
          "docs": "If `true`, the element will have its spelling and grammar checked.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "false",
          "description": "If `true`, the element will have its spelling and grammar checked."
        },
        {
          "name": "value",
          "type": "string",
          "mutable": true,
          "attr": "value",
          "reflectToAttr": true,
          "docs": "The textarea's value attribute.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "''",
          "description": "The textarea's value attribute."
        }
      ],
      "methods": [
        {
          "name": "removeFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "removeFocus() => Promise<void>",
          "parameters": [],
          "docs": "Removes focus fromt the textarea.",
          "docsTags": []
        },
        {
          "name": "select",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "select() => Promise<void>",
          "parameters": [],
          "docs": "Selects all the text in the input.",
          "docsTags": []
        },
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setFocus(options?: FocusOptions) => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the textarea.",
          "docsTags": []
        },
        {
          "name": "setRangeText",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setRangeText(replacement: string, start: number, end: number, selectMode?: 'select' | 'start' | 'end' | 'preserve') => Promise<void>",
          "parameters": [],
          "docs": "Replaces a range of text with a new string.",
          "docsTags": []
        },
        {
          "name": "setSelectionRange",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setSelectionRange(selectionStart: number, selectionEnd: number, selectionDirection?: 'forward' | 'backward' | 'none') => Promise<void>",
          "parameters": [],
          "docs": "Sets the start and end positions of the text selection (0-based).",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "stories-blur",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the textarea loses focus.",
          "docsTags": [],
          "name": "stories-blur",
          "description": "Emitted when the textarea loses focus.",
          "type": "void"
        },
        {
          "event": "stories-change",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the textarea's value changes.",
          "docsTags": [],
          "name": "stories-change",
          "description": "Emitted when the textarea's value changes.",
          "type": "void"
        },
        {
          "event": "stories-focus",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the textarea has focus.",
          "docsTags": [],
          "name": "stories-focus",
          "description": "Emitted when the textarea has focus.",
          "type": "void"
        },
        {
          "event": "stories-input",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the textarea receives input.",
          "docsTags": [],
          "name": "stories-input",
          "description": "Emitted when the textarea receives input.",
          "type": "void"
        }
      ],
      "cssProperties": [
        {
          "name": "--background-color",
          "annotation": "prop",
          "docs": "Background color of the textarea",
          "description": "Background color of the textarea"
        },
        {
          "name": "--background-color-focus",
          "annotation": "prop",
          "docs": "Background color of the textarea on focus",
          "description": "Background color of the textarea on focus"
        },
        {
          "name": "--background-color-hover",
          "annotation": "prop",
          "docs": "Background color of the textarea on hover",
          "description": "Background color of the textarea on hover"
        },
        {
          "name": "--background-color-invalid",
          "annotation": "prop",
          "docs": "Background color of the textarea when invalid",
          "description": "Background color of the textarea when invalid"
        },
        {
          "name": "--background-color-invalid-hover",
          "annotation": "prop",
          "docs": "Background color of the textarea when invalid on focus",
          "description": "Background color of the textarea when invalid on focus"
        },
        {
          "name": "--border-color",
          "annotation": "prop",
          "docs": "Border color of the textarea",
          "description": "Border color of the textarea"
        },
        {
          "name": "--border-color-focus",
          "annotation": "prop",
          "docs": "Border color of the textarea on focus",
          "description": "Border color of the textarea on focus"
        },
        {
          "name": "--border-color-hover",
          "annotation": "prop",
          "docs": "Border color of the textarea on hover",
          "description": "Border color of the textarea on hover"
        },
        {
          "name": "--border-color-invalid",
          "annotation": "prop",
          "docs": "Border color of the textarea when invalid",
          "description": "Border color of the textarea when invalid"
        },
        {
          "name": "--border-color-invalid-hover",
          "annotation": "prop",
          "docs": "Border color of the textarea when invalid on focus",
          "description": "Border color of the textarea when invalid on focus"
        },
        {
          "name": "--border-radius",
          "annotation": "prop",
          "docs": "Border radius of the textarea",
          "description": "Border radius of the textarea"
        },
        {
          "name": "--color",
          "annotation": "prop",
          "docs": "Text color of the textarea",
          "description": "Text color of the textarea"
        },
        {
          "name": "--focus-ring",
          "annotation": "prop",
          "docs": "The focus ring style to use when the textarea receives focus, a `box-shadow` property.",
          "description": "The focus ring style to use when the textarea receives focus, a `box-shadow` property."
        },
        {
          "name": "--font-size",
          "annotation": "prop",
          "docs": "Font size of the textarea",
          "description": "Font size of the textarea"
        },
        {
          "name": "--font-weight",
          "annotation": "prop",
          "docs": "Font weight of the textarea",
          "description": "Font weight of the textarea"
        },
        {
          "name": "--min-height",
          "annotation": "prop",
          "docs": "Minimum height of the textarea",
          "description": "Minimum height of the textarea"
        },
        {
          "name": "--padding-end",
          "annotation": "prop",
          "docs": "Right padding of the textarea (will be left padding when we support right-to-left direction)",
          "description": "Right padding of the textarea (will be left padding when we support right-to-left direction)"
        },
        {
          "name": "--padding-start",
          "annotation": "prop",
          "docs": "Left padding of the textarea (will be right padding when we support right-to-left direction)",
          "description": "Left padding of the textarea (will be right padding when we support right-to-left direction)"
        },
        {
          "name": "--placeholder-color",
          "annotation": "prop",
          "docs": "Text color of the placeholder",
          "description": "Text color of the placeholder"
        }
      ],
      "slots": [
        {
          "name": "help-text",
          "docs": "Help text that describes how to use the textarea."
        },
        {
          "name": "invalid-text",
          "docs": "Invalid text tells a user how to fix the error. Alternatively, you can use the invalid-text prop."
        },
        {
          "name": "label",
          "docs": "The textarea's label. Alternatively, you can use the label prop."
        }
      ],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/tool-bar/tool-bar.tsx",
      "encapsulation": "shadow",
      "tag": "stories-tool-bar",
      "name": "stories-tool-bar",
      "readme": "# stories-toolbar\n\nThe stories-toolbar is a container for other Stories components such as stories-button, stories-toggle, etc.\n",
      "description": "The stories-toolbar is a container for other Stories components such as stories-button, stories-toggle, etc.",
      "docsTags": [],
      "usage": {},
      "properties": [],
      "attributes": [],
      "methods": [],
      "events": [],
      "cssProperties": [],
      "slots": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/tool-button/tool-button.tsx",
      "encapsulation": "shadow",
      "tag": "stories-tool-button",
      "name": "stories-tool-button",
      "readme": "# stories-toolbutton\n\n> Notice: Deprecated. Use stories-button instead\n",
      "description": "> Notice: Deprecated. Use stories-button instead",
      "docsTags": [],
      "usage": {},
      "properties": [
        {
          "name": "command",
          "type": "\"zoomIn\" | \"zoomOut\" | \"zoomReset\"",
          "mutable": false,
          "attr": "command",
          "reflectToAttr": false,
          "docs": "command property",
          "docsTags": [],
          "values": [
            {
              "value": "zoomIn",
              "type": "string"
            },
            {
              "value": "zoomOut",
              "type": "string"
            },
            {
              "value": "zoomReset",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "command property"
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "disabled property",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "description": "disabled property"
        },
        {
          "name": "icon",
          "type": "string",
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": false,
          "docs": "icon property",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "icon property"
        }
      ],
      "attributes": [
        {
          "name": "command",
          "type": "\"zoomIn\" | \"zoomOut\" | \"zoomReset\"",
          "mutable": false,
          "attr": "command",
          "reflectToAttr": false,
          "docs": "command property",
          "docsTags": [],
          "values": [
            {
              "value": "zoomIn",
              "type": "string"
            },
            {
              "value": "zoomOut",
              "type": "string"
            },
            {
              "value": "zoomReset",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "command property"
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "disabled property",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "description": "disabled property"
        },
        {
          "name": "icon",
          "type": "string",
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": false,
          "docs": "icon property",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "icon property"
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "storiesAction",
          "detail": "{ command: string; data?: unknown; }",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Action Event",
          "docsTags": [],
          "name": "storiesAction",
          "description": "Action Event",
          "type": "{ command: string; data?: unknown; }"
        }
      ],
      "cssProperties": [],
      "slots": [],
      "dependents": [
        "stories-tool-zoom"
      ],
      "dependencies": [
        "stories-icon"
      ],
      "dependencyGraph": {
        "stories-tool-button": [
          "stories-icon"
        ],
        "stories-tool-zoom": [
          "stories-tool-button"
        ]
      }
    },
    {
      "filePath": "./src/components/tool-zoom/tool-zoom.tsx",
      "encapsulation": "shadow",
      "tag": "stories-tool-zoom",
      "name": "stories-tool-zoom",
      "readme": "# stories-tool-zoom\n\nThe stories-tool-zoom is a container for zoom-in, zoom-out, and zoom-reset buttons.\n",
      "description": "The stories-tool-zoom is a container for zoom-in, zoom-out, and zoom-reset buttons.",
      "docsTags": [],
      "usage": {},
      "properties": [],
      "attributes": [],
      "methods": [],
      "events": [],
      "cssProperties": [],
      "slots": [],
      "dependents": [],
      "dependencies": [
        "stories-tool-button"
      ],
      "dependencyGraph": {
        "stories-tool-zoom": [
          "stories-tool-button"
        ],
        "stories-tool-button": [
          "stories-icon"
        ]
      }
    },
    {
      "filePath": "./src/components/zoom/zoom.tsx",
      "encapsulation": "shadow",
      "tag": "stories-zoom",
      "name": "stories-zoom",
      "readme": "# stories-zoom\n\nThe stories-zoom is a container managing visual zoom of content.\n",
      "description": "The stories-zoom is a container managing visual zoom of content.",
      "docsTags": [],
      "usage": {},
      "properties": [
        {
          "name": "zoom",
          "type": "number",
          "mutable": false,
          "attr": "zoom",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "1",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false,
          "description": ""
        }
      ],
      "attributes": [
        {
          "name": "zoom",
          "type": "number",
          "mutable": false,
          "attr": "zoom",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "1",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "1",
          "description": ""
        }
      ],
      "methods": [],
      "events": [],
      "cssProperties": [],
      "slots": [],
      "dependents": [
        "stories-preview"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "stories-preview": [
          "stories-zoom"
        ]
      }
    }
  ]
}