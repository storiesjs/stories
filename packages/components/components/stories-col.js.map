{"file":"stories-col.js","mappings":"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","names":[],"sources":["./src/components/col/col.scss?tag=stories-col&encapsulation=shadow","./src/components/col/col.tsx"],"sourcesContent":["@import \"../../themes/stories.globals\";\n@import \"../grid/grid.mixins\";\n\n// Grid Column\n// --------------------------------------------------\n\n/// @prop - The padding for the grid column\n$grid-column-padding:        var(--stories-grid-column-padding, 5px) !default;\n\n/// @prop - The padding for the column at different breakpoints\n$grid-column-paddings: (\n  xs: var(--stories-grid-column-padding-xs, $grid-column-padding),\n  sm: var(--stories-grid-column-padding-sm, $grid-column-padding),\n  md: var(--stories-grid-column-padding-md, $grid-column-padding),\n  lg: var(--stories-grid-column-padding-lg, $grid-column-padding),\n  xl: var(--stories-grid-column-padding-xl, $grid-column-padding)\n) !default;\n\n// Column\n// --------------------------------------------------\n\n:host {\n  /**\n   * @prop --stories-grid-columns: The number of total Columns in the Grid\n   * @prop --stories-grid-column-padding: Padding for the Column\n   * @prop --stories-grid-column-padding-xs: Padding for the Column on xs screens and up\n   * @prop --stories-grid-column-padding-sm: Padding for the Column on sm screens and up\n   * @prop --stories-grid-column-padding-md: Padding for the Column on md screens and up\n   * @prop --stories-grid-column-padding-lg: Padding for the Column on lg screens and up\n   * @prop --stories-grid-column-padding-xl: Padding for the Column on xl screens and up\n   */\n  @include make-breakpoint-padding($grid-column-paddings);\n  @include margin(0);\n\n  box-sizing: border-box;\n\n  position: relative;\n\n  flex-basis: 0;\n  flex-grow: 1;\n\n  width: 100%;\n  max-width: 100%;\n  min-height: 1px; // Prevent columns from collapsing when empty\n}\n","// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport { Component, Host, h, Prop, Listen, forceUpdate } from '@stencil/core';\n\nimport { matchBreakpoint } from '../../utils';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst win = window as any;\nconst SUPPORTS_VARS = !!(win.CSS && win.CSS.supports && win.CSS.supports('--a: 0'));\nconst BREAKPOINTS = ['', 'xs', 'sm', 'md', 'lg', 'xl'];\n\n@Component({\n  tag: 'stories-col',\n  styleUrl: 'col.scss',\n  shadow: true,\n})\nexport class Col {\n\n  /**\n   * The amount to offset the column, in terms of how many columns it should shift to the end\n   * of the total available.\n   */\n  @Prop() offset?: string;\n\n  /**\n   * The amount to offset the column for xs screens, in terms of how many columns it should shift\n   * to the end of the total available.\n   */\n  @Prop() offsetXs?: string;\n\n  /**\n   * The amount to offset the column for sm screens, in terms of how many columns it should shift\n   * to the end of the total available.\n   */\n  @Prop() offsetSm?: string;\n\n  /**\n   * The amount to offset the column for md screens, in terms of how many columns it should shift\n   * to the end of the total available.\n   */\n  @Prop() offsetMd?: string;\n\n  /**\n   * The amount to offset the column for lg screens, in terms of how many columns it should shift\n   * to the end of the total available.\n   */\n  @Prop() offsetLg?: string;\n\n  /**\n   * The amount to offset the column for xl screens, in terms of how many columns it should shift\n   * to the end of the total available.\n   */\n  @Prop() offsetXl?: string;\n\n  /**\n   * The amount to pull the column, in terms of how many columns it should shift to the start of\n   * the total available.\n   */\n  @Prop() pull?: string;\n\n  /**\n   * The amount to pull the column for xs screens, in terms of how many columns it should shift\n   * to the start of the total available.\n   */\n  @Prop() pullXs?: string;\n  /**\n   * The amount to pull the column for sm screens, in terms of how many columns it should shift\n   * to the start of the total available.\n   */\n  @Prop() pullSm?: string;\n  /**\n   * The amount to pull the column for md screens, in terms of how many columns it should shift\n   * to the start of the total available.\n   */\n  @Prop() pullMd?: string;\n  /**\n   * The amount to pull the column for lg screens, in terms of how many columns it should shift\n   * to the start of the total available.\n   */\n  @Prop() pullLg?: string;\n  /**\n   * The amount to pull the column for xl screens, in terms of how many columns it should shift\n   * to the start of the total available.\n   */\n  @Prop() pullXl?: string;\n\n  /**\n   * The amount to push the column, in terms of how many columns it should shift to the end\n   * of the total available.\n   */\n  @Prop() push?: string;\n\n  /**\n   * The amount to push the column for xs screens, in terms of how many columns it should shift\n   * to the end of the total available.\n   */\n  @Prop() pushXs?: string;\n\n  /**\n   * The amount to push the column for sm screens, in terms of how many columns it should shift\n   * to the end of the total available.\n   */\n  @Prop() pushSm?: string;\n\n  /**\n   * The amount to push the column for md screens, in terms of how many columns it should shift\n   * to the end of the total available.\n   */\n  @Prop() pushMd?: string;\n\n  /**\n   * The amount to push the column for lg screens, in terms of how many columns it should shift\n   * to the end of the total available.\n   */\n  @Prop() pushLg?: string;\n\n  /**\n   * The amount to push the column for xl screens, in terms of how many columns it should shift\n   * to the end of the total available.\n   */\n  @Prop() pushXl?: string;\n\n  /**\n   * The size of the column, in terms of how many columns it should take up out of the total\n   * available. If `\"auto\"` is passed, the column will be the size of its content.\n   */\n  @Prop() size?: string;\n\n  /**\n   * The size of the column for xs screens, in terms of how many columns it should take up out\n   * of the total available. If `\"auto\"` is passed, the column will be the size of its content.\n   */\n  @Prop() sizeXs?: string;\n\n  /**\n   * The size of the column for sm screens, in terms of how many columns it should take up out\n   * of the total available. If `\"auto\"` is passed, the column will be the size of its content.\n   */\n  @Prop() sizeSm?: string;\n\n  /**\n   * The size of the column for md screens, in terms of how many columns it should take up out\n   * of the total available. If `\"auto\"` is passed, the column will be the size of its content.\n   */\n  @Prop() sizeMd?: string;\n\n  /**\n   * The size of the column for lg screens, in terms of how many columns it should take up out\n   * of the total available. If `\"auto\"` is passed, the column will be the size of its content.\n   */\n  @Prop() sizeLg?: string;\n\n  /**\n   * The size of the column for xl screens, in terms of how many columns it should take up out\n   * of the total available. If `\"auto\"` is passed, the column will be the size of its content.\n   */\n  @Prop() sizeXl?: string;\n\n  @Listen('resize', { target: 'window' })\n  onResize(): void {\n    forceUpdate(this);\n  }\n\n  // Loop through all of the breakpoints to see if the media query\n  // matches and grab the column value from the relevant prop if so\n  private getColumns(property: string) {\n    let matched;\n\n    for (const breakpoint of BREAKPOINTS) {\n      const matches = matchBreakpoint(breakpoint);\n\n      // Grab the value of the property, if it exists and our\n      // media query matches we return the value\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const columns = (this as any)[property + breakpoint.charAt(0).toUpperCase() + breakpoint.slice(1)];\n\n      if (matches && columns !== undefined) {\n        matched = columns;\n      }\n    }\n\n    // Return the last matched columns since the breakpoints\n    // increase in size and we want to return the largest match\n    return matched;\n  }\n\n  private calculateSize() {\n    const columns = this.getColumns('size');\n\n    // If size wasn't set for any breakpoint\n    // or if the user set the size without a value\n    // it means we need to stick with the default and return\n    // e.g. <stories-col size-md>\n    if (!columns || columns === '') {\n      return;\n    }\n\n    // If the size is set to auto then don't calculate a size\n    const colSize = (columns === 'auto')\n      ? 'auto'\n      // If CSS supports variables we should use the grid columns var\n      : SUPPORTS_VARS ? `calc(calc(${columns} / var(--stories-grid-columns, 12)) * 100%)`\n        // Convert the columns to a percentage by dividing by the total number\n        // of columns (12) and then multiplying by 100\n        : ((columns / 12) * 100) + '%';\n\n    return {\n      'flex': `0 0 ${colSize}`,\n      'width': `${colSize}`,\n      'max-width': `${colSize}`\n    };\n  }\n\n  // Called by push, pull, and offset since they use the same calculations\n  private calculatePosition(property: string, modifier: string) {\n    const columns = this.getColumns(property);\n\n    if (!columns) {\n      return;\n    }\n\n    // If the number of columns passed are greater than 0 and less than\n    // 12 we can position the column, else default to auto\n    const amount = SUPPORTS_VARS\n      // If CSS supports variables we should use the grid columns var\n      ? `calc(calc(${columns} / var(--stories-grid-columns, 12)) * 100%)`\n      // Convert the columns to a percentage by dividing by the total number\n      // of columns (12) and then multiplying by 100\n      : (columns > 0 && columns < 12) ? (columns / 12 * 100) + '%' : 'auto';\n\n    return {\n      [modifier]: amount\n    };\n  }\n\n  private calculateOffset(isRTL: boolean) {\n    return this.calculatePosition('offset', isRTL ? 'margin-right' : 'margin-left');\n  }\n\n  private calculatePull(isRTL: boolean) {\n    return this.calculatePosition('pull', isRTL ? 'left' : 'right');\n  }\n\n  private calculatePush(isRTL: boolean) {\n    return this.calculatePosition('push', isRTL ? 'right' : 'left');\n  }\n\n  render(): JSX.Element {\n    const isRTL = document.dir === 'rtl';\n\n    return (\n      <Host\n        style={{\n          ...this.calculateOffset(isRTL),\n          ...this.calculatePull(isRTL),\n          ...this.calculatePush(isRTL),\n          ...this.calculateSize(),\n        }}\n      >\n        <slot></slot>\n      </Host>\n    );\n  }\n\n}\n"],"version":3}