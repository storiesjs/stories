{"file":"stories-button.js","mappings":"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","names":[],"sources":["./src/components/button/button.scss?tag=stories-button&encapsulation=shadow","./src/components/button/button.tsx"],"sourcesContent":["@import \"./button.vars\";\n\n// Button\n// --------------------------------------------------\n\n:host {\n  /**\n   * @prop --background: Background of the button\n   * @prop --background-activated: Background of the button when pressed. Note: setting this will interfere with the Material Design ripple.\n   * @prop --background-activated-opacity: Opacity of the button when pressed\n   * @prop --background-focused: Background of the button when focused with the tab key\n   * @prop --background-focused-opacity: Opacity of the button when focused with the tab key\n   * @prop --background-hover: Background of the button on hover\n   * @prop --background-hover-opacity: Opacity of the background on hover\n   *\n   * @prop --color: Text color of the button\n   * @prop --color-activated: Text color of the button when pressed\n   * @prop --color-focused: Text color of the button when focused with the tab key\n   * @prop --color-hover: Text color of the button when hover\n   *\n   * @prop --transition: Transition of the button\n   *\n   * @prop --border-radius: Border radius of the button\n   * @prop --border-width: Border width of the button\n   * @prop --border-style: Border style of the button\n   * @prop --border-color: Border color of the button\n   *\n   * @prop --ripple-color: Color of the button ripple effect\n   *\n   * @prop --box-shadow: Box shadow of the button\n   * @prop --opacity: Opacity of the button\n   *\n   * @prop --padding-top: Top padding of the button\n   * @prop --padding-end: Right padding if direction is left-to-right, and left padding if direction is right-to-left of the button\n   * @prop --padding-bottom: Bottom padding of the button\n   * @prop --padding-start: Left padding if direction is left-to-right, and right padding if direction is right-to-left of the button\n   */\n  --overflow: hidden;\n  --ripple-color: currentColor;\n  --border-width: initial;\n  --border-color: initial;\n  --border-style: initial;\n  --color-activated: var(--color);\n  --color-focused: var(--color);\n  --color-hover: var(--color);\n  --box-shadow: none;\n\n  display: inline-block;\n\n  width: auto;\n\n  color: var(--color);\n\n  font-family: $font-family-base;\n\n  text-align: center;\n  text-decoration: none;\n  text-overflow: ellipsis;\n\n  white-space: nowrap;\n\n  user-select: none;\n  vertical-align: top; // the better option for most scenarios\n  vertical-align: -webkit-baseline-middle; // the best for those that support it\n\n  font-kerning: none;\n}\n\n:host(.button-disabled) {\n  cursor: default;\n  opacity: .5;\n  pointer-events: none;\n}\n\n// Solid Button\n// --------------------------------------------------\n\n// Default Solid Color\n:host(.button-solid) {\n  --background: #{stories-color(primary, base)};\n  --color: #{stories-color(primary, contrast)};\n}\n\n\n// Outline Button\n// --------------------------------------------------\n\n// Default Outline Color\n:host(.button-outline) {\n  --border-color: #{stories-color(primary, base)};\n  --background: transparent;\n  --color: #{stories-color(primary, base)};\n}\n\n\n// Clear Button\n// --------------------------------------------------\n\n// Default Clear Color\n:host(.button-clear) {\n  --border-width: 0;\n  --background: transparent;\n  --color: #{stories-color(primary, base)};\n}\n\n\n// Block Button\n// --------------------------------------------------\n\n:host(.button-block) {\n  display: block;\n}\n\n:host(.button-block) .button-native {\n  @include margin-horizontal(0);\n\n  display: block;\n\n  width: 100%;\n\n  clear: both;\n\n  contain: content;\n}\n\n:host(.button-block) .button-native::after {\n  clear: both;\n}\n\n\n// Full Button\n// --------------------------------------------------\n\n:host(.button-full) {\n  display: block;\n}\n\n:host(.button-full) .button-native {\n  @include margin-horizontal(0);\n\n  display: block;\n\n  width: 100%;\n\n  contain: content;\n}\n\n:host(.button-full:not(.button-round)) .button-native {\n  @include border-radius(0);\n\n  border-right-width: 0;\n  border-left-width: 0;\n}\n\n.button-native {\n  @include border-radius(var(--border-radius));\n  @include font-smoothing();\n  @include margin(0);\n  @include padding(var(--padding-top), var(--padding-end), var(--padding-bottom), var(--padding-start));\n  @include text-inherit();\n\n  display: block;\n  position: relative;\n\n  width: 100%;\n  height: 100%;\n\n  transition: var(--transition);\n\n  border-width: var(--border-width);\n  border-style: var(--border-style);\n  border-color: var(--border-color);\n\n  outline: none;\n\n  background: var(--background);\n\n  line-height: 1;\n\n  box-shadow: var(--box-shadow);\n\n  contain: layout style;\n  cursor: pointer;\n\n  opacity: var(--opacity);\n  overflow: var(--overflow);\n\n  z-index: 0;\n  box-sizing: border-box;\n  appearance: none;\n}\n\n.button-native::-moz-focus-inner {\n  border: 0;\n}\n\n.button-inner {\n  display: flex;\n  position: relative;\n\n  flex-flow: row nowrap;\n  flex-shrink: 0;\n  align-items: center;\n  justify-content: center;\n\n  width: 100%;\n  height: 100%;\n\n  z-index: 1;\n}\n\n\n// Button Icons\n// --------------------------------------------------\n\n::slotted(stories-icon) {\n  font-size: 1.4em;\n  pointer-events: none;\n}\n\n::slotted(stories-icon[slot=\"start\"]) {\n  @include margin(0, .3em, 0, -.3em);\n}\n\n::slotted(stories-icon[slot=\"end\"]) {\n  @include margin(0, -.2em, 0, .3em);\n}\n\n::slotted(stories-icon[slot=\"icon-only\"]) {\n  font-size: 1.8em;\n}\n\n\n// Button Ripple effect\n// --------------------------------------------------\n\nstories-ripple-effect {\n  color: var(--ripple-color);\n}\n\n\n// Button: States\n// --------------------------------------------------\n\n.button-native::after {\n  @include button-state();\n}\n\n// Button Activated\n:host(.stories-activated) {\n  color: var(--color-activated);\n}\n\n:host(.stories-activated) .button-native::after {\n  background: var(--background-activated);\n\n  opacity: var(--background-activated-opacity);\n}\n\n// Button Focused\n:host(.stories-focused) {\n  color: var(--color-focused);\n}\n\n:host(.stories-focused) .button-native::after {\n  background: var(--background-focused);\n\n  opacity: var(--background-focused-opacity);\n}\n\n// Button Hover\n@media (any-hover: hover) {\n  :host(:hover) {\n    color: var(--color-hover);\n  }\n\n  :host(:hover) .button-native::after {\n    background: var(--background-hover);\n\n    opacity: var(--background-hover-opacity);\n  }\n}\n\n\n// Button Colors\n// --------------------------------------------------\n\n// Solid Button with Color\n:host(.button-solid.stories-color) .button-native {\n  background: current-color(base);\n  color: current-color(contrast);\n}\n\n// Outline Button with Color\n:host(.button-outline.stories-color) .button-native {\n  border-color: current-color(base);\n\n  background: transparent;\n  color: current-color(base);\n}\n\n// Clear Button with Color\n:host(.button-clear.stories-color) .button-native {\n  background: transparent;\n  color: current-color(base);\n}\n\n// Button in Toolbar\n// --------------------------------------------------\n\n:host(.in-toolbar:not(.stories-color):not(.in-toolbar-color)) .button-native {\n  color: #{var(--stories-toolbar-color, var(--color))};\n}\n\n:host(.button-outline.in-toolbar:not(.stories-color):not(.in-toolbar-color)) .button-native {\n  border-color: #{var(--stories-toolbar-color, var(--color, var(--border-color)))};\n}\n\n:host(.button-solid.in-toolbar:not(.stories-color):not(.in-toolbar-color)) .button-native {\n  background: #{var(--stories-toolbar-color, var(--background))};\n  color: #{var(--stories-toolbar-background, var(--color))};\n}\n","import type { EventEmitter } from '@stencil/core';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport { Component, Host, h, Element, Prop, Event } from '@stencil/core';\n\nimport { hasShadowDom, inheritAttributes } from '../../helpers';\nimport type { Color, RouterDirection } from '../../types';\nimport { createColorClasses, hostContext } from '../../utils';\n\n@Component({\n  tag: 'stories-button',\n  styleUrl: 'button.scss',\n  shadow: true,\n})\nexport class Button {\n  private inItem = false;\n  private inListHeader = false;\n  private inToolbar = false;\n  private inheritedAttributes: Record<string, string> = {};\n\n  @Element() el!: HTMLElement;\n\n  /**\n   * The color to use from your application's color palette.\n   * Default options are: `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, and `\"dark\"`.\n   * For more information on colors, see [theming](/docs/theming/basics).\n   */\n  @Prop({ reflect: true }) color?: Color;\n\n  /**\n   * The type of button.\n   */\n  @Prop({ mutable: true }) buttonType = 'button';\n\n  /**\n   * If `true`, the user cannot interact with the button.\n   */\n  @Prop({ reflect: true }) disabled = false;\n\n  /**\n   * Set to `\"block\"` for a full-width button or to `\"full\"` for a full-width button\n   * without left and right borders.\n   */\n  @Prop({ reflect: true }) expand?: 'full' | 'block';\n\n  /**\n   * Set to `\"clear\"` for a transparent button, to `\"outline\"` for a transparent\n   * button with a border, or to `\"solid\"`. The default style is `\"solid\"` except inside of\n   * a toolbar, where the default is `\"clear\"`.\n   */\n  @Prop({ reflect: true, mutable: true }) fill?: 'clear' | 'outline' | 'solid' | 'default';\n\n  /**\n   * When using a router, it specifies the transition direction when navigating to\n   * another page using `href`.\n   */\n  @Prop() routerDirection: RouterDirection = 'forward';\n\n  /**\n   * Contains a URL or a URL fragment that the hyperlink points to.\n   * If this property is set, an anchor tag will be rendered.\n   */\n  @Prop() href: string | undefined;\n\n  /**\n   * The button shape.\n   */\n  @Prop({ reflect: true }) shape?: 'round';\n\n  /**\n   * The type of the button.\n   */\n  @Prop() type: 'submit' | 'reset' | 'button' = 'button';\n\n  /**\n   * The button size.\n   */\n  @Prop({ reflect: true }) size?: 'small' | 'default' | 'large';\n\n  /**\n   * If `true`, activates a button with a heavier font weight.\n   */\n  @Prop() strong = false;\n\n  /**\n   * Specifies where to display the linked URL.\n   * Only applies when an `href` is provided.\n   * Special keywords: `\"_blank\"`, `\"_self\"`, `\"_parent\"`, `\"_top\"`.\n   */\n  @Prop() target: string | undefined;\n\n  /**\n   * Emitted when the button has focus.\n   */\n  @Event() storiesFocus!: EventEmitter<void>;\n\n  /**\n   * Emitted when the button loses focus.\n   */\n  @Event() storiesBlur!: EventEmitter<void>;\n\n  /**\n   * Emitted when the button click.\n   */\n  @Event() storiesClick!: EventEmitter<void>;\n\n  componentWillLoad(): void {\n    this.inToolbar = !!this.el.closest('stories-buttons');\n    this.inListHeader = !!this.el.closest('stories-list-header');\n    this.inItem = !!this.el.closest('stories-item') || !!this.el.closest('stories-item-divider');\n    this.inheritedAttributes = inheritAttributes(this.el, ['aria-label']);\n  }\n\n  private get hasIconOnly() {\n    return !!this.el.querySelector('[slot=\"icon-only\"]');\n  }\n\n  private handleClick = (ev: Event) => {\n    if (this.type === 'button') {\n      this.storiesClick.emit();\n\n    } else if (hasShadowDom(this.el)) {\n      // this button wants to specifically submit a form\n      // climb up the dom to see if we're in a <form>\n      // and if so, then use JS to submit/reset it\n      const form = this.el.closest('form');\n      if (form) {\n        ev.preventDefault();\n\n        const fakeButton = document.createElement('button');\n        fakeButton.type = this.type;\n        fakeButton.style.display = 'none';\n        form.appendChild(fakeButton);\n        fakeButton.click();\n        fakeButton.remove();\n      }\n    }\n  }\n\n  private onFocus = () => {\n    this.storiesFocus.emit();\n  }\n\n  private onBlur = () => {\n    this.storiesBlur.emit();\n  }\n\n  render(): JSX.Element {\n    const { buttonType, type, disabled, target, size, href, color, expand, hasIconOnly, shape, strong, inheritedAttributes } = this;\n    const finalSize = size === undefined && this.inItem ? 'small' : size;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const TagType = href === undefined ? 'button' : 'a' as any;\n    const attrs = (TagType === 'button')\n      ? { type }\n      : {\n        href,\n        target\n      };\n\n    let fill = this.fill;\n    if (fill === undefined) {\n      fill = this.inToolbar || this.inListHeader ? 'clear' : 'solid';\n    }\n    return (\n      <Host\n        aria-disabled={disabled ? 'true' : null}\n        class={createColorClasses(color, {\n          [buttonType]: true,\n          [`${buttonType}-${expand}`]: expand !== undefined,\n          [`${buttonType}-${finalSize}`]: finalSize !== undefined,\n          [`${buttonType}-${shape}`]: shape !== undefined,\n          [`${buttonType}-${fill}`]: true,\n          [`${buttonType}-strong`]: strong,\n          'in-toolbar': hostContext('stories-toolbar', this.el),\n          'in-toolbar-color': hostContext('stories-toolbar[color]', this.el),\n          'button-has-icon-only': hasIconOnly,\n          'button-disabled': disabled,\n          'stories-activatable': true,\n          'stories-focusable': true,\n        })}\n        onClick={this.handleClick}\n      >\n        <TagType\n          {...attrs}\n          class=\"button-native\"\n          disabled={disabled}\n          onBlur={this.onBlur}\n          onFocus={this.onFocus}\n          part=\"native\"\n          {...inheritedAttributes}\n        >\n          <span class=\"button-inner\">\n            <slot name=\"icon-only\"></slot>\n            <slot name=\"start\"></slot>\n            <slot></slot>\n            <slot name=\"end\"></slot>\n          </span>\n        </TagType>\n      </Host>\n    );\n  }\n\n}\n"],"version":3}