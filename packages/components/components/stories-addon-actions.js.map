{"file":"stories-addon-actions.js","mappings":";;;;;;;AAUO,MAAM,YAAY,GAAG,cAAc;;ACV1C,MAAM,eAAe,GAAG,kCAAkC;;MCuB7C,YAAY;EALzB;;;;IAME,OAAE,GAAG,eAAe,CAAC;IAGZ,YAAO,GAAoB,EAAE,CAAC;IA2BvC,cAAS,GAAG,CAAC,aAA4B;MACvC,IAAI,CAAC,OAAO,GAAG,CAAC,GAAG,IAAI,CAAC,OAAO,EAAE,aAAa,CAAC,CAAA;KAChD,CAAC;GAWH;EArCC,KAAK;IACH,OAAO,SAAS,CAAC;GAClB;EAGD,MAAM,mBAAmB,CAAC,KAAqB,EAAE,OAAqB;IACpE,OAAO,CAAC,GAAG,CAAC,kCAAkC,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;IAChE,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;GACnB;EAED,MAAM,gBAAgB;;IAEpB,GAAG,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;;IAExB,QAAQ,CAAC,EAAE,CAAC,YAAY,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;GAC3C;EAED,MAAM,oBAAoB;;IAExB,QAAQ,CAAC,GAAG,CAAC,YAAY,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;;IAE3C,GAAG,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;GAC3B;EAMD,MAAM;IACJ,QACE,EAAC,IAAI,QACH,cACG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,IAAI,cAAK,MAAM,CAAC,IAAI,CAAC,IAAI,CAAM,CAAC,CACrD,CACA,EACP;GACH;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":[],"sources":["./src/addons/addon-actions/Action.ts","./src/addons/addon-actions/addon-actions.scss?tag=stories-addon-actions&encapsulation=shadow","./src/addons/addon-actions/addon-actions.tsx"],"sourcesContent":["/* eslint-disable @typescript-eslint/ban-types */\n/* eslint-disable @typescript-eslint/consistent-type-definitions */\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport type { Options as TelejsonOptions } from 'telejson';\n\nimport { messages } from '../../types';\n\nexport type HandlerFunction = (...args: any[]) => void;\n\nexport const ACTION_EVENT = 'ACTION_EVENT';\nexport interface ActionDisplay {\n  id: string;\n  data: {\n    name: string;\n    args: any[];\n  };\n  count: number;\n  options: ActionOptions;\n}\n\ninterface Options {\n  clearOnStoryChange: boolean;\n  limit: number;\n}\n\nexport type ActionOptions = Partial<Options> & Partial<TelejsonOptions>;\n\nexport const DefaultActionOptions: ActionOptions = {\n  clearOnStoryChange: true,\n  limit: 50,\n};\n\ntype SyntheticEvent = any;\n\nconst findProto = (obj: unknown, callback: (proto: any) => boolean): Function | null => {\n  const proto = Object.getPrototypeOf(obj);\n  if (!proto || callback(proto)) return proto;\n  return findProto(proto, callback);\n};\n\nconst isReactSyntheticEvent = (e: unknown): e is SyntheticEvent =>\n  Boolean(\n    typeof e === 'object' &&\n    e &&\n    findProto(e, (proto) => /^Synthetic(?:Base)?Event$/.test(proto.constructor.name)) &&\n    typeof (e as SyntheticEvent).persist === 'function'\n  );\n\nconst serializeArg = <T>(a: T) => {\n  if (isReactSyntheticEvent(a)) {\n    const e: SyntheticEvent = Object.create(\n      a.constructor.prototype,\n      Object.getOwnPropertyDescriptors(a)\n    );\n    e.persist();\n    const viewDescriptor = Object.getOwnPropertyDescriptor(e, 'view');\n    // dont send the entire window object over.\n    const view: unknown = viewDescriptor?.value;\n    if (typeof view === 'object' && view?.constructor.name === 'Window') {\n      Object.defineProperty(e, 'view', {\n        ...viewDescriptor,\n        value: Object.create(view.constructor.prototype),\n      });\n    }\n    return e;\n  }\n  return a;\n};\n\nexport function action(name: string, options: ActionOptions = {}): HandlerFunction {\n  const actionOptions = {\n    ...DefaultActionOptions,\n    ...options,\n  };\n\n  const handler: HandlerFunction = (...args: any[]) => {\n    const id = (new Date()).getTime().toString(); // uuidv4();\n    const maxDepth = 1;\n    const serializedArgs = args.map(serializeArg);\n    const normalizedArgs = args.length > 1 ? serializedArgs : serializedArgs[0];\n\n    const actionDisplayToEmit: ActionDisplay = {\n      id,\n      count: 0,\n      data: { name, args: normalizedArgs },\n      options: {\n        ...actionOptions,\n        maxDepth: maxDepth,\n        allowFunction: actionOptions.allowFunction || false,\n      },\n    };\n    let cache: any | null = [];\n    const event = JSON.stringify(actionDisplayToEmit, (_: string, value: any) => {\n      if (typeof value === 'object' && value !== null) {\n        if (cache.indexOf(value) !== -1) {\n          // Duplicate reference found, discard key\n          return;\n        }\n        // Store value in our collection\n        cache.push(value);\n      }\n      return value;\n    });\n    cache = null; // Enable garbage collection\n\n    const original = JSON.parse(event);\n\n    console.log(ACTION_EVENT, original);\n    messages.emit(ACTION_EVENT, original);\n  };\n\n  return handler;\n}\n","@import \"../../themes/stories.globals\";\n\n:host {\n  display: block;\n  height: 100%;\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { Component, Host, h, Element, State, Method } from '@stencil/core';\n\nimport { api } from '../../api';\nimport type { Messages, StoryComponent, StoryContext, Addon } from '../../types';\nimport { messages } from '../../types';\n\nimport type { ActionDisplay } from './Action';\nimport { ACTION_EVENT } from './Action';\n// import addonsManager from '../../AddonsManager';\n\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport type AddonActionsState = {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  actions: ActionDisplay[];\n};\n\n@Component({\n  tag: 'stories-addon-actions',\n  styleUrl: 'addon-actions.scss',\n  shadow: true,\n})\nexport class AddonActions implements Addon {\n  id = \"ADDON_ACTIONS\";\n  type: 'panel';\n  @Element() el!: HTMLElement;\n  @State() actions: ActionDisplay[] = [];\n  messages: Messages;\n\n  title(): string {\n    return \"Actions\";\n  }\n\n  @Method()\n  async storyContextChanged(story: StoryComponent, context: StoryContext): Promise<void> {\n    console.log('AddonActions.storyContextChanged', story, context);\n    this.actions = [];\n  }\n\n  async componentDidLoad(): Promise<void> {\n    // Register addon\n    api.registerAddon(this);\n    // Register event listeners\n    messages.on(ACTION_EVENT, this.onActions);\n  }\n\n  async disconnectedCallback(): Promise<void> {\n    // Unregister event listener\n    messages.off(ACTION_EVENT, this.onActions);\n    // Unregster addon\n    api.unregisterAddon(this);\n  }\n\n  onActions = (actionDisplay: ActionDisplay): void => {\n    this.actions = [...this.actions, actionDisplay]\n  };\n\n  render(): JSX.Element {\n    return (\n      <Host>\n        <ul>\n          {this.actions.map(action => <li>{action.data.name}</li>)}\n        </ul>\n      </Host>\n    );\n  }\n}\n"],"version":3}