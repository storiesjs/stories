{"file":"stories-checkbox.js","mappings":"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","names":[],"sources":["./src/components/checkbox/checkbox.scss?tag=stories-checkbox&encapsulation=shadow","./src/components/checkbox/checkbox.tsx"],"sourcesContent":["@import \"../../themes/stories.globals\";\n\n// Checkbox\n// --------------------------------------------------\n\n:host {\n  /**\n   * @prop --size: Size of the checkbox icon\n   *\n   * @prop --background: Background of the checkbox icon\n   * @prop --background-checked: Background of the checkbox icon when checked\n   *\n   * @prop --border-color: Border color of the checkbox icon\n   * @prop --border-radius: Border radius of the checkbox icon\n   * @prop --border-width: Border width of the checkbox icon\n   * @prop --border-style: Border style of the checkbox icon\n   * @prop --border-color-checked: Border color of the checkbox icon when checked\n   *\n   * @prop --transition: Transition of the checkbox icon\n   *\n   * @prop --checkmark-color: Color of the checkbox checkmark when checked\n   * @prop --checkmark-width: Stroke width of the checkbox checkmark\n   */\n  --background-checked: #{stories-color(primary, base)};\n  --border-color-checked: #{stories-color(primary, base)};\n  --checkmark-color: #{stories-color(primary, contrast)};\n  --checkmark-width: 1;\n  --transition: none;\n\n  display: inline-block;\n  position: relative;\n\n  user-select: none;\n  z-index: $z-index-item-input;\n}\n\n:host(.stories-color) {\n  --background-checked: #{current-color(base)};\n  --border-color-checked: #{current-color(base)};\n  --checkmark-color: #{current-color(contrast)};\n}\n\nlabel {\n  @include input-cover();\n\n  display: flex;\n\n  align-items: center;\n\n  opacity: 0;\n}\n\ninput {\n  @include visually-hidden();\n}\n\n.checkbox-icon {\n  @include border-radius(var(--border-radius));\n\n  display: block;\n  position: relative;\n\n  width: 100%;\n  height: 100%;\n\n  transition: var(--transition);\n\n  border-width: var(--border-width);\n  border-style: var(--border-style);\n  border-color: var(--border-color);\n\n  background: var(--background);\n\n  box-sizing: border-box;\n}\n\n.checkbox-icon path {\n  fill: none;\n  stroke: var(--checkmark-color);\n  stroke-width: var(--checkmark-width);\n\n  opacity: 0;\n}\n\n\n// Checked / Indeterminate Checkbox\n// ---------------------------------------------\n\n:host(.checkbox-checked) .checkbox-icon,\n:host(.checkbox-indeterminate) .checkbox-icon {\n  border-color: var(--border-color-checked);\n\n  background: var(--background-checked);\n}\n\n:host(.checkbox-checked) .checkbox-icon path,\n:host(.checkbox-indeterminate) .checkbox-icon path {\n  opacity: 1;\n}\n\n\n// Disabled Checkbox\n// ---------------------------------------------\n\n:host(.checkbox-disabled) {\n  pointer-events: none;\n}\n","import type { EventEmitter } from '@stencil/core';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport { Component, Host, h, Prop, Element, Event, Watch } from '@stencil/core';\n\nimport { getAriaLabel, renderHiddenInput } from '../../helpers';\nimport type { CheckboxChangeEventDetail, Color, StyleEventDetail } from '../../types';\nimport { createColorClasses, hostContext } from '../../utils';\n\nlet checkboxIds = 0;\n\n@Component({\n  tag: 'stories-checkbox',\n  styleUrl: 'checkbox.scss',\n  shadow: true,\n})\nexport class Checkbox {\n\n  private inputId = `stories-cb-${checkboxIds++}`;\n  private focusEl?: HTMLElement;\n\n  @Element() el!: HTMLElement;\n\n  /**\n   * The color to use from your application's color palette.\n   * Default options are: `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, and `\"dark\"`.\n   * For more information on colors, see [theming](/docs/theming/basics).\n   */\n  @Prop({ reflect: true }) color?: Color;\n\n  /**\n   * The name of the control, which is submitted with the form data.\n   */\n  @Prop() name: string = this.inputId;\n\n  /**\n   * If `true`, the checkbox is selected.\n   */\n  @Prop({ mutable: true }) checked = false;\n\n  /**\n   * If `true`, the checkbox will visually appear as indeterminate.\n   */\n  @Prop({ mutable: true }) indeterminate = false;\n\n  /**\n   * If `true`, the user cannot interact with the checkbox.\n   */\n  @Prop() disabled = false;\n\n  /**\n   * The value of the checkbox does not mean if it's checked or not, use the `checked`\n   * property for that.\n   *\n   * The value of a checkbox is analogous to the value of an `<input type=\"checkbox\">`,\n   * it's only used when the checkbox participates in a native `<form>`.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  @Prop() value: any | null = 'on';\n\n  /**\n   * Emitted when the checked property has changed.\n   */\n  @Event() storiesChange!: EventEmitter<CheckboxChangeEventDetail>;\n\n  /**\n   * Emitted when the checkbox has focus.\n   */\n  @Event() storiesFocus!: EventEmitter<void>;\n\n  /**\n   * Emitted when the checkbox loses focus.\n   */\n  @Event() storiesBlur!: EventEmitter<void>;\n\n  /**\n   * Emitted when the styles change.\n   * @internal\n   */\n  @Event() storiesStyle!: EventEmitter<StyleEventDetail>;\n\n  componentWillLoad(): void {\n    this.emitStyle();\n  }\n\n  @Watch('checked')\n  checkedChanged(isChecked: boolean): void {\n    this.storiesChange.emit({\n      checked: isChecked,\n      value: this.value\n    });\n    this.emitStyle();\n  }\n\n  @Watch('disabled')\n  disabledChanged(): void {\n    this.emitStyle();\n  }\n\n  private emitStyle() {\n    this.storiesStyle.emit({\n      'checkbox-checked': this.checked,\n      'interactive-disabled': this.disabled,\n    });\n  }\n\n  private setFocus() {\n    if (this.focusEl) {\n      this.focusEl.focus();\n    }\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private onClick = (ev: any) => {\n    ev.preventDefault();\n\n    this.setFocus();\n    this.checked = !this.checked;\n    this.indeterminate = false;\n  }\n\n  private onFocus = () => {\n    this.storiesFocus.emit();\n  }\n\n  private onBlur = () => {\n    this.storiesBlur.emit();\n  }\n\n  render(): JSX.Element {\n    const { color, checked, disabled, el, indeterminate, inputId, name, value } = this;\n    const { label, labelId, labelText } = getAriaLabel(el, inputId);\n\n    renderHiddenInput(true, el, name, (checked ? value : ''), disabled);\n\n    const path = indeterminate\n      ? <path d=\"M6 12L18 12\" part=\"mark\" />\n      : <path d=\"M5.9,12.5l3.8,3.8l8.8-8.8\" part=\"mark\" />;\n\n    return (\n      <Host\n        aria-checked={`${checked}`}\n        aria-hidden={disabled ? 'true' : null}\n        aria-labelledby={label ? labelId : null}\n        class={createColorClasses(color, {\n          'in-item': hostContext('stories-item', el),\n          'checkbox-checked': checked,\n          'checkbox-disabled': disabled,\n          'checkbox-indeterminate': indeterminate,\n          'interactive': true\n        })}\n        onClick={this.onClick}\n        role=\"checkbox\"\n      >\n        <svg class=\"checkbox-icon\" viewBox=\"0 0 24 24\" part=\"container\">\n          {path}\n        </svg>\n        <label htmlFor={inputId}>\n          {labelText}\n        </label>\n        <input\n          ref={focusEl => this.focusEl = focusEl}\n          aria-checked={`${checked}`}\n          disabled={disabled}\n          id={inputId}\n          onBlur={() => this.onBlur()}\n          onFocus={() => this.onFocus()}\n          type=\"checkbox\"\n        />\n      </Host>\n    );\n  }\n\n}\n"],"version":3}