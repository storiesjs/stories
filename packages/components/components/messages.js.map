{"file":"messages.js","mappings":";;;AAAA;AACA;AACA;AACA;AAkBA;;;AAGO,MAAM,iBAAiB,GAAuC,EAAE,CAAC;AAExE;;;;;AAKO,MAAM,EAAE,GAAG,CAAC,SAAiB,EAAE,QAA0B;EAC5D,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,EAAE;IAC/B,iBAAiB,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC;GACrC;EACD,MAAM,SAAS,GAAG,iBAAiB,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,CAAC,QAAQ;IACzD,OAAO,QAAQ,KAAK,QAAQ,CAAC;GAChC,CAAC,CAAC;EACH,IAAI,CAAC,SAAS,EAAE;IACZ,iBAAiB,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;GAC/C;AACL,CAAC,CAAC;AAEF;;;;;AAKO,MAAM,GAAG,GAAG,CAAC,SAAiB,EAAE,QAA0B;EAC7D,IAAI,iBAAiB,CAAC,SAAS,CAAC,EAAE;IAC9B,iBAAiB,CAAC,SAAS,CAAC,GAAG,iBAAiB,CAAC,SAAS,CAAC,CAAC,MAAM,CAAE,CAAC,QAAQ,KAAK,QAAQ,KAAK,QAAQ,CAAE,CAAC;GAC7G;AACL,CAAC,CAAC;AAEF;;;;AAIO,MAAM,KAAK,GAAG;EACjB,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,OAAO,CAAC,CAAC,SAAS;IAC7C,iBAAiB,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC;GACrC,CAAC,CAAC;AACP,CAAC,CAAC;AAEF;;;;;AAKO,MAAM,IAAI,GAAG,CAAC,SAAiB,EAAE,OAAY;EAChD,IAAI,iBAAiB,CAAC,SAAS,CAAC,EAAE;IAC9B,iBAAiB,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,CAAC,QAAQ;MAC1C,IAAI;QACA,QAAQ,CAAC,OAAO,CAAC,CAAC;OACrB;MAAC,OAAO,KAAK,EAAE;;OAEf;KACJ,CAAC,CAAC;GACN;AACL,CAAC,CAAC;MAEI,QAAQ,GAAa;EACvB,EAAE;EACF,GAAG;EACH,KAAK;EACL,IAAI;;;;;","names":[],"sources":["./src/types/messages.ts"],"sourcesContent":["/* eslint-disable import/no-anonymous-default-export */\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n/* eslint-disable @typescript-eslint/consistent-type-definitions */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/**\n * A basic pub-sub mechanism for sibling component communication\n */\n\n export type Messages = {\n    on: (eventName: string, callback: CallbackFunction) => void;\n    off: (eventName: string, callback: CallbackFunction) => void;\n    clear: () => void;\n    emit: (eventName: string, payload: any) => void;\n };\n\n/**\n * Callback function type\n */\nexport type CallbackFunction = (...args: any[]) => void;\n\n/**\n * All registered listeners\n */\nexport const messagesListeners: Record<string, CallbackFunction[]> = {};\n\n/**\n * Registers a callback for an event\n * @param {string} eventName - Name of the event to listen for.\n * @param {function} callback - Function to invoke when said event is fired.\n */\nexport const on = (eventName: string, callback: CallbackFunction): void => {\n    if (!messagesListeners[eventName]) {\n        messagesListeners[eventName] = [];\n    }\n    const duplicate = messagesListeners[eventName].find((listener) => {\n        return listener === callback;\n    });\n    if (!duplicate) {\n        messagesListeners[eventName].push(callback);\n    }\n};\n\n/**\n * Unregisters a callback for an event\n * @param {string} eventName - Name of the event to unregister from.\n * @param {function} callback - Function to unregister.\n */\nexport const off = (eventName: string, callback: CallbackFunction): void => {\n    if (messagesListeners[eventName]) {\n        messagesListeners[eventName] = messagesListeners[eventName].filter( (listener) => listener !== callback );\n    }\n};\n\n/**\n * Unregisters all event listeners bound to an object.\n * @param {object} thisArg - All the callbacks bound to this object will be removed.\n */\nexport const clear = (): void => {\n    Object.keys(messagesListeners).forEach((eventName) => {\n        messagesListeners[eventName] = [];\n    });\n};\n\n/**\n * Fires an event to listeners.\n * @param {string} eventName - Name of the event to fire.\n * @param {*} payload - Payload of the event to fire.\n */\nexport const emit = (eventName: string, payload: any): void => {\n    if (messagesListeners[eventName]) {\n        messagesListeners[eventName].forEach((listener) => {\n            try {\n                listener(payload);\n            } catch (error) {\n                // fail silently\n            }\n        });\n    }\n};\n\nconst messages: Messages = {\n    on,\n    off,\n    clear,\n    emit\n};\n\nexport default messages;"],"version":3}