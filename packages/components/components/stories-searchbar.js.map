{"file":"stories-searchbar.js","mappings":"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","names":[],"sources":["./src/components/searchbar/searchbar.scss?tag=stories-searchbar&encapsulation=shadow","./src/components/searchbar/searchbar.tsx"],"sourcesContent":["@import \"../../themes/stories.globals\";\n\n// Searchbar\n// --------------------------------------------------\n\n:host {\n  /**\n   * @prop --background: Background of the searchbar input\n   * @prop --box-shadow: Box shadow of the searchbar input\n   * @prop --border-radius: Border radius of the searchbar input\n   * @prop --cancel-button-color: Color of the searchbar cancel button\n   * @prop --clear-button-color: Color of the searchbar clear button\n   * @prop --color: Color of the searchbar text\n   * @prop --icon-color: Color of the searchbar icon\n   * @prop --placeholder-color: Color of the searchbar placeholder\n   * @prop --placeholder-font-style: Font style of the searchbar placeholder\n   * @prop --placeholder-font-weight: Font weight of the searchbar placeholder\n   * @prop --placeholder-opacity: Opacity of the searchbar placeholder\n   */\n  --placeholder-color: initial;\n  --placeholder-font-style: initial;\n  --placeholder-font-weight: initial;\n  --placeholder-opacity: .5;\n\n  @include font-smoothing();\n\n  display: flex;\n  position: relative;\n\n  align-items: center;\n\n  width: 100%;\n\n  color: var(--color);\n\n  font-family: $font-family-base;\n  box-sizing: border-box;\n}\n\n:host(.stories-color) {\n  color: current-color(contrast);\n}\n\n:host(.stories-color) .searchbar-input {\n  background: current-color(base);\n}\n\n:host(.stories-color) .searchbar-clear-button,\n:host(.stories-color) .searchbar-cancel-button,\n:host(.stories-color) .searchbar-search-icon {\n  color: inherit;\n}\n\n.searchbar-search-icon {\n  // Don't let them tap on the icon\n  color: var(--icon-color);\n\n  pointer-events: none;\n}\n\n.searchbar-input-container {\n  display: block;\n  position: relative;\n\n  flex-shrink: 1;\n\n  width: 100%;\n}\n\n.searchbar-input {\n  @include text-inherit();\n  @include border-radius(var(--border-radius));\n\n  display: block;\n\n  width: 100%;\n\n  border: 0;\n\n  outline: none;\n\n  background: var(--background);\n\n  font-family: inherit;\n\n  box-shadow: var(--box-shadow);\n\n  box-sizing: border-box;\n  appearance: none;\n\n  &::placeholder {\n    color: var(--placeholder-color);\n\n    font-family: inherit;\n    font-style: var(--placeholder-font-style);\n    font-weight: var(--placeholder-font-weight);\n\n    opacity: var(--placeholder-opacity);\n  }\n\n  &::-webkit-search-cancel-button,\n  &::-ms-clear {\n    display: none;\n  }\n}\n\n.searchbar-cancel-button {\n  @include margin(0);\n\n  display: none;\n\n  height: 100%;\n\n  border: 0;\n\n  outline: none;\n\n  color: var(--cancel-button-color);\n\n  cursor: pointer;\n  appearance: none;\n}\n\n.searchbar-cancel-button > div {\n  display: flex;\n\n  align-items: center;\n  justify-content: center;\n\n  width: 100%;\n  height: 100%;\n}\n\n.searchbar-clear-button {\n  @include margin(0);\n  @include padding(0);\n\n  display: none;\n\n  min-height: 0;\n\n  outline: none;\n\n  color: var(--clear-button-color);\n  appearance: none;\n}\n\n:host(.searchbar-has-value.searchbar-should-show-clear) .searchbar-clear-button {\n  display: block;\n}\n\n:host(.searchbar-disabled) {\n  cursor: default;\n  opacity: .4;\n  pointer-events: none;\n}\n","import type { EventEmitter } from '@stencil/core';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport { Component, Host, h, Prop, Element, State, Watch, Event, Method, forceUpdate } from '@stencil/core';\n\nimport { debounceEvent, raf } from '../../helpers';\nimport type { Color, SearchbarChangeEventDetail, StyleEventDetail } from '../../types';\nimport { createColorClasses } from '../../utils';\n\n@Component({\n  tag: 'stories-searchbar',\n  styleUrl: 'searchbar.scss',\n  shadow: true,\n})\nexport class Searchbar {\n\n  private nativeInput?: HTMLInputElement;\n  private shouldAlignLeft = true;\n\n  @Element() el!: HTMLStoriesSearchbarElement;\n\n  @State() focused = false;\n\n  /**\n   * The color to use from your application's color palette.\n   * Default options are: `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, and `\"dark\"`.\n   * For more information on colors, see [theming](/docs/theming/basics).\n   */\n  @Prop({ reflect: true }) color?: Color;\n\n  /**\n   * Set the cancel button icon. Only applies to `md` mode.\n   * Defaults to `\"arrow-back-sharp\"`.\n   */\n  @Prop() cancelButtonIcon = 'arrow-back-sharp';\n\n  /**\n   * Set the clear icon. Defaults to `\"close-circle\"` for `ios` and `\"close-sharp\"` for `md`.\n   */\n  @Prop() clearIcon?: string;\n\n  /**\n   * Set the amount of time, in milliseconds, to wait to trigger the `ionChange` event after each keystroke. This also impacts form bindings such as `ngModel` or `v-model`.\n   */\n  @Prop() debounce = 250;\n\n  @Watch('debounce')\n  protected debounceChanged(): void {\n    this.storiesChange = debounceEvent(this.storiesChange, this.debounce);\n  }\n\n  /**\n   * If `true`, the user cannot interact with the input.\n   */\n  @Prop() disabled = false;\n\n  /**\n   * A hint to the browser for which keyboard to display.\n   * Possible values: `\"none\"`, `\"text\"`, `\"tel\"`, `\"url\"`,\n   * `\"email\"`, `\"numeric\"`, `\"decimal\"`, and `\"search\"`.\n   */\n  @Prop() inputmode?: 'none' | 'text' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search';\n\n  /**\n   * Set the input's placeholder.\n   * `placeholder` can accept either plaintext or HTML as a string.\n   * To display characters normally reserved for HTML, they\n   * must be escaped. For example `<Stories>` would become\n   * `&lt;Stories&gt;`\n   */\n  @Prop() placeholder = 'Search';\n\n  /**\n   * The icon to use as the search icon. Defaults to `\"search-outline\"` in\n   * `ios` mode and `\"search-sharp\"` in `md` mode.\n   */\n  @Prop() searchIcon?: string;\n\n  /**\n   * Sets the behavior for the cancel button. Defaults to `\"never\"`.\n   * Setting to `\"focus\"` shows the cancel button on focus.\n   * Setting to `\"never\"` hides the cancel button.\n   * Setting to `\"always\"` shows the cancel button regardless\n   * of focus state.\n   */\n  @Prop() showCancelButton: 'never' | 'focus' | 'always' = 'never';\n\n  /**\n   * Sets the behavior for the clear button. Defaults to `\"focus\"`.\n   * Setting to `\"focus\"` shows the clear button on focus if the\n   * input is not empty.\n   * Setting to `\"never\"` hides the clear button.\n   * Setting to `\"always\"` shows the clear button regardless\n   * of focus state, but only if the input is not empty.\n   */\n  @Prop() showClearButton: 'never' | 'focus' | 'always' = 'always';\n\n  /**\n   * Set the type of the input.\n   */\n  @Prop() type: 'text' | 'password' | 'email' | 'number' | 'search' | 'tel' | 'url' = 'search';\n\n  /**\n   * the value of the searchbar.\n   */\n  @Prop({ mutable: true }) value?: string | null = '';\n\n  /**\n   * Emitted when a keyboard input occurred.\n   */\n  @Event() storiesInput!: EventEmitter<KeyboardEvent>;\n\n  /**\n   * Emitted when the value has changed.\n   */\n  @Event() storiesChange!: EventEmitter<SearchbarChangeEventDetail>;\n\n  /**\n   * Emitted when the cancel button is clicked.\n   */\n  @Event() storiesCancel!: EventEmitter<void>;\n\n  /**\n   * Emitted when the clear input button is clicked.\n   */\n  @Event() storiesClear!: EventEmitter<void>;\n\n  /**\n   * Emitted when the input loses focus.\n   */\n  @Event() storiesBlur!: EventEmitter<void>;\n\n  /**\n   * Emitted when the input has focus.\n   */\n  @Event() storiesFocus!: EventEmitter<void>;\n\n  /**\n   * Emitted when the styles change.\n   * @internal\n   */\n  @Event() storiesStyle!: EventEmitter<StyleEventDetail>;\n\n  @Watch('value')\n  protected valueChanged(): void {\n    const inputEl = this.nativeInput;\n    const value = this.getValue();\n    if (inputEl && inputEl.value !== value) {\n      inputEl.value = value;\n    }\n    this.storiesChange.emit({ value });\n  }\n\n  @Watch('showCancelButton')\n  protected showCancelButtonChanged(): void {\n    requestAnimationFrame(() => {\n      this.positionElements();\n      forceUpdate(this);\n    });\n  }\n\n  connectedCallback(): void {\n    this.emitStyle();\n  }\n\n  componentDidLoad(): void {\n    this.positionElements();\n    this.debounceChanged();\n  }\n\n  private emitStyle() {\n    this.storiesStyle.emit({\n      'searchbar': true\n    });\n  }\n\n  /**\n   * Sets focus on the specified `stories-searchbar`. Use this method instead of the global\n   * `input.focus()`.\n   */\n  @Method()\n  async setFocus(): Promise<void> {\n    if (this.nativeInput) {\n      this.nativeInput.focus();\n    }\n  }\n\n  /**\n   * Returns the native `<input>` element used under the hood.\n   */\n  @Method()\n  getInputElement(): Promise<HTMLInputElement> {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    return Promise.resolve(this.nativeInput!);\n  }\n\n  /**\n   * Clears the input field and triggers the control change.\n   */\n  private onClearInput = (ev?: Event, shouldFocus?: boolean) => {\n    this.storiesClear.emit();\n\n    if (ev) {\n      ev.preventDefault();\n      ev.stopPropagation();\n    }\n\n    // wait for 4 frames\n    setTimeout(() => {\n      const value = this.getValue();\n      if (value !== '') {\n        this.value = '';\n        this.storiesInput.emit();\n\n        /**\n         * When tapping clear button\n         * ensure input is focused after\n         * clearing input so users\n         * can quickly start typing.\n         */\n        if (shouldFocus && !this.focused) {\n          this.setFocus();\n        }\n      }\n    }, 16 * 4);\n  }\n\n  /**\n   * Update the Searchbar input value when the input changes\n   */\n  private onInput = (ev: Event) => {\n    const input = ev.target as HTMLInputElement | null;\n    if (input) {\n      this.value = input.value;\n    }\n    this.storiesInput.emit(ev as KeyboardEvent);\n  }\n\n  /**\n   * Sets the Searchbar to not focused and checks if it should align left\n   * based on whether there is a value in the searchbar or not.\n   */\n  private onBlur = () => {\n    this.focused = false;\n    this.storiesBlur.emit();\n    this.positionElements();\n  }\n\n  /**\n   * Sets the Searchbar to focused and active on input focus.\n   */\n  private onFocus = () => {\n    this.focused = true;\n    this.storiesFocus.emit();\n    this.positionElements();\n  }\n\n  /**\n   * Positions the input search icon, placeholder, and the cancel button\n   * based on the input value and if it is focused. (ios only)\n   */\n  private positionElements() {\n    const value = this.getValue();\n    const prevAlignLeft = this.shouldAlignLeft;\n    const shouldAlignLeft = (value.trim() !== '' || !!this.focused);\n    this.shouldAlignLeft = shouldAlignLeft;\n\n    if (prevAlignLeft !== shouldAlignLeft) {\n      this.positionPlaceholder();\n    }\n  }\n\n  /**\n   * Positions the input placeholder\n   */\n  private positionPlaceholder() {\n    const inputEl = this.nativeInput;\n    if (!inputEl) {\n      return;\n    }\n    const isRTL = document.dir === 'rtl';\n    const iconEl = (this.el.shadowRoot || this.el).querySelector('.searchbar-search-icon') as HTMLElement;\n\n    if (this.shouldAlignLeft) {\n      inputEl.removeAttribute('style');\n      iconEl.removeAttribute('style');\n\n    } else {\n      // Create a dummy span to get the placeholder width\n      const doc = document;\n      const tempSpan = doc.createElement('span');\n      tempSpan.innerText = this.placeholder || '';\n      doc.body.appendChild(tempSpan);\n\n      // Get the width of the span then remove it\n      raf(() => {\n        const textWidth = tempSpan.offsetWidth;\n        tempSpan.remove();\n\n        // Calculate the input padding\n        const inputLeft = 'calc(50% - ' + (textWidth / 2) + 'px)';\n\n        // Calculate the icon margin\n        const iconLeft = 'calc(50% - ' + ((textWidth / 2) + 30) + 'px)';\n\n        // Set the input padding start and icon margin start\n        if (isRTL) {\n          inputEl.style.paddingRight = inputLeft;\n          iconEl.style.marginRight = iconLeft;\n        } else {\n          inputEl.style.paddingLeft = inputLeft;\n          iconEl.style.marginLeft = iconLeft;\n        }\n      });\n    }\n  }\n\n  private getValue() {\n    return this.value || '';\n  }\n\n  private hasValue(): boolean {\n    return this.getValue() !== '';\n  }\n\n  /**\n   * Determines whether or not the clear button should be visible onscreen.\n   * Clear button should be shown if one of two conditions applies:\n   * 1. `showClearButton` is set to `always`.\n   * 2. `showClearButton` is set to `focus`, and the searchbar has been focused.\n   */\n  private shouldShowClearButton(): boolean {\n    if ((this.showClearButton === 'never') || (this.showClearButton === 'focus' && !this.focused)) {\n      return false;\n    }\n\n    return true;\n  }\n\n  render(): JSX.Element {\n    const clearIcon = this.clearIcon || 'close-sharp';\n    const searchIcon = this.searchIcon || 'search-sharp';\n\n    return (\n      <Host\n        aria-disabled={this.disabled ? 'true' : null}\n        class={createColorClasses(this.color, {\n          'searchbar-disabled': this.disabled,\n          'searchbar-has-value': this.hasValue(),\n          'searchbar-left-aligned': this.shouldAlignLeft,\n          'searchbar-has-focus': this.focused,\n          'searchbar-should-show-clear': this.shouldShowClearButton(),\n        })}\n        role=\"search\"\n      >\n\n        <div class=\"searchbar-input-container\">\n          <input\n            ref={el => this.nativeInput = el}\n            aria-label=\"search text\"\n            class=\"searchbar-input\"\n            disabled={this.disabled}\n            inputMode={this.inputmode}\n            onBlur={this.onBlur}\n            onFocus={this.onFocus}\n            onInput={this.onInput}\n            placeholder={this.placeholder}\n            type={this.type}\n            value={this.getValue()}\n          />\n\n          <stories-icon aria-hidden=\"true\" class=\"searchbar-search-icon\" name={searchIcon}></stories-icon>\n\n          <button\n            aria-label=\"reset\"\n            class=\"searchbar-clear-button\"\n            onMouseDown={ev => this.onClearInput(ev, true)}\n            onTouchStart={ev => this.onClearInput(ev, true)}\n            type=\"button\"\n            no-blur\n          >\n            <stories-icon aria-hidden=\"true\" class=\"searchbar-clear-icon\" name={clearIcon}></stories-icon>\n          </button>\n        </div>\n      </Host>\n    );\n  }\n}\n"],"version":3}