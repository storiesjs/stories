/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { ActionEvent, ActionItem, ActionItems, Color, Commands, TabBarChangedEventDetail, TabButtonClickEventDetail, TabButtonLayout, ToolEvent } from "./types";
import { StoryComponent, StoryModules } from "@stories/stories-common";
export namespace Components {
    interface StoriesActionBar {
        /**
          * Action items
         */
        "actionItems": ActionItems;
    }
    interface StoriesActionButton {
        /**
          * ActionItem property
         */
        "actionItem": ActionItem;
    }
    interface StoriesAddonActions {
    }
    interface StoriesAddonControls {
    }
    interface StoriesAddons {
    }
    interface StoriesApp {
        /**
          * Story Modules
         */
        "modules": StoryModules;
    }
    interface StoriesIcon {
        /**
          * Icon name
         */
        "name": string;
    }
    interface StoriesLabel {
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`. For more information on colors, see [theming](/docs/theming/basics).
         */
        "color"?: Color;
        /**
          * The position determines where and how the label behaves inside an item.
         */
        "position"?: 'fixed' | 'stacked' | 'floating';
    }
    interface StoriesPreview {
    }
    interface StoriesSidebar {
    }
    interface StoriesSplitPane {
        "defaultSize": number;
        "isResizing": boolean;
        "minSize": number;
        "split": "horizontal" | "vertical";
    }
    interface StoriesTab {
        "active": boolean;
        /**
          * A tab id must be provided for each `ion-tab`. It's used internally to reference the selected tab or by the router to switch between them.
         */
        "tab": string;
    }
    interface StoriesTabBar {
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`. For more information on colors, see [theming](/docs/theming/basics).
         */
        "color"?: Color;
        /**
          * The selected tab component
         */
        "selectedTab"?: string;
    }
    interface StoriesTabButton {
        /**
          * If `true`, the user cannot interact with the tab button.
         */
        "disabled": boolean;
        /**
          * Set the layout of the text and icon in the tab bar. It defaults to `'icon-start'`.
         */
        "layout"?: TabButtonLayout;
        /**
          * The selected tab component
         */
        "selected": boolean;
        /**
          * A tab id must be provided for each `ion-tab`. It's used internally to reference the selected tab or by the router to switch between them.
         */
        "tab"?: string;
    }
    interface StoriesTabs {
        /**
          * Get the currently selected tab.
         */
        "getSelected": () => Promise<string | undefined>;
        /**
          * Get a specific tab by the value of its `tab` property or an element reference.
          * @param tab The tab instance to select. If passed a string, it should be the value of the tab's `tab` property.
         */
        "getTab": (tab: string | HTMLStoriesTabElement) => Promise<HTMLStoriesTabElement | undefined>;
        /**
          * Select a tab by the value of its `tab` property or an element reference.
          * @param tab The tab instance to select. If passed a string, it should be the value of the tab's `tab` property.
         */
        "select": (tab: string | HTMLStoriesTabElement) => Promise<boolean>;
    }
    interface StoriesToolBar {
    }
    interface StoriesToolButton {
        /**
          * command property
         */
        "command": Commands;
        /**
          * disabled property
         */
        "disabled": boolean;
        /**
          * icon property
         */
        "icon": string;
    }
    interface StoriesToolZoom {
    }
    interface StoriesZoom {
        "zoom": number;
    }
}
declare global {
    interface HTMLStoriesActionBarElement extends Components.StoriesActionBar, HTMLStencilElement {
    }
    var HTMLStoriesActionBarElement: {
        prototype: HTMLStoriesActionBarElement;
        new (): HTMLStoriesActionBarElement;
    };
    interface HTMLStoriesActionButtonElement extends Components.StoriesActionButton, HTMLStencilElement {
    }
    var HTMLStoriesActionButtonElement: {
        prototype: HTMLStoriesActionButtonElement;
        new (): HTMLStoriesActionButtonElement;
    };
    interface HTMLStoriesAddonActionsElement extends Components.StoriesAddonActions, HTMLStencilElement {
    }
    var HTMLStoriesAddonActionsElement: {
        prototype: HTMLStoriesAddonActionsElement;
        new (): HTMLStoriesAddonActionsElement;
    };
    interface HTMLStoriesAddonControlsElement extends Components.StoriesAddonControls, HTMLStencilElement {
    }
    var HTMLStoriesAddonControlsElement: {
        prototype: HTMLStoriesAddonControlsElement;
        new (): HTMLStoriesAddonControlsElement;
    };
    interface HTMLStoriesAddonsElement extends Components.StoriesAddons, HTMLStencilElement {
    }
    var HTMLStoriesAddonsElement: {
        prototype: HTMLStoriesAddonsElement;
        new (): HTMLStoriesAddonsElement;
    };
    interface HTMLStoriesAppElement extends Components.StoriesApp, HTMLStencilElement {
    }
    var HTMLStoriesAppElement: {
        prototype: HTMLStoriesAppElement;
        new (): HTMLStoriesAppElement;
    };
    interface HTMLStoriesIconElement extends Components.StoriesIcon, HTMLStencilElement {
    }
    var HTMLStoriesIconElement: {
        prototype: HTMLStoriesIconElement;
        new (): HTMLStoriesIconElement;
    };
    interface HTMLStoriesLabelElement extends Components.StoriesLabel, HTMLStencilElement {
    }
    var HTMLStoriesLabelElement: {
        prototype: HTMLStoriesLabelElement;
        new (): HTMLStoriesLabelElement;
    };
    interface HTMLStoriesPreviewElement extends Components.StoriesPreview, HTMLStencilElement {
    }
    var HTMLStoriesPreviewElement: {
        prototype: HTMLStoriesPreviewElement;
        new (): HTMLStoriesPreviewElement;
    };
    interface HTMLStoriesSidebarElement extends Components.StoriesSidebar, HTMLStencilElement {
    }
    var HTMLStoriesSidebarElement: {
        prototype: HTMLStoriesSidebarElement;
        new (): HTMLStoriesSidebarElement;
    };
    interface HTMLStoriesSplitPaneElement extends Components.StoriesSplitPane, HTMLStencilElement {
    }
    var HTMLStoriesSplitPaneElement: {
        prototype: HTMLStoriesSplitPaneElement;
        new (): HTMLStoriesSplitPaneElement;
    };
    interface HTMLStoriesTabElement extends Components.StoriesTab, HTMLStencilElement {
    }
    var HTMLStoriesTabElement: {
        prototype: HTMLStoriesTabElement;
        new (): HTMLStoriesTabElement;
    };
    interface HTMLStoriesTabBarElement extends Components.StoriesTabBar, HTMLStencilElement {
    }
    var HTMLStoriesTabBarElement: {
        prototype: HTMLStoriesTabBarElement;
        new (): HTMLStoriesTabBarElement;
    };
    interface HTMLStoriesTabButtonElement extends Components.StoriesTabButton, HTMLStencilElement {
    }
    var HTMLStoriesTabButtonElement: {
        prototype: HTMLStoriesTabButtonElement;
        new (): HTMLStoriesTabButtonElement;
    };
    interface HTMLStoriesTabsElement extends Components.StoriesTabs, HTMLStencilElement {
    }
    var HTMLStoriesTabsElement: {
        prototype: HTMLStoriesTabsElement;
        new (): HTMLStoriesTabsElement;
    };
    interface HTMLStoriesToolBarElement extends Components.StoriesToolBar, HTMLStencilElement {
    }
    var HTMLStoriesToolBarElement: {
        prototype: HTMLStoriesToolBarElement;
        new (): HTMLStoriesToolBarElement;
    };
    interface HTMLStoriesToolButtonElement extends Components.StoriesToolButton, HTMLStencilElement {
    }
    var HTMLStoriesToolButtonElement: {
        prototype: HTMLStoriesToolButtonElement;
        new (): HTMLStoriesToolButtonElement;
    };
    interface HTMLStoriesToolZoomElement extends Components.StoriesToolZoom, HTMLStencilElement {
    }
    var HTMLStoriesToolZoomElement: {
        prototype: HTMLStoriesToolZoomElement;
        new (): HTMLStoriesToolZoomElement;
    };
    interface HTMLStoriesZoomElement extends Components.StoriesZoom, HTMLStencilElement {
    }
    var HTMLStoriesZoomElement: {
        prototype: HTMLStoriesZoomElement;
        new (): HTMLStoriesZoomElement;
    };
    interface HTMLElementTagNameMap {
        "stories-action-bar": HTMLStoriesActionBarElement;
        "stories-action-button": HTMLStoriesActionButtonElement;
        "stories-addon-actions": HTMLStoriesAddonActionsElement;
        "stories-addon-controls": HTMLStoriesAddonControlsElement;
        "stories-addons": HTMLStoriesAddonsElement;
        "stories-app": HTMLStoriesAppElement;
        "stories-icon": HTMLStoriesIconElement;
        "stories-label": HTMLStoriesLabelElement;
        "stories-preview": HTMLStoriesPreviewElement;
        "stories-sidebar": HTMLStoriesSidebarElement;
        "stories-split-pane": HTMLStoriesSplitPaneElement;
        "stories-tab": HTMLStoriesTabElement;
        "stories-tab-bar": HTMLStoriesTabBarElement;
        "stories-tab-button": HTMLStoriesTabButtonElement;
        "stories-tabs": HTMLStoriesTabsElement;
        "stories-tool-bar": HTMLStoriesToolBarElement;
        "stories-tool-button": HTMLStoriesToolButtonElement;
        "stories-tool-zoom": HTMLStoriesToolZoomElement;
        "stories-zoom": HTMLStoriesZoomElement;
    }
}
declare namespace LocalJSX {
    interface StoriesActionBar {
        /**
          * Action items
         */
        "actionItems"?: ActionItems;
    }
    interface StoriesActionButton {
        /**
          * ActionItem property
         */
        "actionItem"?: ActionItem;
        /**
          * Action Event
         */
        "onAction"?: (event: CustomEvent<ActionEvent>) => void;
    }
    interface StoriesAddonActions {
    }
    interface StoriesAddonControls {
    }
    interface StoriesAddons {
    }
    interface StoriesApp {
        /**
          * Story Modules
         */
        "modules"?: StoryModules;
        "onStory"?: (event: CustomEvent<StoryComponent>) => void;
    }
    interface StoriesIcon {
        /**
          * Icon name
         */
        "name"?: string;
    }
    interface StoriesLabel {
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`. For more information on colors, see [theming](/docs/theming/basics).
         */
        "color"?: Color;
        /**
          * The position determines where and how the label behaves inside an item.
         */
        "position"?: 'fixed' | 'stacked' | 'floating';
    }
    interface StoriesPreview {
    }
    interface StoriesSidebar {
    }
    interface StoriesSplitPane {
        "defaultSize"?: number;
        "isResizing"?: boolean;
        "minSize"?: number;
        "onSizechanged"?: (event: CustomEvent<number>) => void;
        "split"?: "horizontal" | "vertical";
    }
    interface StoriesTab {
        "active"?: boolean;
        /**
          * A tab id must be provided for each `ion-tab`. It's used internally to reference the selected tab or by the router to switch between them.
         */
        "tab": string;
    }
    interface StoriesTabBar {
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`. For more information on colors, see [theming](/docs/theming/basics).
         */
        "color"?: Color;
        "onStoriesTabBarChanged"?: (event: CustomEvent<TabBarChangedEventDetail>) => void;
        /**
          * The selected tab component
         */
        "selectedTab"?: string;
    }
    interface StoriesTabButton {
        /**
          * If `true`, the user cannot interact with the tab button.
         */
        "disabled"?: boolean;
        /**
          * Set the layout of the text and icon in the tab bar. It defaults to `'icon-start'`.
         */
        "layout"?: TabButtonLayout;
        /**
          * Emitted when the tab bar is clicked
         */
        "onStoriesTabButtonClick"?: (event: CustomEvent<TabButtonClickEventDetail>) => void;
        /**
          * The selected tab component
         */
        "selected"?: boolean;
        /**
          * A tab id must be provided for each `ion-tab`. It's used internally to reference the selected tab or by the router to switch between them.
         */
        "tab"?: string;
    }
    interface StoriesTabs {
    }
    interface StoriesToolBar {
    }
    interface StoriesToolButton {
        /**
          * command property
         */
        "command"?: Commands;
        /**
          * disabled property
         */
        "disabled"?: boolean;
        /**
          * icon property
         */
        "icon"?: string;
        /**
          * Action Event
         */
        "onAction"?: (event: CustomEvent<ToolEvent>) => void;
    }
    interface StoriesToolZoom {
    }
    interface StoriesZoom {
        "zoom"?: number;
    }
    interface IntrinsicElements {
        "stories-action-bar": StoriesActionBar;
        "stories-action-button": StoriesActionButton;
        "stories-addon-actions": StoriesAddonActions;
        "stories-addon-controls": StoriesAddonControls;
        "stories-addons": StoriesAddons;
        "stories-app": StoriesApp;
        "stories-icon": StoriesIcon;
        "stories-label": StoriesLabel;
        "stories-preview": StoriesPreview;
        "stories-sidebar": StoriesSidebar;
        "stories-split-pane": StoriesSplitPane;
        "stories-tab": StoriesTab;
        "stories-tab-bar": StoriesTabBar;
        "stories-tab-button": StoriesTabButton;
        "stories-tabs": StoriesTabs;
        "stories-tool-bar": StoriesToolBar;
        "stories-tool-button": StoriesToolButton;
        "stories-tool-zoom": StoriesToolZoom;
        "stories-zoom": StoriesZoom;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "stories-action-bar": LocalJSX.StoriesActionBar & JSXBase.HTMLAttributes<HTMLStoriesActionBarElement>;
            "stories-action-button": LocalJSX.StoriesActionButton & JSXBase.HTMLAttributes<HTMLStoriesActionButtonElement>;
            "stories-addon-actions": LocalJSX.StoriesAddonActions & JSXBase.HTMLAttributes<HTMLStoriesAddonActionsElement>;
            "stories-addon-controls": LocalJSX.StoriesAddonControls & JSXBase.HTMLAttributes<HTMLStoriesAddonControlsElement>;
            "stories-addons": LocalJSX.StoriesAddons & JSXBase.HTMLAttributes<HTMLStoriesAddonsElement>;
            "stories-app": LocalJSX.StoriesApp & JSXBase.HTMLAttributes<HTMLStoriesAppElement>;
            "stories-icon": LocalJSX.StoriesIcon & JSXBase.HTMLAttributes<HTMLStoriesIconElement>;
            "stories-label": LocalJSX.StoriesLabel & JSXBase.HTMLAttributes<HTMLStoriesLabelElement>;
            "stories-preview": LocalJSX.StoriesPreview & JSXBase.HTMLAttributes<HTMLStoriesPreviewElement>;
            "stories-sidebar": LocalJSX.StoriesSidebar & JSXBase.HTMLAttributes<HTMLStoriesSidebarElement>;
            "stories-split-pane": LocalJSX.StoriesSplitPane & JSXBase.HTMLAttributes<HTMLStoriesSplitPaneElement>;
            "stories-tab": LocalJSX.StoriesTab & JSXBase.HTMLAttributes<HTMLStoriesTabElement>;
            "stories-tab-bar": LocalJSX.StoriesTabBar & JSXBase.HTMLAttributes<HTMLStoriesTabBarElement>;
            "stories-tab-button": LocalJSX.StoriesTabButton & JSXBase.HTMLAttributes<HTMLStoriesTabButtonElement>;
            "stories-tabs": LocalJSX.StoriesTabs & JSXBase.HTMLAttributes<HTMLStoriesTabsElement>;
            "stories-tool-bar": LocalJSX.StoriesToolBar & JSXBase.HTMLAttributes<HTMLStoriesToolBarElement>;
            "stories-tool-button": LocalJSX.StoriesToolButton & JSXBase.HTMLAttributes<HTMLStoriesToolButtonElement>;
            "stories-tool-zoom": LocalJSX.StoriesToolZoom & JSXBase.HTMLAttributes<HTMLStoriesToolZoomElement>;
            "stories-zoom": LocalJSX.StoriesZoom & JSXBase.HTMLAttributes<HTMLStoriesZoomElement>;
        }
    }
}
