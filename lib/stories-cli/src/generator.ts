import { parse, format } from 'path';

import { camelCase } from 'camel-case';

// eslint-disable-next-line @typescript-eslint/consistent-type-definitions
type Import = {
  name: string; 
  originalPath: string;
  importPath: string;
};

function prepareImports(paths: string[]): Import[] {
  const names = new Set<string>();

  const imports = paths.map((path, i) => {
    const parsed = parse(path);

    const name = camelCase(parsed.name);
    if (!names.has(name)) {
      names.add(name);
    } else {
      names.add(`${name}_${i}`);
    }

    // const name = (() => {
    //   const symbolName = camelCase(parsed.name);

    //   if (!names.has(symbolName)) {
    //     return symbolName;
    //   }

    //   return `${symbolName}_${i}`;
    // })();

    // names.add(name);

    const importPath = `./${format(parsed)}`;

    // const importPath = `./${format({
    //   ...parsed,
    //   base: undefined,
    //   ext: undefined,
    // })}`;

    return { name, originalPath: path, importPath };
  })

  return imports;
}

export function generateOutput(paths: string[]): string {
  const imports = prepareImports(paths);
  
  return [
    '/* NOTE: This is an autogenerated file; please do not edit. */\n',
    imports
      .map(({ name, importPath }) => `import * as ${name} from '${importPath}'`)
      .join(';\n'),
    '',
    'const modules = [',
    imports.map(({ name }) => `  ${name},`).join('\n'),
    '];\n',
    'export default modules;'
  ].join('\n');
}
